
stepper_display_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007698  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08007838  08007838  00008838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a64  08007a64  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a6c  08007a6c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007a6c  08007a6c  00008a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08007a78  08007a78  00008a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007a84  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000005c  08007ae0  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08007ae0  00009324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fc36  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004720  00000000  00000000  00038cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6e  00000000  00000000  0003e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbc7  00000000  00000000  0003f4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f65  00000000  00000000  0005c0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad1a9  00000000  00000000  00073022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001201cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bac  00000000  00000000  00120210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00126dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007820 	.word	0x08007820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08007820 	.word	0x08007820

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b96a 	b.w	8000eb8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	460c      	mov	r4, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14e      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	458c      	cmp	ip, r1
 8000c0c:	4686      	mov	lr, r0
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	d962      	bls.n	8000cda <__udivmoddi4+0xde>
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f f68c 	uxth.w	r6, ip
 8000c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb04 f106 	mul.w	r1, r4, r6
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c52:	f080 8112 	bcs.w	8000e7a <__udivmoddi4+0x27e>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 810f 	bls.w	8000e7a <__udivmoddi4+0x27e>
 8000c5c:	3c02      	subs	r4, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x94>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c82:	f080 80fc 	bcs.w	8000e7e <__udivmoddi4+0x282>
 8000c86:	429e      	cmp	r6, r3
 8000c88:	f240 80f9 	bls.w	8000e7e <__udivmoddi4+0x282>
 8000c8c:	4463      	add	r3, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	1b9b      	subs	r3, r3, r6
 8000c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11d      	cbz	r5, 8000ca2 <__udivmoddi4+0xa6>
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d905      	bls.n	8000cb6 <__udivmoddi4+0xba>
 8000caa:	b10d      	cbz	r5, 8000cb0 <__udivmoddi4+0xb4>
 8000cac:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e7f5      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d146      	bne.n	8000d4c <__udivmoddi4+0x150>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xcc>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f0c0 80f0 	bcc.w	8000ea8 <__udivmoddi4+0x2ac>
 8000cc8:	1a86      	subs	r6, r0, r2
 8000cca:	eb64 0303 	sbc.w	r3, r4, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0e6      	beq.n	8000ca2 <__udivmoddi4+0xa6>
 8000cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd8:	e7e3      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x204>
 8000ce0:	eba1 040c 	sub.w	r4, r1, ip
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x11c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x11a>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	f200 80cd 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000d16:	4626      	mov	r6, r4
 8000d18:	1a1c      	subs	r4, r3, r0
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d22:	fb08 4410 	mls	r4, r8, r0, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	429f      	cmp	r7, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x148>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x146>
 8000d3c:	429f      	cmp	r7, r3
 8000d3e:	f200 80b0 	bhi.w	8000ea2 <__udivmoddi4+0x2a6>
 8000d42:	4620      	mov	r0, r4
 8000d44:	1bdb      	subs	r3, r3, r7
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0x9c>
 8000d4c:	f1c1 0620 	rsb	r6, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 f706 	lsr.w	r7, r2, r6
 8000d56:	431f      	orrs	r7, r3
 8000d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d60:	ea43 030c 	orr.w	r3, r3, ip
 8000d64:	40f4      	lsrs	r4, r6
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	0c38      	lsrs	r0, r7, #16
 8000d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d70:	fbb4 fef0 	udiv	lr, r4, r0
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	fb00 441e 	mls	r4, r0, lr, r4
 8000d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d80:	fb0e f90c 	mul.w	r9, lr, ip
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90a      	bls.n	8000da2 <__udivmoddi4+0x1a6>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d92:	f080 8084 	bcs.w	8000e9e <__udivmoddi4+0x2a2>
 8000d96:	45a1      	cmp	r9, r4
 8000d98:	f240 8081 	bls.w	8000e9e <__udivmoddi4+0x2a2>
 8000d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	eba4 0409 	sub.w	r4, r4, r9
 8000da6:	fa1f f983 	uxth.w	r9, r3
 8000daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dae:	fb00 4413 	mls	r4, r0, r3, r4
 8000db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1d2>
 8000dbe:	193c      	adds	r4, r7, r4
 8000dc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc4:	d267      	bcs.n	8000e96 <__udivmoddi4+0x29a>
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d965      	bls.n	8000e96 <__udivmoddi4+0x29a>
 8000dca:	3b02      	subs	r3, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd6:	eba4 040c 	sub.w	r4, r4, ip
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	469c      	mov	ip, r3
 8000de0:	d351      	bcc.n	8000e86 <__udivmoddi4+0x28a>
 8000de2:	d04e      	beq.n	8000e82 <__udivmoddi4+0x286>
 8000de4:	b155      	cbz	r5, 8000dfc <__udivmoddi4+0x200>
 8000de6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dea:	eb64 040c 	sbc.w	r4, r4, ip
 8000dee:	fa04 f606 	lsl.w	r6, r4, r6
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e750      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e10:	4094      	lsls	r4, r2
 8000e12:	430c      	orrs	r4, r1
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3110 	mls	r1, r8, r0, r3
 8000e28:	0c23      	lsrs	r3, r4, #16
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f107 	mul.w	r1, r0, r7
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x24c>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3e:	d22c      	bcs.n	8000e9a <__udivmoddi4+0x29e>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d92a      	bls.n	8000e9a <__udivmoddi4+0x29e>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e50:	fb08 3311 	mls	r3, r8, r1, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb01 f307 	mul.w	r3, r1, r7
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x276>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e68:	d213      	bcs.n	8000e92 <__udivmoddi4+0x296>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	d911      	bls.n	8000e92 <__udivmoddi4+0x296>
 8000e6e:	3902      	subs	r1, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	1ae4      	subs	r4, r4, r3
 8000e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e78:	e739      	b.n	8000cee <__udivmoddi4+0xf2>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	e6f0      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e706      	b.n	8000c90 <__udivmoddi4+0x94>
 8000e82:	45c8      	cmp	r8, r9
 8000e84:	d2ae      	bcs.n	8000de4 <__udivmoddi4+0x1e8>
 8000e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <__udivmoddi4+0x1e8>
 8000e92:	4631      	mov	r1, r6
 8000e94:	e7ed      	b.n	8000e72 <__udivmoddi4+0x276>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e799      	b.n	8000dce <__udivmoddi4+0x1d2>
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e7d4      	b.n	8000e48 <__udivmoddi4+0x24c>
 8000e9e:	46d6      	mov	lr, sl
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1a6>
 8000ea2:	4463      	add	r3, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e74d      	b.n	8000d44 <__udivmoddi4+0x148>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4608      	mov	r0, r1
 8000eae:	e70f      	b.n	8000cd0 <__udivmoddi4+0xd4>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	e730      	b.n	8000d18 <__udivmoddi4+0x11c>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <_ZN13DisplayModuleC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>:
#include "display_module.hpp"

DisplayModule::DisplayModule(TIM_HandleTypeDef* htim, uint8_t segments,
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af06      	add	r7, sp, #24
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71fb      	strb	r3, [r7, #7]
  direction(Direction_ClockWise),						// Direction of rotation
  segments(segments),									// Max number of display segments
  single_segment_angle(DEG_PER_REVOLUTION / segments),	// Single segment angle size
  next_segment_selected(false),							// Jumping flag
  state(State_Reset),									// Default starting state
  is_zero_position(0),									// Zero position
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
  state(State_Reset),									// Default starting state
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	711a      	strb	r2, [r3, #4]
  direction(Direction_ClockWise),						// Direction of rotation
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	715a      	strb	r2, [r3, #5]
  segment(0),											// Target segment position,
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	719a      	strb	r2, [r3, #6]
  single_segment_angle(DEG_PER_REVOLUTION / segments),	// Single segment angle size
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000eea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	811a      	strh	r2, [r3, #8]
: motor(htim, in1_port, in1_pin, in2_port, in2_pin, in3_port, in3_pin, in4_port, in4_pin),
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f103 0010 	add.w	r0, r3, #16
 8000efa:	8c3a      	ldrh	r2, [r7, #32]
 8000efc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000efe:	9305      	str	r3, [sp, #20]
 8000f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	f001 fcef 	bl	80028fc <_ZN12StepperMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
  HALL_SENSOR_PIN(_hall_pin),							// Sensor pin
  HALL_SENSOR_PORT(_hall_port)							// Sensor port
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	651a      	str	r2, [r3, #80]	@ 0x50
  HALL_SENSOR_PIN(_hall_pin),							// Sensor pin
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8b3a      	ldrh	r2, [r7, #24]
 8000f28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  segments(segments),									// Max number of display segments
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  next_segment_selected(false),							// Jumping flag
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
{

}
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <_ZN13DisplayModule12StateMachineEv>:

// State Machine of Display:
void DisplayModule::StateMachine()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	switch (state)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	791b      	ldrb	r3, [r3, #4]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d854      	bhi.n	8001002 <_ZN13DisplayModule12StateMachineEv+0xba>
 8000f58:	a201      	add	r2, pc, #4	@ (adr r2, 8000f60 <_ZN13DisplayModule12StateMachineEv+0x18>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000ff3 	.word	0x08000ff3
 8000f68:	08000f8b 	.word	0x08000f8b
 8000f6c:	08000fcd 	.word	0x08000fcd
	{
	case State_Reset:
		// Reset:
		reset_DisplayModule();
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f851 	bl	8001018 <_ZN13DisplayModule19reset_DisplayModuleEv>
		// If the reset has completed, go to IDLE state:
		if (reset_DisplayModule()) state = State_IDLE;
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f84e 	bl	8001018 <_ZN13DisplayModule19reset_DisplayModuleEv>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d041      	beq.n	8001006 <_ZN13DisplayModule12StateMachineEv+0xbe>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	711a      	strb	r2, [r3, #4]
		break;
 8000f88:	e03d      	b.n	8001006 <_ZN13DisplayModule12StateMachineEv+0xbe>
	case State_Jump:
		if (direction == Direction_CounterClockWise)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	795b      	ldrb	r3, [r3, #5]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10b      	bne.n	8000faa <_ZN13DisplayModule12StateMachineEv+0x62>
		{
			// Set next segment in clockwise direction:
			set_PreviousSegment();
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f90a 	bl	80011ac <_ZN13DisplayModule19set_PreviousSegmentEv>
			// If operation has completed, go to IDLE state:
			if (set_PreviousSegment()) state = State_IDLE;
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f907 	bl	80011ac <_ZN13DisplayModule19set_PreviousSegmentEv>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <_ZN13DisplayModule12StateMachineEv+0x62>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	711a      	strb	r2, [r3, #4]
		}
		if (direction == Direction_ClockWise)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d12b      	bne.n	800100a <_ZN13DisplayModule12StateMachineEv+0xc2>
		{
			// Set previous segment in clockwise direction:
			set_NextSegment();
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f87a 	bl	80010ac <_ZN13DisplayModule15set_NextSegmentEv>
			// If operation has completed, go to IDLE state:
			if (set_NextSegment()) state = State_IDLE;
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f877 	bl	80010ac <_ZN13DisplayModule15set_NextSegmentEv>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d022      	beq.n	800100a <_ZN13DisplayModule12StateMachineEv+0xc2>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	711a      	strb	r2, [r3, #4]
		}
		break;
 8000fca:	e01e      	b.n	800100a <_ZN13DisplayModule12StateMachineEv+0xc2>
	case State_Move:
		// Set selected segment:
		set_DisplaySegment(segment);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	799b      	ldrb	r3, [r3, #6]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f847 	bl	8001066 <_ZN13DisplayModule18set_DisplaySegmentEh>
		// Set next segment in clockwise direction:
		if (set_DisplaySegment(segment)) state = State_IDLE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	799b      	ldrb	r3, [r3, #6]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f841 	bl	8001066 <_ZN13DisplayModule18set_DisplaySegmentEh>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d011      	beq.n	800100e <_ZN13DisplayModule12StateMachineEv+0xc6>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	711a      	strb	r2, [r3, #4]
		break;
 8000ff0:	e00d      	b.n	800100e <_ZN13DisplayModule12StateMachineEv+0xc6>
	case State_IDLE:
		// Clear all flags there and wait for other commands:
		next_segment_selected = false;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
		is_zero_position = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
		break;
 8001000:	e006      	b.n	8001010 <_ZN13DisplayModule12StateMachineEv+0xc8>
	default:
		break;
 8001002:	bf00      	nop
 8001004:	e004      	b.n	8001010 <_ZN13DisplayModule12StateMachineEv+0xc8>
		break;
 8001006:	bf00      	nop
 8001008:	e002      	b.n	8001010 <_ZN13DisplayModule12StateMachineEv+0xc8>
		break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <_ZN13DisplayModule12StateMachineEv+0xc8>
		break;
 800100e:	bf00      	nop
	};
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN13DisplayModule19reset_DisplayModuleEv>:

// Reset Display Module:
bool DisplayModule::reset_DisplayModule(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	// if hall_sensor ends detecting magnet:
	if (is_zero_position == 1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d113      	bne.n	8001050 <_ZN13DisplayModule19reset_DisplayModuleEv+0x38>
	{
		// Reset all types of display's motor positions:
		motor.position = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
		motor.position_deg = 0;
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor.position_deg_int = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]

		// Stop motor after detection finish:
		motor.motorStop();
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3310      	adds	r3, #16
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fce6 	bl	8002a18 <_ZN12StepperMotor9motorStopEv>
		return true;
 800104c:	2301      	movs	r3, #1
 800104e:	e006      	b.n	800105e <_ZN13DisplayModule19reset_DisplayModuleEv+0x46>
	}
	else
	{
		// Move display's motor forward:
		motor.motorGo(Direction_ClockWise);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3310      	adds	r3, #16
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fcca 	bl	80029f0 <_ZN12StepperMotor7motorGoE9Direction>
		return false;
 800105c:	2300      	movs	r3, #0
	}
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_ZN13DisplayModule18set_DisplaySegmentEh>:

// Set target segment of Display module in direction that you want to move:
bool DisplayModule::set_DisplaySegment(uint8_t target_segment)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
	// Check that target is in range:
	if (target_segment >= segments) target_segment = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	429a      	cmp	r2, r3
 800107c:	d301      	bcc.n	8001082 <_ZN13DisplayModule18set_DisplaySegmentEh+0x1c>
 800107e:	2300      	movs	r3, #0
 8001080:	70fb      	strb	r3, [r7, #3]
	// Calculate target position angle:
	uint32_t target_position_deg = target_segment * single_segment_angle;
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	8912      	ldrh	r2, [r2, #8]
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	60fb      	str	r3, [r7, #12]
	// Set calculated position:
	return motor.setPositionDeg(target_position_deg, direction);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f103 0010 	add.w	r0, r3, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	461a      	mov	r2, r3
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	f001 fc8b 	bl	80029b6 <_ZN12StepperMotor14setPositionDegEm9Direction>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <_ZN13DisplayModule15set_NextSegmentEv>:

// Set next segment of display module:
bool DisplayModule::set_NextSegment(void)
{
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	// Increment target_segment only one time [when flag is false]
	if (!next_segment_selected)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d05b      	beq.n	800117c <_ZN13DisplayModule15set_NextSegmentEv+0xd0>
	{
		// Calculate current segment:
		current_segment = std::floor(motor.position_deg / static_cast<double>(single_segment_angle));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	891b      	ldrh	r3, [r3, #8]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa20 	bl	8000514 <__aeabi_ui2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff fbbe 	bl	800085c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	ec43 2b17 	vmov	d7, r2, r3
 80010e8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ec:	eef0 0a67 	vmov.f32	s1, s15
 80010f0:	f006 f8c6 	bl	8007280 <floor>
 80010f4:	eeb0 7a40 	vmov.f32	s14, s0
 80010f8:	eef0 7a60 	vmov.f32	s15, s1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
		// Increment segment:
		++current_segment;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <_ZN13DisplayModule15set_NextSegmentEv+0xfc>)
 800110e:	f7ff f8c5 	bl	800029c <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Check that target is in range:
		if (current_segment >= segments) current_segment = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa03 	bl	8000534 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fced 	bl	8000b14 <__aeabi_dcmpge>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <_ZN13DisplayModule15set_NextSegmentEv+0xa2>
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

		// Set target segment:
		target_segment = static_cast<uint8_t>(current_segment);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd18 	bl	8000b8c <__aeabi_d2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
		set_DisplaySegment(target_segment);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800116c:	4619      	mov	r1, r3
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff79 	bl	8001066 <_ZN13DisplayModule18set_DisplaySegmentEh>

		// Set selection flag:
		next_segment_selected = true;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	}

	// Check bool condition:
	if (set_DisplaySegment(target_segment) == true)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff6e 	bl	8001066 <_ZN13DisplayModule18set_DisplaySegmentEh>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <_ZN13DisplayModule15set_NextSegmentEv+0xf2>
	{
		return true;
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <_ZN13DisplayModule15set_NextSegmentEv+0xf4>
		target_segment = 0;
		current_segment = 0;
	}
	else
	{
		return false;
 800119e:	2300      	movs	r3, #0
	}
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}
 80011a8:	3ff00000 	.word	0x3ff00000

080011ac <_ZN13DisplayModule19set_PreviousSegmentEv>:

// Set previous segment of display module:
bool DisplayModule::set_PreviousSegment(void)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	// Decrement target_segment only one time [when flag is false]
	if (!next_segment_selected)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80011ba:	f083 0301 	eor.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d05e      	beq.n	8001282 <_ZN13DisplayModule19set_PreviousSegmentEv+0xd6>
	{
		// Calculate current segment:
		current_segment = std::floor(motor.position_deg / static_cast<double>(single_segment_angle));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	891b      	ldrh	r3, [r3, #8]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9a0 	bl	8000514 <__aeabi_ui2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff fb3e 	bl	800085c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ec43 2b17 	vmov	d7, r2, r3
 80011e8:	eeb0 0a47 	vmov.f32	s0, s14
 80011ec:	eef0 0a67 	vmov.f32	s1, s15
 80011f0:	f006 f846 	bl	8007280 <floor>
 80011f4:	eeb0 7a40 	vmov.f32	s14, s0
 80011f8:	eef0 7a60 	vmov.f32	s15, s1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
		// Decrement segment:
		--current_segment;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <_ZN13DisplayModule19set_PreviousSegmentEv+0x104>)
 800120e:	f7ff f843 	bl	8000298 <__aeabi_dsub>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Check that target is in range:
		if (current_segment < 0) current_segment = static_cast<double>(segments) - 1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	f7ff fc5f 	bl	8000aec <__aeabi_dcmplt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00f      	beq.n	8001254 <_ZN13DisplayModule19set_PreviousSegmentEv+0xa8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f96a 	bl	8000514 <__aeabi_ui2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <_ZN13DisplayModule19set_PreviousSegmentEv+0x104>)
 8001246:	f7ff f827 	bl	8000298 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

		target_segment = static_cast<uint8_t>(current_segment);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc95 	bl	8000b8c <__aeabi_d2uiz>
 8001262:	4603      	mov	r3, r0
 8001264:	b2da      	uxtb	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

		set_DisplaySegment(target_segment);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fef6 	bl	8001066 <_ZN13DisplayModule18set_DisplaySegmentEh>

		// Set selection flag:
		next_segment_selected = true;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	}
	// Check bool condition:
	if (set_DisplaySegment(target_segment) == true)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff feeb 	bl	8001066 <_ZN13DisplayModule18set_DisplaySegmentEh>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <_ZN13DisplayModule19set_PreviousSegmentEv+0xf8>
	{
		return true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <_ZN13DisplayModule19set_PreviousSegmentEv+0xfa>
		target_segment = 0;
		current_segment = 0;
	}
	else
	{
		return false;
 80012a4:	2300      	movs	r3, #0
	}
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdb0      	pop	{r4, r5, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	3ff00000 	.word	0x3ff00000

080012b4 <_ZN13DisplayModule15is_hallDetectedEv>:

void DisplayModule::is_hallDetected(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	// If sensor detects magnet:
	if (HAL_GPIO_ReadPin(HALL_SENSOR_PORT, HALL_SENSOR_PIN) == GPIO_PIN_RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80012c6:	4619      	mov	r1, r3
 80012c8:	4610      	mov	r0, r2
 80012ca:	f003 fbcd 	bl	8004a68 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <_ZN13DisplayModule15is_hallDetectedEv+0x32>
	{
		is_zero_position = 1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		is_zero_position = 0;
	}
}
 80012e4:	e002      	b.n	80012ec <_ZN13DisplayModule15is_hallDetectedEv+0x38>
		is_zero_position = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a30      	ldr	r2, [pc, #192]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <MX_GPIO_Init+0xe0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT1_1_Pin|MOT1_2_Pin|MOT1_3_Pin|MOT1_4_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001364:	481c      	ldr	r0, [pc, #112]	@ (80013d8 <MX_GPIO_Init+0xe4>)
 8001366:	f003 fb97 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT2_1_Pin|MOT2_2_Pin|MOT2_3_Pin|MOT2_4_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8001370:	481a      	ldr	r0, [pc, #104]	@ (80013dc <MX_GPIO_Init+0xe8>)
 8001372:	f003 fb91 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOT1_1_Pin|MOT1_2_Pin|MOT1_3_Pin|MOT1_4_Pin;
 8001376:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <MX_GPIO_Init+0xe4>)
 8001390:	f003 f9e6 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = HALL1_Pin|HALL2_Pin;
 8001394:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_GPIO_Init+0xe8>)
 80013aa:	f003 f9d9 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT2_1_Pin|MOT2_2_Pin|MOT2_3_Pin|MOT2_4_Pin;
 80013ae:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_GPIO_Init+0xe8>)
 80013c8:	f003 f9ca 	bl	8004760 <HAL_GPIO_Init>

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020000 	.word	0x40020000

080013e0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f805 	bl	8001416 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
    }
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f98f 	bl	800176e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEED1Ev>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f96d 	bl	8001744 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ffeb 	bl	800145a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b09d      	sub	sp, #116	@ 0x74
 8001494:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f002 ff4d 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f8d9 	bl	8001650 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149e:	f7ff ff29 	bl	80012f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014a2:	f001 fd1b 	bl	8002edc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80014a6:	f002 fea1 	bl	80041ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80014aa:	f001 fcc7 	bl	8002e3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  #define SEGMENTS_PER_DISPLAY 7

  module1 = new DisplayModule(&htim1, SEGMENTS_PER_DISPLAY, HALL1_GPIO_Port, HALL1_Pin, MOT1_1_GPIO_Port, MOT1_1_Pin, MOT1_2_GPIO_Port, MOT1_2_Pin, MOT1_3_GPIO_Port, MOT1_3_Pin, MOT1_4_GPIO_Port, MOT1_4_Pin);
 80014ae:	2068      	movs	r0, #104	@ 0x68
 80014b0:	f005 fb42 	bl	8006b38 <_Znwj>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461c      	mov	r4, r3
 80014b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014bc:	9308      	str	r3, [sp, #32]
 80014be:	4b59      	ldr	r3, [pc, #356]	@ (8001624 <main+0x194>)
 80014c0:	9307      	str	r3, [sp, #28]
 80014c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014c6:	9306      	str	r3, [sp, #24]
 80014c8:	4b56      	ldr	r3, [pc, #344]	@ (8001624 <main+0x194>)
 80014ca:	9305      	str	r3, [sp, #20]
 80014cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d0:	9304      	str	r3, [sp, #16]
 80014d2:	4b54      	ldr	r3, [pc, #336]	@ (8001624 <main+0x194>)
 80014d4:	9303      	str	r3, [sp, #12]
 80014d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	4b51      	ldr	r3, [pc, #324]	@ (8001624 <main+0x194>)
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4b50      	ldr	r3, [pc, #320]	@ (8001628 <main+0x198>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	4950      	ldr	r1, [pc, #320]	@ (800162c <main+0x19c>)
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff fce5 	bl	8000ebc <_ZN13DisplayModuleC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>
 80014f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001630 <main+0x1a0>)
 80014f4:	601c      	str	r4, [r3, #0]
  module2 = new DisplayModule(&htim2, SEGMENTS_PER_DISPLAY, HALL2_GPIO_Port, HALL2_Pin, MOT2_1_GPIO_Port, MOT2_1_Pin, MOT2_2_GPIO_Port, MOT2_2_Pin, MOT2_3_GPIO_Port, MOT2_3_Pin, MOT2_4_GPIO_Port, MOT2_4_Pin);
 80014f6:	2068      	movs	r0, #104	@ 0x68
 80014f8:	f005 fb1e 	bl	8006b38 <_Znwj>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461c      	mov	r4, r3
 8001500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001504:	9308      	str	r3, [sp, #32]
 8001506:	4b48      	ldr	r3, [pc, #288]	@ (8001628 <main+0x198>)
 8001508:	9307      	str	r3, [sp, #28]
 800150a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800150e:	9306      	str	r3, [sp, #24]
 8001510:	4b45      	ldr	r3, [pc, #276]	@ (8001628 <main+0x198>)
 8001512:	9305      	str	r3, [sp, #20]
 8001514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001518:	9304      	str	r3, [sp, #16]
 800151a:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <main+0x198>)
 800151c:	9303      	str	r3, [sp, #12]
 800151e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <main+0x198>)
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <main+0x198>)
 8001530:	2207      	movs	r2, #7
 8001532:	4940      	ldr	r1, [pc, #256]	@ (8001634 <main+0x1a4>)
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fcc1 	bl	8000ebc <_ZN13DisplayModuleC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>
 800153a:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <main+0x1a8>)
 800153c:	601c      	str	r4, [r3, #0]

  displays_map["D1"] = module1;
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	4618      	mov	r0, r3
 8001544:	f005 fb09 	bl	8006b5a <_ZNSaIcEC1Ev>
 8001548:	f107 0220 	add.w	r2, r7, #32
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	493a      	ldr	r1, [pc, #232]	@ (800163c <main+0x1ac>)
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fe70 	bl	8007238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	4619      	mov	r1, r3
 800155e:	4838      	ldr	r0, [pc, #224]	@ (8001640 <main+0x1b0>)
 8001560:	f000 f926 	bl	80017b0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>
 8001564:	4602      	mov	r2, r0
 8001566:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <main+0x1a0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fc8a 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4618      	mov	r0, r3
 800157c:	f005 faee 	bl	8006b5c <_ZNSaIcED1Ev>
  displays_map["D2"] = module2;
 8001580:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fae8 	bl	8006b5a <_ZNSaIcEC1Ev>
 800158a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	492c      	ldr	r1, [pc, #176]	@ (8001644 <main+0x1b4>)
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fe4f 	bl	8007238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4827      	ldr	r0, [pc, #156]	@ (8001640 <main+0x1b0>)
 80015a2:	f000 f905 	bl	80017b0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <main+0x1a8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fc69 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 facd 	bl	8006b5c <_ZNSaIcED1Ev>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&single_byte, sizeof(single_byte));
 80015c2:	2201      	movs	r2, #1
 80015c4:	4920      	ldr	r1, [pc, #128]	@ (8001648 <main+0x1b8>)
 80015c6:	4821      	ldr	r0, [pc, #132]	@ (800164c <main+0x1bc>)
 80015c8:	f004 fb90 	bl	8005cec <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uart_CmdHandler();
 80015cc:	f001 fd5e 	bl	800308c <_Z15uart_CmdHandlerv>

	  for (auto& display : displays_map)
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <main+0x1b0>)
 80015d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80015d4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80015d6:	f000 f94b 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 80015da:	4603      	mov	r3, r0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80015e0:	f000 f953 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	e012      	b.n	8001610 <main+0x180>
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f97e 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 80015f2:	6438      	str	r0, [r7, #64]	@ 0x40
	  {
		  display.second->is_hallDetected();
 80015f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fe5b 	bl	80012b4 <_ZN13DisplayModule15is_hallDetectedEv>
		  display.second->StateMachine();
 80015fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fca0 	bl	8000f48 <_ZN13DisplayModule12StateMachineEv>
	  for (auto& display : displays_map)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f95e 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 8001610:	463a      	mov	r2, r7
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f944 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1e3      	bne.n	80015ea <main+0x15a>
	  }

  }
 8001622:	e7d3      	b.n	80015cc <main+0x13c>
 8001624:	40020400 	.word	0x40020400
 8001628:	40020000 	.word	0x40020000
 800162c:	2000009c 	.word	0x2000009c
 8001630:	20000078 	.word	0x20000078
 8001634:	200000e4 	.word	0x200000e4
 8001638:	2000007c 	.word	0x2000007c
 800163c:	08007838 	.word	0x08007838
 8001640:	20000080 	.word	0x20000080
 8001644:	0800783c 	.word	0x0800783c
 8001648:	20000140 	.word	0x20000140
 800164c:	2000018c 	.word	0x2000018c

08001650 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	@ 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	@ 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fffe 	bl	8007660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <_Z18SystemClock_Configv+0xe0>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	4a2c      	ldr	r2, [pc, #176]	@ (8001730 <_Z18SystemClock_Configv+0xe0>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	@ 0x40
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <_Z18SystemClock_Configv+0xe0>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <_Z18SystemClock_Configv+0xe4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800169c:	4a25      	ldr	r2, [pc, #148]	@ (8001734 <_Z18SystemClock_Configv+0xe4>)
 800169e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <_Z18SystemClock_Configv+0xe4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016c4:	2319      	movs	r3, #25
 80016c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c8:	23a8      	movs	r3, #168	@ 0xa8
 80016ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f9f7 	bl	8004acc <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf14      	ite	ne
 80016e4:	2301      	movne	r3, #1
 80016e6:	2300      	moveq	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80016ee:	f000 f823 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	230f      	movs	r3, #15
 80016f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	2302      	movs	r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fc54 	bl	8004fbc <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001724:	f000 f808 	bl	8001738 <Error_Handler>
  }
}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	@ 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <Error_Handler+0x8>

08001744 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f8dc 	bl	800190a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEC1Ev>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f8e4 	bl	8001922 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe4a 	bl	80013f8 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8de 	bl	8001938 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEED1Ev>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f8fd 	bl	800198e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8001794:	4603      	mov	r3, r0
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8d8 	bl	800194e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe4e 	bl	8001442 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08b      	sub	sp, #44	@ 0x2c
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f8f2 	bl	80019a6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_>
 80017c2:	4603      	mov	r3, r0
 80017c4:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f85f 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	f107 020c 	add.w	r2, r7, #12
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f8f2 	bl	80019c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d112      	bne.n	800180c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0x5c>
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f900 	bl	80019ec <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv>
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f87c 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f900 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0x60>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0x62>
 8001810:	2300      	movs	r3, #0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01f      	beq.n	8001856 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8001816:	687c      	ldr	r4, [r7, #4]
 8001818:	f107 0208 	add.w	r2, r7, #8
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f92a 	bl	8001a7c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1ERKSt17_Rb_tree_iteratorISA_E>
					std::forward_as_tuple(std::move(__k)),
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f000 f8fb 	bl	8001a24 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800182e:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f90f 	bl	8001a5a <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
 800183c:	f107 0218 	add.w	r2, r7, #24
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	4a08      	ldr	r2, [pc, #32]	@ (800186c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0xbc>)
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	4620      	mov	r0, r4
 800184e:	f000 f925 	bl	8001a9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_>
 8001852:	4603      	mov	r3, r0
 8001854:	60bb      	str	r3, [r7, #8]
					std::tuple<>());
	return (*__i).second;
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f847 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 8001860:	4603      	mov	r3, r0
 8001862:	3318      	adds	r3, #24
      }
 8001864:	4618      	mov	r0, r3
 8001866:	3724      	adds	r7, #36	@ 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	0800787c 	.word	0x0800787c

08001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f954 	bl	8001b28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8001880:	4603      	mov	r3, r0
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f958 	bl	8001b4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f995 	bl	8006c08 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80018de:	4602      	mov	r2, r0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	601a      	str	r2, [r3, #0]
	return *this;
 80018e4:	687b      	ldr	r3, [r7, #4]
      }
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f936 	bl	8001b6c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE9_M_valptrEv>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f938 	bl	8001b88 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEC1Ev>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
      { }
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001958:	e011      	b.n	800197e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0x30>
	{
	  _M_erase(_S_right(__x));
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f000 f91f 	bl	8001b9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001960:	4603      	mov	r3, r0
 8001962:	4619      	mov	r1, r3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fff2 	bl	800194e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
	  _Link_type __y = _S_left(__x);
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f000 f923 	bl	8001bb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001970:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f92a 	bl	8001bce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	  __x = __y;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ea      	bne.n	800195a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0xc>
	}
    }
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f92a 	bl	8001bf0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE9_M_mbeginEv>
 800199c:	4603      	mov	r3, r0
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f927 	bl	8001c08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv>:
      key_comp() const
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f91d 	bl	8001c36 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv>
 80019fc:	bf00      	nop
 80019fe:	4620      	mov	r0, r4
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}

08001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f000 f919 	bl	8001c4c <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f92c 	bl	8001ca8 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f000 f901 	bl	8001c6c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f907 	bl	8001c82 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1ERKSt17_Rb_tree_iteratorISA_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b08c      	sub	sp, #48	@ 0x30
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f90c 	bl	8001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	6838      	ldr	r0, [r7, #0]
 8001ab4:	f000 f913 	bl	8001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001ab8:	4605      	mov	r5, r0
 8001aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001abc:	f000 f91a 	bl	8001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f107 001c 	add.w	r0, r7, #28
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	462b      	mov	r3, r5
 8001aca:	4622      	mov	r2, r4
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	f000 f91c 	bl	8001d0a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEERSG_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fa72 	bl	8001fc0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node6_M_keyEv>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f107 0014 	add.w	r0, r7, #20
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	f000 f948 	bl	8001d7a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_>
	if (__res.second)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d009      	beq.n	8001b04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8001af0:	f107 001c 	add.w	r0, r7, #28
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001afc:	f000 fa6e 	bl	8001fdc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSJ_E>
 8001b00:	4604      	mov	r4, r0
 8001b02:	e007      	b.n	8001b14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_+0x78>
	return iterator(__res.first);
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fa7e 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
 8001b12:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f919 	bl	8001d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeD1Ev>
 8001b1e:	4623      	mov	r3, r4
 8001b20:	4618      	mov	r0, r3
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bdb0      	pop	{r4, r5, r7, pc}

08001b28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fa67 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	1d1a      	adds	r2, r3, #4
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa56 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE9_M_valptrEv>:
      _M_valptr()
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3310      	adds	r3, #16
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fa57 	bl	800202c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE6_M_ptrEv>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fa32 	bl	8002044 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>
	_M_put_node(__p);
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa43 	bl	800206e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>
      }
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff febb 	bl	800198e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fa39 	bl	8002092 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	4621      	mov	r1, r4
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fa3f 	bl	80020aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}

08001c36 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv>:
      key_comp() const
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8001c3e:	bf00      	nop
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 8001c56:	6839      	ldr	r1, [r7, #0]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f005 fa51 	bl	8007100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	0fdb      	lsrs	r3, r3, #31
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8001c82:	b590      	push	{r4, r7, lr}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8001c8c:	687c      	ldr	r4, [r7, #4]
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f7ff ffec 	bl	8001c6c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4619      	mov	r1, r3
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f000 fa37 	bl	800210c <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}

08001ca8 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
      { }
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEERSG_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8001d0a:	b5b0      	push	{r4, r5, r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffd2 	bl	8001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d24:	4604      	mov	r4, r0
 8001d26:	6838      	ldr	r0, [r7, #0]
 8001d28:	f7ff ffd9 	bl	8001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	6a38      	ldr	r0, [r7, #32]
 8001d30:	f7ff ffe0 	bl	8001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001d34:	4603      	mov	r3, r0
 8001d36:	462a      	mov	r2, r5
 8001d38:	4621      	mov	r1, r4
 8001d3a:	68b8      	ldr	r0, [r7, #8]
 8001d3c:	f000 f9f9 	bl	8002132 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
	  { }
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}

08001d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f7ff ff2f 	bl	8001bce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	}
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d7a:	b590      	push	{r4, r7, lr}
 8001d7c:	b08d      	sub	sp, #52	@ 0x34
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f9f4 	bl	8002178 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE13_M_const_castEv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001d94:	69bc      	ldr	r4, [r7, #24]
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	f000 f97b 	bl	8002092 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d030      	beq.n	8001e0e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x94>
	  if (size() > 0
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f000 f9f4 	bl	800219a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>
 8001db2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x66>
 8001db8:	68bc      	ldr	r4, [r7, #8]
 8001dba:	68b8      	ldr	r0, [r7, #8]
 8001dbc:	f000 f9f9 	bl	80021b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fa00 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fe18 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x66>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x68>
 8001de0:	2300      	movs	r3, #0
	  if (size() > 0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f000 f9e1 	bl	80021b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f9f2 	bl	80021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001dfe:	e0db      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fa00 	bl	800220c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
 8001e0c:	e0d4      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001e0e:	68bc      	ldr	r4, [r7, #8]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f9d9 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff fdf1 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d057      	beq.n	8001eda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x160>
	  iterator __before = __pos;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001e2e:	69bc      	ldr	r4, [r7, #24]
 8001e30:	68b8      	ldr	r0, [r7, #8]
 8001e32:	f000 fa70 	bl	8002316 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>
 8001e36:	4603      	mov	r3, r0
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	429c      	cmp	r4, r3
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001e48:	68b8      	ldr	r0, [r7, #8]
 8001e4a:	f000 fa64 	bl	8002316 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>
 8001e4e:	4604      	mov	r4, r0
 8001e50:	68b8      	ldr	r0, [r7, #8]
 8001e52:	f000 fa60 	bl	8002316 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fa66 	bl	800232e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001e62:	e0a9      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001e64:	68bc      	ldr	r4, [r7, #8]
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fa78 	bl	8002360 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEmmEv>
 8001e70:	4603      	mov	r3, r0
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f9a8 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff fdc0 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01f      	beq.n	8001ecc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fe85 	bl	8001b9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x140>
		return _Res(0, __before._M_node);
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	f107 0214 	add.w	r2, r7, #20
 8001eac:	f107 0320 	add.w	r3, r7, #32
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f995 	bl	80021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001eb8:	e07e      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001eba:	f107 0218 	add.w	r2, r7, #24
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fa32 	bl	800232e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001eca:	e075      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f99a 	bl	800220c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
 8001ed8:	e06e      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001eda:	68bc      	ldr	r4, [r7, #8]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f973 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff fd8b 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d056      	beq.n	8001fa4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x22a>
	  iterator __after = __pos;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001efa:	69bc      	ldr	r4, [r7, #24]
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f000 f958 	bl	80021b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001f02:	4603      	mov	r3, r0
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	429c      	cmp	r4, r3
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00c      	beq.n	8001f2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f18:	68b8      	ldr	r0, [r7, #8]
 8001f1a:	f000 f94a 	bl	80021b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f95b 	bl	80021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001f2c:	e044      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001f2e:	68bc      	ldr	r4, [r7, #8]
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fcc9 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f943 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7ff fd5b 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01f      	beq.n	8001f96 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe20 	bl	8001b9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f72:	f107 0218 	add.w	r2, r7, #24
 8001f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f930 	bl	80021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001f82:	e019      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8001f84:	f107 0210 	add.w	r2, r7, #16
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f9cd 	bl	800232e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001f94:	e010      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f935 	bl	800220c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
 8001fa2:	e009      	b.n	8001fb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f915 	bl	80021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	3734      	adds	r7, #52	@ 0x34
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}

08001fc0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f9d8 	bl	8002382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSJ_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f000 f9d7 	bl	80023a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
	  return __it;
 8002004:	697b      	ldr	r3, [r7, #20]
	}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f9f4 	bl	8002422 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE7_M_addrEv>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9f2 	bl	8002438 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8002054:	4604      	mov	r4, r0
 8002056:	6838      	ldr	r0, [r7, #0]
 8002058:	f7ff fd88 	bl	8001b6c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE9_M_valptrEv>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	4620      	mov	r0, r4
 8002062:	f000 f9f4 	bl	800244e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE7destroyISB_EEvRSD_PT_>
      }
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}

0800206e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f9dd 	bl	8002438 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 800207e:	4603      	mov	r3, r0
 8002080:	2201      	movs	r2, #1
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f9ef 	bl	8002468 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE10deallocateERSD_PSC_j>
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80020b8:	e01a      	b.n	80020f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80020ba:	68fc      	ldr	r4, [r7, #12]
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f000 f960 	bl	8002382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80020c2:	4603      	mov	r3, r0
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7ff fc9c 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	f7ff fd69 	bl	8001bb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 80020e4:	60b8      	str	r0, [r7, #8]
 80020e6:	e003      	b.n	80020f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f7ff fd58 	bl	8001b9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 80020ee:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e1      	bne.n	80020ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff86 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
 8002102:	697b      	ldr	r3, [r7, #20]
    }
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}

0800210c <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002116:	687c      	ldr	r4, [r7, #4]
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f7ff fda7 	bl	8001c6c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	4620      	mov	r0, r4
 8002124:	f000 f9af 	bl	8002486 <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}

08002132 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8002132:	b5b0      	push	{r4, r5, r7, lr}
 8002134:	b088      	sub	sp, #32
 8002136:	af02      	add	r7, sp, #8
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f9b0 	bl	80024a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>
 8002146:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8002148:	68b8      	ldr	r0, [r7, #8]
 800214a:	f7ff fdbd 	bl	8001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800214e:	4604      	mov	r4, r0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fdc4 	bl	8001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002156:	4605      	mov	r5, r0
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f7ff fdcb 	bl	8001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800215e:	4603      	mov	r3, r0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	462b      	mov	r3, r5
 8002164:	4622      	mov	r2, r4
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f9ad 	bl	80024c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_>
	  return __tmp;
 800216e:	697b      	ldr	r3, [r7, #20]
	}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bdb0      	pop	{r4, r5, r7, pc}

08002178 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff3f 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3310      	adds	r3, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8d5 	bl	8002382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80021d8:	4603      	mov	r3, r0
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b08b      	sub	sp, #44	@ 0x2c
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8002218:	68b8      	ldr	r0, [r7, #8]
 800221a:	f7ff fbb8 	bl	800198e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 800221e:	4603      	mov	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8002222:	68b8      	ldr	r0, [r7, #8]
 8002224:	f7ff ff35 	bl	8002092 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8002228:	4603      	mov	r3, r0
 800222a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8002232:	e01f      	b.n	8002274 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x68>
	  __y = __x;
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8002238:	68bc      	ldr	r4, [r7, #8]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f8a0 	bl	8002382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff fbdc 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8002254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x5c>
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fca9 	bl	8001bb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002264:	4603      	mov	r3, r0
 8002266:	e004      	b.n	8002272 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x66>
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fc97 	bl	8001b9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002270:	4603      	mov	r3, r0
 8002272:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1dc      	bne.n	8002234 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x28>
      iterator __j = iterator(__y);
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fec3 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01d      	beq.n	80022cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8002290:	68b8      	ldr	r0, [r7, #8]
 8002292:	f7ff fc49 	bl	8001b28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8002296:	4603      	mov	r3, r0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	f107 021c 	add.w	r2, r7, #28
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fb8d 	bl	80019c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 80022b0:	f107 0214 	add.w	r2, r7, #20
 80022b4:	f107 0318 	add.w	r3, r7, #24
 80022b8:	4619      	mov	r1, r3
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f931 	bl	8002522 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEERS1_Lb1EEEOT_OT0_>
 80022c0:	e025      	b.n	800230e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f84a 	bl	8002360 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80022cc:	68bc      	ldr	r4, [r7, #8]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff7a 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80022d6:	4603      	mov	r3, r0
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4619      	mov	r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff fb92 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 80022e8:	f107 0214 	add.w	r2, r7, #20
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	4619      	mov	r1, r3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f915 	bl	8002522 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEERS1_Lb1EEEOT_OT0_>
 80022f8:	e009      	b.n	800230e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	f107 0220 	add.w	r2, r7, #32
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4619      	mov	r1, r3
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff ff6a 	bl	80021e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	372c      	adds	r7, #44	@ 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}

08002316 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	330c      	adds	r3, #12
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f000 f90a 	bl	8002554 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002340:	4603      	mov	r3, r0
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f903 	bl	8002554 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800234e:	4603      	mov	r3, r0
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f004 fc4d 	bl	8006c0c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	601a      	str	r2, [r3, #0]
	return *this;
 8002378:	687b      	ldr	r3, [r7, #4]
      }
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>:
      _S_key(_Const_Link_type __x)
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8ed 	bl	800256a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE9_M_valptrEv>
 8002390:	4602      	mov	r2, r0
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f8f4 	bl	8002586 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEclERKSA_>
 800239e:	4603      	mov	r3, r0
      }
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d117      	bne.n	80023ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff fe68 	bl	8002092 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d010      	beq.n	80023ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80023ca:	68fc      	ldr	r4, [r7, #12]
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f7ff ffd8 	bl	8002382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80023d2:	4605      	mov	r5, r0
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fef8 	bl	80021ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	4629      	mov	r1, r5
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff fb10 	bl	8001a06 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x48>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x4a>
 80023f0:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80023f2:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80023f8:	7df8      	ldrb	r0, [r7, #23]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	f004 fc07 	bl	8006c10 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fdfb 	bl	800200e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEC1EPSt18_Rb_tree_node_base>
 8002418:	693b      	ldr	r3, [r7, #16]
    }
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bdb0      	pop	{r4, r5, r7, pc}

08002422 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE7_M_addrEv>:
      _M_addr() noexcept
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE7destroyISB_EEvRSD_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002458:	6839      	ldr	r1, [r7, #0]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8ac 	bl	80025b8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE7destroyISB_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE10deallocateERSD_PSC_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f8a9 	bl	80025d0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE10deallocateEPSC_j>
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f7ff fbeb 	bl	8001c6c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>:
      _M_get_node()
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ffc2 	bl	8002438 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f89b 	bl	80025f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE8allocateERSD_j>
 80024be:	4603      	mov	r3, r0
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80024c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af02      	add	r7, sp, #8
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4619      	mov	r1, r3
 80024dc:	202c      	movs	r0, #44	@ 0x2c
 80024de:	f7fe ff7f 	bl	80013e0 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff ffa8 	bl	8002438 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80024e8:	4604      	mov	r4, r0
 80024ea:	68b8      	ldr	r0, [r7, #8]
 80024ec:	f7ff fb3e 	bl	8001b6c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE9_M_valptrEv>
 80024f0:	4605      	mov	r5, r0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fbe8 	bl	8001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80024f8:	4606      	mov	r6, r0
 80024fa:	6838      	ldr	r0, [r7, #0]
 80024fc:	f7ff fbef 	bl	8001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002500:	4680      	mov	r8, r0
 8002502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002504:	f7ff fbf6 	bl	8001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002508:	4603      	mov	r3, r0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4643      	mov	r3, r8
 800250e:	4632      	mov	r2, r6
 8002510:	4629      	mov	r1, r5
 8002512:	4620      	mov	r0, r4
 8002514:	f000 f87d 	bl	8002612 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESJ_IJEEEEEvRSD_PT_DpOT0_>
	}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002522 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800252e:	68b8      	ldr	r0, [r7, #8]
 8002530:	f000 f88d 	bl	800264e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002534:	4603      	mov	r3, r0
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f809 	bl	8002554 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002542:	4603      	mov	r3, r0
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE9_M_valptrEv>:
      _M_valptr() const
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3310      	adds	r3, #16
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f874 	bl	8002664 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE6_M_ptrEv>
 800257c:	4603      	mov	r3, r0
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEclERKSA_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleED1Ev>:
    struct pair
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f004 fc6e 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE7destroyISB_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80025c2:	6838      	ldr	r0, [r7, #0]
 80025c4:	f7ff ffeb 	bl	800259e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleED1Ev>
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	222c      	movs	r2, #44	@ 0x2c
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	4619      	mov	r1, r3
 80025e6:	68b8      	ldr	r0, [r7, #8]
 80025e8:	f004 faa4 	bl	8006b34 <_ZdlPvj>
      }
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE8allocateERSD_j>:
      allocate(allocator_type& __a, size_type __n)
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80025fe:	2200      	movs	r2, #0
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f83a 	bl	800267c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE8allocateEjPKv>
 8002608:	4603      	mov	r3, r0
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESJ_IJEEEEEvRSD_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002612:	b5b0      	push	{r4, r5, r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af02      	add	r7, sp, #8
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fb51 	bl	8001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002626:	4604      	mov	r4, r0
 8002628:	6838      	ldr	r0, [r7, #0]
 800262a:	f7ff fb58 	bl	8001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800262e:	4605      	mov	r5, r0
 8002630:	6a38      	ldr	r0, [r7, #32]
 8002632:	f7ff fb5f 	bl	8001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002636:	4603      	mov	r3, r0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	462b      	mov	r3, r5
 800263c:	4622      	mov	r2, r4
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f849 	bl	80026d8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESI_IJEEEEEvPT_DpOT0_>
	}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}

0800264e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f85b 	bl	8002728 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE7_M_addrEv>
 8002672:	4603      	mov	r3, r0
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f859 	bl	8002740 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE11_M_max_sizeEv>
 800268e:	4602      	mov	r2, r0
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4293      	cmp	r3, r2
 8002694:	bf8c      	ite	hi
 8002696:	2301      	movhi	r3, #1
 8002698:	2300      	movls	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE8allocateEjPKv+0x58>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80026b2:	f004 fb14 	bl	8006cde <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80026b6:	f004 fb0f 	bl	8006cd8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	222c      	movs	r2, #44	@ 0x2c
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 fa38 	bl	8006b38 <_Znwj>
 80026c8:	4603      	mov	r3, r0
      }
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	05d1745d 	.word	0x05d1745d

080026d8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESI_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4619      	mov	r1, r3
 80026ea:	201c      	movs	r0, #28
 80026ec:	f7fe fe78 	bl	80013e0 <_ZnwjPv>
 80026f0:	4604      	mov	r4, r0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fae8 	bl	8001cc8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f7ff faf0 	bl	8001cde <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80026fe:	4602      	mov	r2, r0
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f997 	bl	8001a3a <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
 800270c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800270e:	f7ff faf1 	bl	8001cf4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002712:	f107 0214 	add.w	r2, r7, #20
 8002716:	4633      	mov	r3, r6
 8002718:	4629      	mov	r1, r5
 800271a:	4620      	mov	r0, r4
 800271c:	f000 f81e 	bl	800275c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE>
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002728 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEE7_M_addrEv>:
      _M_addr() const noexcept
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	02e8ba2e 	.word	0x02e8ba2e

0800275c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 800275c:	b5b0      	push	{r4, r5, r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	7239      	strb	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800276a:	463a      	mov	r2, r7
 800276c:	f88d 4000 	strb.w	r4, [sp]
 8002770:	462b      	mov	r3, r5
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f805 	bl	8002784 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEC1IJOS5_EJLj0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE>
      { }
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bdb0      	pop	{r4, r5, r7, pc}

08002784 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEC1IJOS5_EJLj0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002792:	68fc      	ldr	r4, [r7, #12]
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f000 f811 	bl	80027bc <_ZSt3getILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
 800279a:	4603      	mov	r3, r0
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f81a 	bl	80027d6 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4620      	mov	r0, r4
 80027a8:	f004 fb50 	bl	8006e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
      { }
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}

080027bc <_ZSt3getILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f810 	bl	80027ec <_ZSt12__get_helperILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_ZSt12__get_helperILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f805 	bl	8002804 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f805 	bl	800281e <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
 8002814:	4603      	mov	r3, r0
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>:
      ~map() = default;
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ffa0 	bl	8001786 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P13DisplayModuleESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002866:	4293      	cmp	r3, r2
 8002868:	d102      	bne.n	8002870 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::map<std::string, DisplayModule*> displays_map;
 800286a:	4809      	ldr	r0, [pc, #36]	@ (8002890 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800286c:	f7fe fe02 	bl	8001474 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800287c:	4293      	cmp	r3, r2
 800287e:	d102      	bne.n	8002886 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002880:	4803      	ldr	r0, [pc, #12]	@ (8002890 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002882:	f7ff ffd8 	bl	8002836 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000080 	.word	0x20000080

08002894 <_GLOBAL__sub_I_ready_for_cmd>:
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
 8002898:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff ffd7 	bl	8002850 <_Z41__static_initialization_and_destruction_0ii>
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_GLOBAL__sub_D_ready_for_cmd>:
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff ffcf 	bl	8002850 <_Z41__static_initialization_and_destruction_0ii>
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_PeriodElapsedCallback>:
extern DisplayModule* module3;

extern std::map<std::string, DisplayModule*> displays_map;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0b      	ldr	r2, [pc, #44]	@ (80028f0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d104      	bne.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		module1->motor.dt++;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	3201      	adds	r2, #1
 80028ce:	611a      	str	r2, [r3, #16]
	}
	if (htim -> Instance == TIM2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d8:	d104      	bne.n	80028e4 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		module2->motor.dt++;
 80028da:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	3201      	adds	r2, #1
 80028e2:	611a      	str	r2, [r3, #16]
	}
	// YOUR DISPLAY MODULE CALLBACK SECTION:

}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40010000 	.word	0x40010000
 80028f4:	20000078 	.word	0x20000078
 80028f8:	2000007c 	.word	0x2000007c

080028fc <_ZN12StepperMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
#include "stepper_motor.hpp"

StepperMotor::StepperMotor(TIM_HandleTypeDef* htim,
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	807b      	strh	r3, [r7, #2]
: htim (htim),
  IN1_PORT(in1_port), IN1_PIN(in1_pin),
  IN2_PORT(in2_port), IN2_PIN(in2_pin),
  IN3_PORT(in3_port), IN3_PIN(in3_pin),
  IN4_PORT(in4_port), IN4_PIN(in4_pin),
  dt(0),
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
  position(0),
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
  position_deg(0),
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9c1 2302 	strd	r2, r3, [r1, #8]
  position_deg_int(0),
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  step(0)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	22e6      	movs	r2, #230	@ 0xe6
 8002934:	619a      	str	r2, [r3, #24]
: htim (htim),
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	61da      	str	r2, [r3, #28]
  IN1_PORT(in1_port), IN1_PIN(in1_pin),
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	621a      	str	r2, [r3, #32]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	849a      	strh	r2, [r3, #36]	@ 0x24
  IN2_PORT(in2_port), IN2_PIN(in2_pin),
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	629a      	str	r2, [r3, #40]	@ 0x28
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8bba      	ldrh	r2, [r7, #28]
 8002952:	859a      	strh	r2, [r3, #44]	@ 0x2c
  IN3_PORT(in3_port), IN3_PIN(in3_pin),
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a3a      	ldr	r2, [r7, #32]
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800295e:	869a      	strh	r2, [r3, #52]	@ 0x34
  IN4_PORT(in4_port), IN4_PIN(in4_pin),
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002964:	639a      	str	r2, [r3, #56]	@ 0x38
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800296a:	879a      	strh	r2, [r3, #60]	@ 0x3c
{
	// Reset ALL Pins before using motor:
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a18      	ldr	r0, [r3, #32]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002974:	2200      	movs	r2, #0
 8002976:	4619      	mov	r1, r3
 8002978:	f002 f88e 	bl	8004a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002984:	2200      	movs	r2, #0
 8002986:	4619      	mov	r1, r3
 8002988:	f002 f886 	bl	8004a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002994:	2200      	movs	r2, #0
 8002996:	4619      	mov	r1, r3
 8002998:	f002 f87e 	bl	8004a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80029a4:	2200      	movs	r2, #0
 80029a6:	4619      	mov	r1, r3
 80029a8:	f002 f876 	bl	8004a98 <HAL_GPIO_WritePin>
}
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_ZN12StepperMotor14setPositionDegEm9Direction>:
	}

}

bool StepperMotor::setPositionDeg(uint32_t target_position_deg, Direction direction)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
	int target_position = static_cast<int>(target_position_deg);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	617b      	str	r3, [r7, #20]

	// Check that motor is on target_position (deg unit):
	if (position_deg_int == target_position)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d104      	bne.n	80029dc <_ZN12StepperMotor14setPositionDegEm9Direction+0x26>
	{
		motorStop();
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f820 	bl	8002a18 <_ZN12StepperMotor9motorStopEv>
		return true;
 80029d8:	2301      	movs	r3, #1
 80029da:	e005      	b.n	80029e8 <_ZN12StepperMotor14setPositionDegEm9Direction+0x32>
	}
	else
	{
		motorGo(direction);
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	4619      	mov	r1, r3
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f805 	bl	80029f0 <_ZN12StepperMotor7motorGoE9Direction>
		return false;
 80029e6:	2300      	movs	r3, #0
	}
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZN12StepperMotor7motorGoE9Direction>:

void StepperMotor::motorGo(Direction direction)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
	// Start motor timer and set correct motor pin:
	HAL_TIM_Base_Start_IT(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fd0b 	bl	800541c <HAL_TIM_Base_Start_IT>
	setCorrectStep(direction);
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f812 	bl	8002a34 <_ZN12StepperMotor14setCorrectStepE9Direction>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN12StepperMotor9motorStopEv>:

void StepperMotor::motorStop(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	// Stop motor timer:
	HAL_TIM_Base_Stop_IT(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fd5b 	bl	80054e0 <HAL_TIM_Base_Stop_IT>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <_ZN12StepperMotor14setCorrectStepE9Direction>:

uint8_t StepperMotor::setCorrectStep(Direction direction)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
	// Pin from 0-4 selector:
	int selector = selectPin(direction);
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f89b 	bl	8002b80 <_ZN12StepperMotor9selectPinE9Direction>
 8002a4a:	60f8      	str	r0, [r7, #12]

	// Set correct pin:
	switch (selector)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	f200 8090 	bhi.w	8002b74 <_ZN12StepperMotor14setCorrectStepE9Direction+0x140>
 8002a54:	a201      	add	r2, pc, #4	@ (adr r2, 8002a5c <_ZN12StepperMotor14setCorrectStepE9Direction+0x28>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002aaf 	.word	0x08002aaf
 8002a64:	08002af1 	.word	0x08002af1
 8002a68:	08002b33 	.word	0x08002b33
	{
	case 0:
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a18      	ldr	r0, [r3, #32]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002a74:	2201      	movs	r2, #1
 8002a76:	4619      	mov	r1, r3
 8002a78:	f002 f80e 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	f002 f806 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002a94:	2200      	movs	r2, #0
 8002a96:	4619      	mov	r1, r3
 8002a98:	f001 fffe 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f001 fff6 	bl	8004a98 <HAL_GPIO_WritePin>

		break;
 8002aac:	e062      	b.n	8002b74 <_ZN12StepperMotor14setCorrectStepE9Direction+0x140>
	case 1:
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a18      	ldr	r0, [r3, #32]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f001 ffed 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f001 ffe5 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f001 ffdd 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f001 ffd5 	bl	8004a98 <HAL_GPIO_WritePin>

		break;
 8002aee:	e041      	b.n	8002b74 <_ZN12StepperMotor14setCorrectStepE9Direction+0x140>
	case 2:
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a18      	ldr	r0, [r3, #32]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002af8:	2200      	movs	r2, #0
 8002afa:	4619      	mov	r1, r3
 8002afc:	f001 ffcc 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f001 ffc4 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f001 ffbc 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f001 ffb4 	bl	8004a98 <HAL_GPIO_WritePin>

		break;
 8002b30:	e020      	b.n	8002b74 <_ZN12StepperMotor14setCorrectStepE9Direction+0x140>
	case 3:
		HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a18      	ldr	r0, [r3, #32]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f001 ffab 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f001 ffa3 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f001 ff9b 	bl	8004a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f001 ff93 	bl	8004a98 <HAL_GPIO_WritePin>

		break;
 8002b72:	bf00      	nop
	};

	return selector;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	b2db      	uxtb	r3, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN12StepperMotor9selectPinE9Direction>:

int StepperMotor::selectPin(Direction direction)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
	// Increment or decrement steps:
	if(dt >= dt_limiter)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	db38      	blt.n	8002c0a <_ZN12StepperMotor9selectPinE9Direction+0x8a>
	{
		// Set dt flag to 0;
		dt = 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

		// Direction check condition:
		if (direction == Direction_ClockWise)
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d119      	bne.n	8002bd8 <_ZN12StepperMotor9selectPinE9Direction+0x58>
		{
			position++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	605a      	str	r2, [r3, #4]
			step++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	615a      	str	r2, [r3, #20]
			if (step >= 4) step = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	dd02      	ble.n	8002bc6 <_ZN12StepperMotor9selectPinE9Direction+0x46>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	615a      	str	r2, [r3, #20]
			if(position >= 2048) position = 0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bce:	db1c      	blt.n	8002c0a <_ZN12StepperMotor9selectPinE9Direction+0x8a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e018      	b.n	8002c0a <_ZN12StepperMotor9selectPinE9Direction+0x8a>
		}
		else
		{
			position--;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	605a      	str	r2, [r3, #4]
			step--;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	1e5a      	subs	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	615a      	str	r2, [r3, #20]
			if(step < 0) step = 3;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da02      	bge.n	8002bfa <_ZN12StepperMotor9selectPinE9Direction+0x7a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	615a      	str	r2, [r3, #20]
			if(position < 0) position = 2047;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da03      	bge.n	8002c0a <_ZN12StepperMotor9selectPinE9Direction+0x8a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002c08:	605a      	str	r2, [r3, #4]
		}
	}

	// Calculate position_deg:
	calculatePositionDeg();
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f806 	bl	8002c1c <_ZN12StepperMotor20calculatePositionDegEv>

	return step;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_ZN12StepperMotor20calculatePositionDegEv>:

void StepperMotor::calculatePositionDeg(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	position_deg = (static_cast<double>(position)) / STEPS_PER_REVOLUTION * DEG_PER_REVOLUTION;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc83 	bl	8000534 <__aeabi_i2d>
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <_ZN12StepperMotor20calculatePositionDegEv+0x54>)
 8002c34:	f7fd fe12 	bl	800085c <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <_ZN12StepperMotor20calculatePositionDegEv+0x58>)
 8002c46:	f7fd fcdf 	bl	8000608 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	e9c1 2302 	strd	r2, r3, [r1, #8]
	position_deg_int = static_cast<int>(position_deg);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7fd ff6d 	bl	8000b3c <__aeabi_d2iz>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	611a      	str	r2, [r3, #16]
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40a00000 	.word	0x40a00000
 8002c74:	40768000 	.word	0x40768000

08002c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_MspInit+0x4c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc4 <HAL_MspInit+0x4c>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <HAL_MspInit+0x4c>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <HAL_MspInit+0x4c>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	4a08      	ldr	r2, [pc, #32]	@ (8002cc4 <HAL_MspInit+0x4c>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_MspInit+0x4c>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <NMI_Handler+0x4>

08002cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <HardFault_Handler+0x4>

08002cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <MemManage_Handler+0x4>

08002ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <BusFault_Handler+0x4>

08002ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <UsageFault_Handler+0x4>

08002cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1e:	f001 fb5b 	bl	80043d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d2e:	f002 fc06 	bl	800553e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000009c 	.word	0x2000009c

08002d3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d40:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <TIM2_IRQHandler+0x10>)
 8002d42:	f002 fbfc 	bl	800553e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200000e4 	.word	0x200000e4

08002d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d54:	4802      	ldr	r0, [pc, #8]	@ (8002d60 <USART1_IRQHandler+0x10>)
 8002d56:	f002 ffef 	bl	8005d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000018c 	.word	0x2000018c

08002d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return 1;
 8002d68:	2301      	movs	r3, #1
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_kill>:

int _kill(int pid, int sig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d7e:	f004 fccb 	bl	8007718 <__errno>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2216      	movs	r2, #22
 8002d86:	601a      	str	r2, [r3, #0]
  return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_exit>:

void _exit (int status)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ffe7 	bl	8002d74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <_exit+0x12>
	...

08002dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <_sbrk+0x5c>)
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <_sbrk+0x60>)
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc0:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <_sbrk+0x64>)
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <_sbrk+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d207      	bcs.n	8002dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ddc:	f004 fc9c 	bl	8007718 <__errno>
 8002de0:	4603      	mov	r3, r0
 8002de2:	220c      	movs	r2, #12
 8002de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dea:	e009      	b.n	8002e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a05      	ldr	r2, [pc, #20]	@ (8002e10 <_sbrk+0x64>)
 8002dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20010000 	.word	0x20010000
 8002e0c:	00000400 	.word	0x00000400
 8002e10:	20000098 	.word	0x20000098
 8002e14:	20000328 	.word	0x20000328

08002e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <SystemInit+0x20>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <SystemInit+0x20>)
 8002e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e42:	f107 0308 	add.w	r3, r7, #8
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e50:	463b      	mov	r3, r7
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed8 <MX_TIM1_Init+0x9c>)
 8002e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e60:	2253      	movs	r2, #83	@ 0x53
 8002e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e6c:	2209      	movs	r2, #9
 8002e6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e70:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e82:	4814      	ldr	r0, [pc, #80]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002e84:	f002 fa7a 	bl	800537c <HAL_TIM_Base_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8002e8e:	f7fe fc53 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	480d      	ldr	r0, [pc, #52]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002ea0:	f002 fc3d 	bl	800571e <HAL_TIM_ConfigClockSource>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8002eaa:	f7fe fc45 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4806      	ldr	r0, [pc, #24]	@ (8002ed4 <MX_TIM1_Init+0x98>)
 8002ebc:	f002 fe44 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002ec6:	f7fe fc37 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000009c 	.word	0x2000009c
 8002ed8:	40010000 	.word	0x40010000

08002edc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002efa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f02:	2253      	movs	r2, #83	@ 0x53
 8002f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f0e:	2209      	movs	r2, #9
 8002f10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f12:	4b17      	ldr	r3, [pc, #92]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f18:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f1e:	4814      	ldr	r0, [pc, #80]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f20:	f002 fa2c 	bl	800537c <HAL_TIM_Base_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002f2a:	f7fe fc05 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480d      	ldr	r0, [pc, #52]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f3c:	f002 fbef 	bl	800571e <HAL_TIM_ConfigClockSource>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002f46:	f7fe fbf7 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f52:	463b      	mov	r3, r7
 8002f54:	4619      	mov	r1, r3
 8002f56:	4806      	ldr	r0, [pc, #24]	@ (8002f70 <MX_TIM2_Init+0x94>)
 8002f58:	f002 fdf6 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002f62:	f7fe fbe9 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200000e4 	.word	0x200000e4

08002f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x80>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d116      	bne.n	8002fb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x84>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x84>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f96:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x84>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2019      	movs	r0, #25
 8002fa8:	f001 fb11 	bl	80045ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fac:	2019      	movs	r0, #25
 8002fae:	f001 fb2a 	bl	8004606 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002fb2:	e01a      	b.n	8002fea <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fbc:	d115      	bne.n	8002fea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x84>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x84>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x84>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	201c      	movs	r0, #28
 8002fe0:	f001 faf5 	bl	80045ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fe4:	201c      	movs	r0, #28
 8002fe6:	f001 fb0e 	bl	8004606 <HAL_NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40023800 	.word	0x40023800

08002ffc <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 800300e:	2300      	movs	r3, #0
 8003010:	e006      	b.n	8003020 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f004 faf8 	bl	800760c <memcmp>
 800301c:	4603      	mov	r3, r0
 800301e:	bf00      	nop
      }
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f004 f84a 	bl	80070ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4904      	ldr	r1, [pc, #16]	@ (8003054 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8003044:	4804      	ldr	r0, [pc, #16]	@ (8003058 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8003046:	f000 fe23 	bl	8003c90 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800304a:	4603      	mov	r3, r0
					__idx, __base); }
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08007840 	.word	0x08007840
 8003058:	080075f9 	.word	0x080075f9

0800305c <_ZN11DataPackageC1Ev>:
#include <string>
#include <algorithm>
#include <cstdlib>

// Raw data information structure:
struct DataPackage
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fee9 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3318      	adds	r3, #24
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fee4 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3330      	adds	r3, #48	@ 0x30
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fedf 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <_Z15uart_CmdHandlerv>:
DataPackage data_pack;
extern std::map<std::string, DisplayModule*> displays_map;

// UART data handling function:
void uart_CmdHandler()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0de      	sub	sp, #376	@ 0x178
 8003090:	af00      	add	r7, sp, #0
	std::string command = data_pack.command_info;
 8003092:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003096:	49bb      	ldr	r1, [pc, #748]	@ (8003384 <_Z15uart_CmdHandlerv+0x2f8>)
 8003098:	4618      	mov	r0, r3
 800309a:	f004 f86d 	bl	8007178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	std::string display_data = data_pack.display_info;
 800309e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80030a2:	49b9      	ldr	r1, [pc, #740]	@ (8003388 <_Z15uart_CmdHandlerv+0x2fc>)
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 f867 	bl	8007178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

	// All displays handling commands:
	if (display_data[1] == 'A' || display_data[1] == 'a')
 80030aa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 ff67 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80030b6:	4603      	mov	r3, r0
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b41      	cmp	r3, #65	@ 0x41
 80030bc:	d009      	beq.n	80030d2 <_Z15uart_CmdHandlerv+0x46>
 80030be:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 ff5d 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80030ca:	4603      	mov	r3, r0
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b61      	cmp	r3, #97	@ 0x61
 80030d0:	d101      	bne.n	80030d6 <_Z15uart_CmdHandlerv+0x4a>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <_Z15uart_CmdHandlerv+0x4c>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 81b4 	beq.w	8003446 <_Z15uart_CmdHandlerv+0x3ba>
	{
		// State Reset:
		if (command == "RESET" || command == "reset")
 80030de:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80030e2:	49aa      	ldr	r1, [pc, #680]	@ (800338c <_Z15uart_CmdHandlerv+0x300>)
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fe18 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <_Z15uart_CmdHandlerv+0x76>
 80030f0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80030f4:	49a6      	ldr	r1, [pc, #664]	@ (8003390 <_Z15uart_CmdHandlerv+0x304>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fe0f 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <_Z15uart_CmdHandlerv+0x7a>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <_Z15uart_CmdHandlerv+0x7c>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d037      	beq.n	800317c <_Z15uart_CmdHandlerv+0xf0>
		{
			for (auto& display : displays_map)
 800310c:	4ba1      	ldr	r3, [pc, #644]	@ (8003394 <_Z15uart_CmdHandlerv+0x308>)
 800310e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003112:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8003116:	f7fe fbab 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 800311a:	4603      	mov	r3, r0
 800311c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003120:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8003124:	f7fe fbb1 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003128:	4603      	mov	r3, r0
 800312a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800312e:	e016      	b.n	800315e <_Z15uart_CmdHandlerv+0xd2>
 8003130:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fbda 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 800313a:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
			{
				if (display.second->state == State_IDLE) display.second->state = State_Reset;
 800313e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d104      	bne.n	8003154 <_Z15uart_CmdHandlerv+0xc8>
 800314a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2200      	movs	r2, #0
 8003152:	711a      	strb	r2, [r3, #4]
			for (auto& display : displays_map)
 8003154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fbb7 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 800315e:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8003162:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fb9b 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1dd      	bne.n	8003130 <_Z15uart_CmdHandlerv+0xa4>
			}
			data_pack.command_info = "";
 8003174:	4988      	ldr	r1, [pc, #544]	@ (8003398 <_Z15uart_CmdHandlerv+0x30c>)
 8003176:	4883      	ldr	r0, [pc, #524]	@ (8003384 <_Z15uart_CmdHandlerv+0x2f8>)
 8003178:	f003 ffa5 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
		// State Move:
		if (command == "MOVE" || command == "move")
 800317c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003180:	4986      	ldr	r1, [pc, #536]	@ (800339c <_Z15uart_CmdHandlerv+0x310>)
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fdc9 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <_Z15uart_CmdHandlerv+0x114>
 800318e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003192:	4983      	ldr	r1, [pc, #524]	@ (80033a0 <_Z15uart_CmdHandlerv+0x314>)
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fdc0 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <_Z15uart_CmdHandlerv+0x118>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <_Z15uart_CmdHandlerv+0x11a>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80bb 	beq.w	8003322 <_Z15uart_CmdHandlerv+0x296>
		{
			std::string first_parameter;
 80031ac:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fe44 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			std::string second_parameter;
 80031b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fe3f 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

			size_t comma_position = data_pack.parameter_info.find(',');
 80031c0:	2200      	movs	r2, #0
 80031c2:	212c      	movs	r1, #44	@ 0x2c
 80031c4:	4877      	ldr	r0, [pc, #476]	@ (80033a4 <_Z15uart_CmdHandlerv+0x318>)
 80031c6:	f003 ff86 	bl	80070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80031ca:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140

			first_parameter = data_pack.parameter_info.substr(comma_position - 1, 1);
 80031ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80031d8:	2301      	movs	r3, #1
 80031da:	4972      	ldr	r1, [pc, #456]	@ (80033a4 <_Z15uart_CmdHandlerv+0x318>)
 80031dc:	f004 f818 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80031e0:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80031e4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fe53 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80031f0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fe48 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			second_parameter = data_pack.parameter_info.substr(comma_position + 1);
 80031fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	4966      	ldr	r1, [pc, #408]	@ (80033a4 <_Z15uart_CmdHandlerv+0x318>)
 800320a:	f004 f801 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800320e:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8003212:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fe3c 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800321e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fe31 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			for (auto& display : displays_map)
 8003228:	4b5a      	ldr	r3, [pc, #360]	@ (8003394 <_Z15uart_CmdHandlerv+0x308>)
 800322a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800322e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003232:	f7fe fb1d 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003236:	4602      	mov	r2, r0
 8003238:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800323c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003246:	f7fe fb20 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 800324a:	4602      	mov	r2, r0
 800324c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003250:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e04b      	b.n	80032f0 <_Z15uart_CmdHandlerv+0x264>
 8003258:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fb46 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 8003262:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
			{
				if (display.second->state == State_IDLE)
 8003266:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	791b      	ldrb	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d139      	bne.n	80032e6 <_Z15uart_CmdHandlerv+0x25a>
				{
					display.second->segment = static_cast<uint8_t>(std::stoi(first_parameter));
 8003272:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003276:	220a      	movs	r2, #10
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fed4 	bl	8003028 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8003280:	4602      	mov	r2, r0
 8003282:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	719a      	strb	r2, [r3, #6]

					if (second_parameter[0] == '+') display.second->direction = Direction_ClockWise;
 800328c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fe76 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003298:	4603      	mov	r3, r0
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b2b      	cmp	r3, #43	@ 0x2b
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <_Z15uart_CmdHandlerv+0x228>
 80032aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2200      	movs	r2, #0
 80032b2:	715a      	strb	r2, [r3, #5]
					if (second_parameter[0] == '-') display.second->direction = Direction_CounterClockWise;
 80032b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fe62 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80032c0:	4603      	mov	r3, r0
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <_Z15uart_CmdHandlerv+0x250>
 80032d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2201      	movs	r2, #1
 80032da:	715a      	strb	r2, [r3, #5]

					display.second->state = State_Move;
 80032dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2203      	movs	r2, #3
 80032e4:	711a      	strb	r2, [r3, #4]
			for (auto& display : displays_map)
 80032e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe faee 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 80032f0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80032f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fad2 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1a8      	bne.n	8003258 <_Z15uart_CmdHandlerv+0x1cc>
				}
			}
			data_pack.command_info = "";
 8003306:	4924      	ldr	r1, [pc, #144]	@ (8003398 <_Z15uart_CmdHandlerv+0x30c>)
 8003308:	481e      	ldr	r0, [pc, #120]	@ (8003384 <_Z15uart_CmdHandlerv+0x2f8>)
 800330a:	f003 fedc 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
 800330e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fdb9 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003318:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800331c:	4618      	mov	r0, r3
 800331e:	f003 fdb4 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		// State Jump:
		if (command == "JUMP" || command == "jump")
 8003322:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003326:	4920      	ldr	r1, [pc, #128]	@ (80033a8 <_Z15uart_CmdHandlerv+0x31c>)
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fcf6 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d108      	bne.n	8003346 <_Z15uart_CmdHandlerv+0x2ba>
 8003334:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003338:	491c      	ldr	r1, [pc, #112]	@ (80033ac <_Z15uart_CmdHandlerv+0x320>)
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fced 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <_Z15uart_CmdHandlerv+0x2be>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <_Z15uart_CmdHandlerv+0x2c0>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 82e2 	beq.w	8003916 <_Z15uart_CmdHandlerv+0x88a>
		{
			for (auto& display : displays_map)
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <_Z15uart_CmdHandlerv+0x308>)
 8003354:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003358:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800335c:	f7fe fa88 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003360:	4602      	mov	r2, r0
 8003362:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003366:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8003370:	f7fe fa8b 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003374:	4602      	mov	r2, r0
 8003376:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800337a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e051      	b.n	8003426 <_Z15uart_CmdHandlerv+0x39a>
 8003382:	bf00      	nop
 8003384:	2000015c 	.word	0x2000015c
 8003388:	20000144 	.word	0x20000144
 800338c:	08007848 	.word	0x08007848
 8003390:	08007850 	.word	0x08007850
 8003394:	20000080 	.word	0x20000080
 8003398:	08007858 	.word	0x08007858
 800339c:	0800785c 	.word	0x0800785c
 80033a0:	08007864 	.word	0x08007864
 80033a4:	20000174 	.word	0x20000174
 80033a8:	0800786c 	.word	0x0800786c
 80033ac:	08007874 	.word	0x08007874
 80033b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fa9a 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 80033ba:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
			{
				if (display.second->state == State_IDLE)
 80033be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	791b      	ldrb	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d128      	bne.n	800341c <_Z15uart_CmdHandlerv+0x390>
				{
					if (data_pack.parameter_info[0] == '+') display.second->direction = Direction_ClockWise;
 80033ca:	2100      	movs	r1, #0
 80033cc:	4894      	ldr	r0, [pc, #592]	@ (8003620 <_Z15uart_CmdHandlerv+0x594>)
 80033ce:	f003 fdd9 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80033d2:	4603      	mov	r3, r0
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <_Z15uart_CmdHandlerv+0x362>
 80033e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2200      	movs	r2, #0
 80033ec:	715a      	strb	r2, [r3, #5]
					if (data_pack.parameter_info[0] == '-') display.second->direction = Direction_CounterClockWise;
 80033ee:	2100      	movs	r1, #0
 80033f0:	488b      	ldr	r0, [pc, #556]	@ (8003620 <_Z15uart_CmdHandlerv+0x594>)
 80033f2:	f003 fdc7 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80033f6:	4603      	mov	r3, r0
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <_Z15uart_CmdHandlerv+0x386>
 8003408:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2201      	movs	r2, #1
 8003410:	715a      	strb	r2, [r3, #5]
					display.second->state = State_Jump;
 8003412:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2202      	movs	r2, #2
 800341a:	711a      	strb	r2, [r3, #4]
			for (auto& display : displays_map)
 800341c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fa53 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 8003426:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800342a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fa37 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1b9      	bne.n	80033b0 <_Z15uart_CmdHandlerv+0x324>
				}
			}
			data_pack.command_info = "";
 800343c:	4979      	ldr	r1, [pc, #484]	@ (8003624 <_Z15uart_CmdHandlerv+0x598>)
 800343e:	487a      	ldr	r0, [pc, #488]	@ (8003628 <_Z15uart_CmdHandlerv+0x59c>)
 8003440:	f003 fe41 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 8003444:	e267      	b.n	8003916 <_Z15uart_CmdHandlerv+0x88a>
		}
	}
	else // For single display handling command:
	{
		// State Reset:
		if (command == "RESET" || command == "reset")
 8003446:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800344a:	4978      	ldr	r1, [pc, #480]	@ (800362c <_Z15uart_CmdHandlerv+0x5a0>)
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fc64 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d108      	bne.n	800346a <_Z15uart_CmdHandlerv+0x3de>
 8003458:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800345c:	4974      	ldr	r1, [pc, #464]	@ (8003630 <_Z15uart_CmdHandlerv+0x5a4>)
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fc5b 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <_Z15uart_CmdHandlerv+0x3e2>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <_Z15uart_CmdHandlerv+0x3e4>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d04d      	beq.n	8003510 <_Z15uart_CmdHandlerv+0x484>
		{
			for(auto& display : displays_map)
 8003474:	4b6f      	ldr	r3, [pc, #444]	@ (8003634 <_Z15uart_CmdHandlerv+0x5a8>)
 8003476:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800347a:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 800347e:	f7fe f9f7 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003482:	4602      	mov	r2, r0
 8003484:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003488:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8003492:	f7fe f9fa 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003496:	4602      	mov	r2, r0
 8003498:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800349c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e026      	b.n	80034f2 <_Z15uart_CmdHandlerv+0x466>
 80034a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fa20 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 80034ae:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
			{
				if (display.first == display_data && display.second->state == State_IDLE)
 80034b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80034b6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fc3f 	bl	8003d40 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <_Z15uart_CmdHandlerv+0x44c>
 80034c8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	791b      	ldrb	r3, [r3, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <_Z15uart_CmdHandlerv+0x44c>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <_Z15uart_CmdHandlerv+0x44e>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <_Z15uart_CmdHandlerv+0x45c>
				{
					display.second->state = State_Reset;
 80034de:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2200      	movs	r2, #0
 80034e6:	711a      	strb	r2, [r3, #4]
			for(auto& display : displays_map)
 80034e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe f9ed 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 80034f2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80034f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe f9d1 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1cd      	bne.n	80034a4 <_Z15uart_CmdHandlerv+0x418>
				}
			}
			data_pack.command_info = "";
 8003508:	4946      	ldr	r1, [pc, #280]	@ (8003624 <_Z15uart_CmdHandlerv+0x598>)
 800350a:	4847      	ldr	r0, [pc, #284]	@ (8003628 <_Z15uart_CmdHandlerv+0x59c>)
 800350c:	f003 fddb 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
		// State Move:
		if (command == "MOVE" || command == "move")
 8003510:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003514:	4948      	ldr	r1, [pc, #288]	@ (8003638 <_Z15uart_CmdHandlerv+0x5ac>)
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fbff 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <_Z15uart_CmdHandlerv+0x4a8>
 8003522:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003526:	4945      	ldr	r1, [pc, #276]	@ (800363c <_Z15uart_CmdHandlerv+0x5b0>)
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fbf6 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <_Z15uart_CmdHandlerv+0x4ac>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <_Z15uart_CmdHandlerv+0x4ae>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80db 	beq.w	80036f6 <_Z15uart_CmdHandlerv+0x66a>
		{
			std::string first_parameter;
 8003540:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003544:	4618      	mov	r0, r3
 8003546:	f003 fc7a 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			std::string second_parameter;
 800354a:	f107 0320 	add.w	r3, r7, #32
 800354e:	4618      	mov	r0, r3
 8003550:	f003 fc75 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

			size_t comma_position = data_pack.parameter_info.find(',');
 8003554:	2200      	movs	r2, #0
 8003556:	212c      	movs	r1, #44	@ 0x2c
 8003558:	4831      	ldr	r0, [pc, #196]	@ (8003620 <_Z15uart_CmdHandlerv+0x594>)
 800355a:	f003 fdbc 	bl	80070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800355e:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c

			first_parameter = data_pack.parameter_info.substr(comma_position - 1, 1);
 8003562:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 800356c:	2301      	movs	r3, #1
 800356e:	492c      	ldr	r1, [pc, #176]	@ (8003620 <_Z15uart_CmdHandlerv+0x594>)
 8003570:	f003 fe4e 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003574:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8003578:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fc89 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003584:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003588:	4618      	mov	r0, r3
 800358a:	f003 fc7e 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			second_parameter = data_pack.parameter_info.substr(comma_position + 1);
 800358e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	4920      	ldr	r1, [pc, #128]	@ (8003620 <_Z15uart_CmdHandlerv+0x594>)
 800359e:	f003 fe37 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80035a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80035a6:	f107 0320 	add.w	r3, r7, #32
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fc72 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80035b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 fc67 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			for (auto& display : displays_map)
 80035bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <_Z15uart_CmdHandlerv+0x5a8>)
 80035be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80035c2:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 80035c6:	f7fe f953 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80035d0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 80035da:	f7fe f956 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 80035de:	4602      	mov	r2, r0
 80035e0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80035e4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e06b      	b.n	80036c4 <_Z15uart_CmdHandlerv+0x638>
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe f97c 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 80035f6:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164
			{
				if (display.first == display_data && display.second->state == State_IDLE)
 80035fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80035fe:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fb9b 	bl	8003d40 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <_Z15uart_CmdHandlerv+0x5b4>
 8003610:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	791b      	ldrb	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d111      	bne.n	8003640 <_Z15uart_CmdHandlerv+0x5b4>
 800361c:	2301      	movs	r3, #1
 800361e:	e010      	b.n	8003642 <_Z15uart_CmdHandlerv+0x5b6>
 8003620:	20000174 	.word	0x20000174
 8003624:	08007858 	.word	0x08007858
 8003628:	2000015c 	.word	0x2000015c
 800362c:	08007848 	.word	0x08007848
 8003630:	08007850 	.word	0x08007850
 8003634:	20000080 	.word	0x20000080
 8003638:	0800785c 	.word	0x0800785c
 800363c:	08007864 	.word	0x08007864
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d039      	beq.n	80036ba <_Z15uart_CmdHandlerv+0x62e>
				{
					display.second->segment = static_cast<uint8_t>(std::stoi(first_parameter));
 8003646:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800364a:	220a      	movs	r2, #10
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fcea 	bl	8003028 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8003654:	4602      	mov	r2, r0
 8003656:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	719a      	strb	r2, [r3, #6]
					if (second_parameter[0] == '+') display.second->direction = Direction_ClockWise;
 8003660:	f107 0320 	add.w	r3, r7, #32
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fc8c 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800366c:	4603      	mov	r3, r0
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b2b      	cmp	r3, #43	@ 0x2b
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <_Z15uart_CmdHandlerv+0x5fc>
 800367e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2200      	movs	r2, #0
 8003686:	715a      	strb	r2, [r3, #5]
					if (second_parameter[0] == '-') display.second->direction = Direction_CounterClockWise;
 8003688:	f107 0320 	add.w	r3, r7, #32
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fc78 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003694:	4603      	mov	r3, r0
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b2d      	cmp	r3, #45	@ 0x2d
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <_Z15uart_CmdHandlerv+0x624>
 80036a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2201      	movs	r2, #1
 80036ae:	715a      	strb	r2, [r3, #5]
					display.second->state = State_Move;
 80036b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2203      	movs	r2, #3
 80036b8:	711a      	strb	r2, [r3, #4]
			for (auto& display : displays_map)
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe f904 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 80036c4:	f107 0218 	add.w	r2, r7, #24
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe f8e8 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d188      	bne.n	80035ec <_Z15uart_CmdHandlerv+0x560>
				}
			}
			data_pack.command_info = "";
 80036da:	4996      	ldr	r1, [pc, #600]	@ (8003934 <_Z15uart_CmdHandlerv+0x8a8>)
 80036dc:	4896      	ldr	r0, [pc, #600]	@ (8003938 <_Z15uart_CmdHandlerv+0x8ac>)
 80036de:	f003 fcf2 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
 80036e2:	f107 0320 	add.w	r3, r7, #32
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fbcf 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 fbca 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		// State Jump:
		if (command == "JUMP" || command == "jump")
 80036f6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80036fa:	4990      	ldr	r1, [pc, #576]	@ (800393c <_Z15uart_CmdHandlerv+0x8b0>)
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fb0c 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <_Z15uart_CmdHandlerv+0x68e>
 8003708:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800370c:	498c      	ldr	r1, [pc, #560]	@ (8003940 <_Z15uart_CmdHandlerv+0x8b4>)
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb03 	bl	8003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <_Z15uart_CmdHandlerv+0x692>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <_Z15uart_CmdHandlerv+0x694>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80f8 	beq.w	8003916 <_Z15uart_CmdHandlerv+0x88a>
		{
			if (data_pack.parameter_info[0] == '+')
 8003726:	2100      	movs	r1, #0
 8003728:	4886      	ldr	r0, [pc, #536]	@ (8003944 <_Z15uart_CmdHandlerv+0x8b8>)
 800372a:	f003 fc2b 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800372e:	4603      	mov	r3, r0
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b2b      	cmp	r3, #43	@ 0x2b
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d049      	beq.n	80037d4 <_Z15uart_CmdHandlerv+0x748>
			{
				for (auto& display : displays_map)
 8003740:	4b81      	ldr	r3, [pc, #516]	@ (8003948 <_Z15uart_CmdHandlerv+0x8bc>)
 8003742:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003746:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 800374a:	f7fe f891 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 800374e:	4602      	mov	r2, r0
 8003750:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003754:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 800375e:	f7fe f894 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003762:	4602      	mov	r2, r0
 8003764:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003768:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e026      	b.n	80037be <_Z15uart_CmdHandlerv+0x732>
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe f8ba 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 800377a:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
				{
					if (display.first == display_data && display.second->state == State_IDLE)
 800377e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003782:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fad9 	bl	8003d40 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <_Z15uart_CmdHandlerv+0x718>
 8003794:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	791b      	ldrb	r3, [r3, #4]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <_Z15uart_CmdHandlerv+0x718>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <_Z15uart_CmdHandlerv+0x71a>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <_Z15uart_CmdHandlerv+0x728>
					{
						display.second->direction = Direction_ClockWise;
 80037aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2200      	movs	r2, #0
 80037b2:	715a      	strb	r2, [r3, #5]
				for (auto& display : displays_map)
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe f887 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 80037be:	f107 0210 	add.w	r2, r7, #16
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe f86b 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1cd      	bne.n	8003770 <_Z15uart_CmdHandlerv+0x6e4>
					}
				}
			}
			if (data_pack.parameter_info[0] == '-')
 80037d4:	2100      	movs	r1, #0
 80037d6:	485b      	ldr	r0, [pc, #364]	@ (8003944 <_Z15uart_CmdHandlerv+0x8b8>)
 80037d8:	f003 fbd4 	bl	8006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80037dc:	4603      	mov	r3, r0
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d049      	beq.n	8003882 <_Z15uart_CmdHandlerv+0x7f6>
			{
				for (auto& display : displays_map)
 80037ee:	4b56      	ldr	r3, [pc, #344]	@ (8003948 <_Z15uart_CmdHandlerv+0x8bc>)
 80037f0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80037f4:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80037f8:	f7fe f83a 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 80037fc:	4602      	mov	r2, r0
 80037fe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003802:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800380c:	f7fe f83d 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003810:	4602      	mov	r2, r0
 8003812:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003816:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e026      	b.n	800386c <_Z15uart_CmdHandlerv+0x7e0>
 800381e:	f107 030c 	add.w	r3, r7, #12
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe f863 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 8003828:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
				{
					if (display.first == display_data && display.second->state == State_IDLE)
 800382c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003830:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fa82 	bl	8003d40 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <_Z15uart_CmdHandlerv+0x7c6>
 8003842:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <_Z15uart_CmdHandlerv+0x7c6>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <_Z15uart_CmdHandlerv+0x7c8>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <_Z15uart_CmdHandlerv+0x7d6>
					{
						display.second->direction = Direction_CounterClockWise;
 8003858:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2201      	movs	r2, #1
 8003860:	715a      	strb	r2, [r3, #5]
				for (auto& display : displays_map)
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe f830 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 800386c:	f107 0208 	add.w	r2, r7, #8
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe f814 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1cd      	bne.n	800381e <_Z15uart_CmdHandlerv+0x792>
					}
				}
			}

			for (auto& display : displays_map)
 8003882:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <_Z15uart_CmdHandlerv+0x8bc>)
 8003884:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003888:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 800388c:	f7fd fff0 	bl	8001870 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003890:	4602      	mov	r2, r0
 8003892:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003896:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 80038a0:	f7fd fff3 	bl	800188a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80038aa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e024      	b.n	80038fc <_Z15uart_CmdHandlerv+0x870>
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe f81a 	bl	80018ee <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEdeEv>
 80038ba:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
			{
				if (display.first == display_data && display.second->state == State_IDLE)
 80038be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c2:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fa39 	bl	8003d40 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <_Z15uart_CmdHandlerv+0x858>
 80038d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	791b      	ldrb	r3, [r3, #4]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <_Z15uart_CmdHandlerv+0x858>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <_Z15uart_CmdHandlerv+0x85a>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <_Z15uart_CmdHandlerv+0x868>
				{
					display.second->state = State_Jump;
 80038ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2202      	movs	r2, #2
 80038f2:	711a      	strb	r2, [r3, #4]
			for (auto& display : displays_map)
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd ffe8 	bl	80018cc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEEppEv>
 80038fc:	463a      	mov	r2, r7
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd ffce 	bl	80018a4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13DisplayModuleEESD_>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1d1      	bne.n	80038b2 <_Z15uart_CmdHandlerv+0x826>
				}
			}

			data_pack.command_info = "";
 800390e:	4909      	ldr	r1, [pc, #36]	@ (8003934 <_Z15uart_CmdHandlerv+0x8a8>)
 8003910:	4809      	ldr	r0, [pc, #36]	@ (8003938 <_Z15uart_CmdHandlerv+0x8ac>)
 8003912:	f003 fbd8 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
	}
}
 8003916:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800391a:	4618      	mov	r0, r3
 800391c:	f003 fab5 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003920:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fab0 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800392a:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08007858 	.word	0x08007858
 8003938:	2000015c 	.word	0x2000015c
 800393c:	0800786c 	.word	0x0800786c
 8003940:	08007874 	.word	0x08007874
 8003944:	20000174 	.word	0x20000174
 8003948:	20000080 	.word	0x20000080

0800394c <HAL_UART_RxCpltCallback>:


// UART Callback handling:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b0b1      	sub	sp, #196	@ 0xc4
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4aa5      	ldr	r2, [pc, #660]	@ (8003bf0 <HAL_UART_RxCpltCallback+0x2a4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f040 8144 	bne.w	8003be8 <HAL_UART_RxCpltCallback+0x29c>
    {
    	// Increment data_index in every single byte receiving callback:
    	data_package[data_index++] = single_byte;
 8003960:	4ba4      	ldr	r3, [pc, #656]	@ (8003bf4 <HAL_UART_RxCpltCallback+0x2a8>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	b2d1      	uxtb	r1, r2
 8003968:	4aa2      	ldr	r2, [pc, #648]	@ (8003bf4 <HAL_UART_RxCpltCallback+0x2a8>)
 800396a:	7011      	strb	r1, [r2, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4ba2      	ldr	r3, [pc, #648]	@ (8003bf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8003970:	7819      	ldrb	r1, [r3, #0]
 8003972:	4ba2      	ldr	r3, [pc, #648]	@ (8003bfc <HAL_UART_RxCpltCallback+0x2b0>)
 8003974:	5499      	strb	r1, [r3, r2]

    	// Receive single bytes until single_byte = '\n':
    	if (single_byte == '\n' || data_index >= sizeof(data_package))
 8003976:	4ba0      	ldr	r3, [pc, #640]	@ (8003bf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b0a      	cmp	r3, #10
 800397c:	d004      	beq.n	8003988 <HAL_UART_RxCpltCallback+0x3c>
 800397e:	4b9d      	ldr	r3, [pc, #628]	@ (8003bf4 <HAL_UART_RxCpltCallback+0x2a8>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b13      	cmp	r3, #19
 8003984:	f240 8124 	bls.w	8003bd0 <HAL_UART_RxCpltCallback+0x284>
    	{
    		// Start data parsing:
    		is_parsing = true;
 8003988:	4b9d      	ldr	r3, [pc, #628]	@ (8003c00 <HAL_UART_RxCpltCallback+0x2b4>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]

    		std::string data(data_package);
 800398e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003992:	4618      	mov	r0, r3
 8003994:	f003 f8e1 	bl	8006b5a <_ZNSaIcEC1Ev>
 8003998:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	4996      	ldr	r1, [pc, #600]	@ (8003bfc <HAL_UART_RxCpltCallback+0x2b0>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 fc48 	bl	8007238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 f8d5 	bl	8006b5c <_ZNSaIcED1Ev>

    		// Delete "\r\n":
    		data.erase(std::remove(data.begin(), data.end(), '\r'), data.end());
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 fa9b 	bl	8006ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80039bc:	4604      	mov	r4, r0
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fa97 	bl	8006ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80039c8:	4601      	mov	r1, r0
 80039ca:	230d      	movs	r3, #13
 80039cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80039d0:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80039d4:	461a      	mov	r2, r3
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 f9dc 	bl	8003d94 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcET_SA_SA_RKT0_>
 80039dc:	4603      	mov	r3, r0
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80039e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f9e6 	bl	8003dbc <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 fa7e 	bl	8006ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80039fa:	4603      	mov	r3, r0
 80039fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039fe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003a02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f9d7 	bl	8003dbc <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 fab7 	bl	8006f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
    		data.erase(std::remove(data.begin(), data.end(), '\n'), data.end());
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	4618      	mov	r0, r3
 8003a22:	f003 fa66 	bl	8006ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8003a26:	4604      	mov	r4, r0
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 fa62 	bl	8006ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8003a32:	4601      	mov	r1, r0
 8003a34:	230a      	movs	r3, #10
 8003a36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003a3a:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4620      	mov	r0, r4
 8003a42:	f000 f9a7 	bl	8003d94 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcET_SA_SA_RKT0_>
 8003a46:	4603      	mov	r3, r0
 8003a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a4a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003a4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f9b1 	bl	8003dbc <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fa49 	bl	8006ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8003a64:	4603      	mov	r3, r0
 8003a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a68:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f9a2 	bl	8003dbc <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fa82 	bl	8006f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>

    		// Find colons:
    		size_t colon1_position = data.find(':');
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	213a      	movs	r1, #58	@ 0x3a
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 fb21 	bl	80070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8003a94:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
			size_t colon2_position = data.find(':' , colon1_position + 1);
 8003a98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	213a      	movs	r1, #58	@ 0x3a
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 fb16 	bl	80070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8003aaa:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
			size_t position_R = data.find('R');
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2152      	movs	r1, #82	@ 0x52
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 fb0d 	bl	80070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8003abc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
			size_t position_r = data.find('r');
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2172      	movs	r1, #114	@ 0x72
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 fb04 	bl	80070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8003ace:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

			// Add information to DataPackage structure:
			if (colon2_position == std::string::npos && (position_R != std::string::npos || position_r != std::string::npos))
 8003ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d126      	bne.n	8003b2a <HAL_UART_RxCpltCallback+0x1de>
 8003adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d104      	bne.n	8003af0 <HAL_UART_RxCpltCallback+0x1a4>
 8003ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d01c      	beq.n	8003b2a <HAL_UART_RxCpltCallback+0x1de>
			{
				data_pack.parameter_info = "";
 8003af0:	4944      	ldr	r1, [pc, #272]	@ (8003c04 <HAL_UART_RxCpltCallback+0x2b8>)
 8003af2:	4845      	ldr	r0, [pc, #276]	@ (8003c08 <HAL_UART_RxCpltCallback+0x2bc>)
 8003af4:	f003 fae7 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				data_pack.command_info = "RESET";
 8003af8:	4944      	ldr	r1, [pc, #272]	@ (8003c0c <HAL_UART_RxCpltCallback+0x2c0>)
 8003afa:	4845      	ldr	r0, [pc, #276]	@ (8003c10 <HAL_UART_RxCpltCallback+0x2c4>)
 8003afc:	f003 fae3 	bl	80070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				data_pack.display_info = data.substr(0, colon1_position);
 8003b00:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003b04:	f107 010c 	add.w	r1, r7, #12
 8003b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f003 fb7f 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003b12:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003b16:	4619      	mov	r1, r3
 8003b18:	483e      	ldr	r0, [pc, #248]	@ (8003c14 <HAL_UART_RxCpltCallback+0x2c8>)
 8003b1a:	f003 f9bc 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b1e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 f9b1 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b28:	e044      	b.n	8003bb4 <HAL_UART_RxCpltCallback+0x268>
			}
			else
			{

				data_pack.display_info = data.substr(0, colon1_position);
 8003b2a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003b2e:	f107 010c 	add.w	r1, r7, #12
 8003b32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b36:	2200      	movs	r2, #0
 8003b38:	f003 fb6a 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003b3c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003b40:	4619      	mov	r1, r3
 8003b42:	4834      	ldr	r0, [pc, #208]	@ (8003c14 <HAL_UART_RxCpltCallback+0x2c8>)
 8003b44:	f003 f9a7 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b48:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 f99c 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				data_pack.command_info = data.substr(colon1_position + 1, colon2_position - colon1_position - 1);
 8003b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b56:	1c5c      	adds	r4, r3, #1
 8003b58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8003b68:	f107 010c 	add.w	r1, r7, #12
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	f003 fb4f 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003b72:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003b76:	4619      	mov	r1, r3
 8003b78:	4825      	ldr	r0, [pc, #148]	@ (8003c10 <HAL_UART_RxCpltCallback+0x2c4>)
 8003b7a:	f003 f98c 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b7e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003b82:	4618      	mov	r0, r3
 8003b84:	f003 f981 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				data_pack.parameter_info = data.substr(colon2_position + 1);
 8003b88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8003b92:	f107 010c 	add.w	r1, r7, #12
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	f003 fb39 	bl	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003b9e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4818      	ldr	r0, [pc, #96]	@ (8003c08 <HAL_UART_RxCpltCallback+0x2bc>)
 8003ba6:	f003 f976 	bl	8006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003baa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f003 f96b 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

    		// Finish data parsing:
    		is_parsing = false;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_UART_RxCpltCallback+0x2b4>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]

    		data_index = 0;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <HAL_UART_RxCpltCallback+0x2a8>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
    		data_package[20] = {0};
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <HAL_UART_RxCpltCallback+0x2b0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	751a      	strb	r2, [r3, #20]
    	}
 8003bc6:	f107 030c 	add.w	r3, r7, #12
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 f95d 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

        // Init next data receiving if parsing finished:
        if (!is_parsing) HAL_UART_Receive_IT(&huart1, (uint8_t*)&single_byte, sizeof(single_byte));
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_UART_RxCpltCallback+0x2b4>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f083 0301 	eor.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <HAL_UART_RxCpltCallback+0x29c>
 8003bde:	2201      	movs	r2, #1
 8003be0:	4905      	ldr	r1, [pc, #20]	@ (8003bf8 <HAL_UART_RxCpltCallback+0x2ac>)
 8003be2:	480d      	ldr	r0, [pc, #52]	@ (8003c18 <HAL_UART_RxCpltCallback+0x2cc>)
 8003be4:	f002 f882 	bl	8005cec <HAL_UART_Receive_IT>
    }
}
 8003be8:	bf00      	nop
 8003bea:	37c4      	adds	r7, #196	@ 0xc4
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd90      	pop	{r4, r7, pc}
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	20000141 	.word	0x20000141
 8003bf8:	20000140 	.word	0x20000140
 8003bfc:	2000012c 	.word	0x2000012c
 8003c00:	20000142 	.word	0x20000142
 8003c04:	08007858 	.word	0x08007858
 8003c08:	20000174 	.word	0x20000174
 8003c0c:	08007848 	.word	0x08007848
 8003c10:	2000015c 	.word	0x2000015c
 8003c14:	20000144 	.word	0x20000144
 8003c18:	2000018c 	.word	0x2000018c

08003c1c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	f003 fd78 	bl	8007718 <__errno>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f003 fd72 	bl	8007718 <__errno>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	f003 fd64 	bl	8007718 <__errno>
 8003c50:	4603      	mov	r3, r0
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8003c62:	f003 fd59 	bl	8007718 <__errno>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8003c82:	2300      	movs	r3, #0
	  }
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ffba 	bl	8003c1c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8003ca8:	f107 0118 	add.w	r1, r7, #24
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
 8003cb4:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d102      	bne.n	8003cc4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f003 f813 	bl	8006cea <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8003cc4:	f003 fd28 	bl	8007718 <__errno>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8003ccc:	2b22      	cmp	r3, #34	@ 0x22
 8003cce:	d006      	beq.n	8003cde <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003cd4:	f7ff ffd0 	bl	8003c78 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8003ce2:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8003ce8:	68b8      	ldr	r0, [r7, #8]
 8003cea:	f003 f804 	bl	8006cf6 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	623b      	str	r3, [r7, #32]

      if (__idx)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	601a      	str	r2, [r3, #0]

      return __ret;
 8003d04:	6a3c      	ldr	r4, [r7, #32]
    }
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff9a 	bl	8003c44 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8003d10:	4623      	mov	r3, r4
    }
 8003d12:	4618      	mov	r0, r3
 8003d14:	372c      	adds	r7, #44	@ 0x2c
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}

08003d1a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f003 f9f8 	bl	800711c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    operator==(const basic_string<_CharT>& __lhs,
 8003d40:	b5b0      	push	{r4, r5, r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
    { return (__lhs.size() == __rhs.size()
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f003 f8d7 	bl	8006efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003d50:	4604      	mov	r4, r0
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f003 f8d3 	bl	8006efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003d58:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	d115      	bne.n	8003d8a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f003 f9b7 	bl	80070d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8003d64:	4604      	mov	r4, r0
 8003d66:	6838      	ldr	r0, [r7, #0]
 8003d68:	f003 f9b3 	bl	80070d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f003 f8c5 	bl	8006efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	4629      	mov	r1, r5
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff f93e 	bl	8002ffc <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 8003d8a:	2300      	movs	r3, #0
						    __lhs.size())); }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bdb0      	pop	{r4, r5, r7, pc}

08003d94 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcET_SA_SA_RKT0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f81c 	bl	8003dde <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8003da6:	4603      	mov	r3, r0
 8003da8:	461a      	mov	r2, r3
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f825 	bl	8003dfc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>
 8003db2:	4603      	mov	r3, r0
		__gnu_cxx::__ops::__iter_equals_val(__value));
    }
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>:

      // Allow iterator to const_iterator conversion
#if __cplusplus >= 201103L
      template<typename _Iter, typename = __convertible_from<_Iter>>
	_GLIBCXX20_CONSTEXPR
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
        __normal_iterator(const __normal_iterator<_Iter,
			  typename __enable_if<
	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i)
#endif
        : _M_current(__i.base()) { }
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f000 f871 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f869 	bl	8003ec4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f868 	bl	8003ee2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>
 8003e12:	4603      	mov	r3, r0
 8003e14:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 8003e16:	f107 0208 	add.w	r2, r7, #8
 8003e1a:	f107 030c 	add.w	r3, r7, #12
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f874 	bl	8003f0e <_ZN9__gnu_cxxeqIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x34>
	return __first;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	e03a      	b.n	8003ea6 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0xaa>
      _ForwardIterator __result = __first;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	617b      	str	r3, [r7, #20]
      ++__first;
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f880 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
      for (; __first != __last; ++__first)
 8003e3e:	e026      	b.n	8003e8e <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x92>
	if (!__pred(__first))
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f8a2 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f083 0301 	eor.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x88>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f8ae 	bl	8003fbc <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f8b6 	bl	8003fd4 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8003e68:	4604      	mov	r4, r0
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f8a4 	bl	8003fbc <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8003e74:	4603      	mov	r3, r0
 8003e76:	7822      	ldrb	r2, [r4, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
	    ++__result;
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f85d 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
      for (; __first != __last; ++__first)
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f858 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8003e8e:	f107 0208 	add.w	r2, r7, #8
 8003e92:	f107 030c 	add.w	r3, r7, #12
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f860 	bl	8003f5e <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1cd      	bne.n	8003e40 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x44>
	  }
      return __result;
 8003ea4:	697b      	ldr	r3, [r7, #20]
    }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}

08003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	601a      	str	r2, [r3, #0]
      { }
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8003ee2:	b590      	push	{r4, r7, lr}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f879 	bl	8003fea <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 8003ef8:	4623      	mov	r3, r4
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f87e 	bl	8004000 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag>
 8003f04:	4603      	mov	r3, r0
    }
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd90      	pop	{r4, r7, pc}

08003f0e <_ZN9__gnu_cxxeqIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f0e:	b590      	push	{r4, r7, lr}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ffc8 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f7ff ffc3 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}

08003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	601a      	str	r2, [r3, #0]
	return *this;
 8003f50:	687b      	ldr	r3, [r7, #4]
      }
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f5e:	b590      	push	{r4, r7, lr}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ffa0 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	681c      	ldr	r4, [r3, #0]
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	f7ff ff9b 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	429c      	cmp	r4, r3
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}

08003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>:
	operator()(_Iterator __it)
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 8003f98:	463b      	mov	r3, r7
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f80e 	bl	8003fbc <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	781a      	ldrb	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003ff2:	bf00      	nop
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800400e:	f107 020c 	add.w	r2, r7, #12
 8004012:	f107 0308 	add.w	r3, r7, #8
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f88a 	bl	8004132 <_ZN9__gnu_cxxmiIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800401e:	4603      	mov	r3, r0
 8004020:	109b      	asrs	r3, r3, #2
 8004022:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8004024:	e03e      	b.n	80040a4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ffaf 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e077      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff7d 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ffa0 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	e068      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff6e 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff91 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	e059      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff5f 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff82 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	e04a      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004094:	f107 030c 	add.w	r3, r7, #12
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff50 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	dcbd      	bgt.n	8004026 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 80040aa:	f107 020c 	add.w	r2, r7, #12
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f83c 	bl	8004132 <_ZN9__gnu_cxxmiIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d006      	beq.n	80040ce <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xce>
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	dc31      	bgt.n	8004128 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x128>
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d020      	beq.n	800410a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x10a>
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d00f      	beq.n	80040ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xec>
 80040cc:	e02c      	b.n	8004128 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff5b 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	e023      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff29 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff4c 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	e014      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff1a 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff3d 	bl	8003f8e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	e005      	b.n	800412a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800411e:	f107 030c 	add.w	r3, r7, #12
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff0b 	bl	8003f3e <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  return __last;
 8004128:	68bb      	ldr	r3, [r7, #8]
    }
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZN9__gnu_cxxmiIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff feb6 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004142:	4603      	mov	r3, r0
 8004144:	681c      	ldr	r4, [r3, #0]
 8004146:	6838      	ldr	r0, [r7, #0]
 8004148:	f7ff feb1 	bl	8003eae <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800414c:	4603      	mov	r3, r0
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	1ae3      	subs	r3, r4, r3
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}

0800415a <_ZN11DataPackageD1Ev>:
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3330      	adds	r3, #48	@ 0x30
 8004166:	4618      	mov	r0, r3
 8004168:	f002 fe8f 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3318      	adds	r3, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f002 fe8a 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f002 fe86 	bl	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_Z41__static_initialization_and_destruction_0ii>:
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800419e:	4293      	cmp	r3, r2
 80041a0:	d102      	bne.n	80041a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
DataPackage data_pack;
 80041a2:	4809      	ldr	r0, [pc, #36]	@ (80041c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80041a4:	f7fe ff5a 	bl	800305c <_ZN11DataPackageC1Ev>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d102      	bne.n	80041be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80041b8:	4803      	ldr	r0, [pc, #12]	@ (80041c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80041ba:	f7ff ffce 	bl	800415a <_ZN11DataPackageD1Ev>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000144 	.word	0x20000144

080041cc <_GLOBAL__sub_I_data_package>:
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7ff ffd7 	bl	8004188 <_Z41__static_initialization_and_destruction_0ii>
 80041da:	bd80      	pop	{r7, pc}

080041dc <_GLOBAL__sub_D_data_package>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
 80041e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7ff ffcf 	bl	8004188 <_Z41__static_initialization_and_destruction_0ii>
 80041ea:	bd80      	pop	{r7, pc}

080041ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 80041f2:	4a12      	ldr	r2, [pc, #72]	@ (800423c <MX_USART1_UART_Init+0x50>)
 80041f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 80041f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004204:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 8004206:	2200      	movs	r2, #0
 8004208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 800420c:	2200      	movs	r2, #0
 800420e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004210:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 8004212:	220c      	movs	r2, #12
 8004214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004216:	4b08      	ldr	r3, [pc, #32]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004222:	4805      	ldr	r0, [pc, #20]	@ (8004238 <MX_USART1_UART_Init+0x4c>)
 8004224:	f001 fd12 	bl	8005c4c <HAL_UART_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800422e:	f7fd fa83 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000018c 	.word	0x2000018c
 800423c:	40011000 	.word	0x40011000

08004240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	@ 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1d      	ldr	r2, [pc, #116]	@ (80042d4 <HAL_UART_MspInit+0x94>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d133      	bne.n	80042ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_UART_MspInit+0x98>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <HAL_UART_MspInit+0x98>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	6453      	str	r3, [r2, #68]	@ 0x44
 8004272:	4b19      	ldr	r3, [pc, #100]	@ (80042d8 <HAL_UART_MspInit+0x98>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <HAL_UART_MspInit+0x98>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004286:	4a14      	ldr	r2, [pc, #80]	@ (80042d8 <HAL_UART_MspInit+0x98>)
 8004288:	f043 0302 	orr.w	r3, r3, #2
 800428c:	6313      	str	r3, [r2, #48]	@ 0x30
 800428e:	4b12      	ldr	r3, [pc, #72]	@ (80042d8 <HAL_UART_MspInit+0x98>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800429a:	23c0      	movs	r3, #192	@ 0xc0
 800429c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429e:	2302      	movs	r3, #2
 80042a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a6:	2303      	movs	r3, #3
 80042a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042aa:	2307      	movs	r3, #7
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	4619      	mov	r1, r3
 80042b4:	4809      	ldr	r0, [pc, #36]	@ (80042dc <HAL_UART_MspInit+0x9c>)
 80042b6:	f000 fa53 	bl	8004760 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2100      	movs	r1, #0
 80042be:	2025      	movs	r0, #37	@ 0x25
 80042c0:	f000 f985 	bl	80045ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042c4:	2025      	movs	r0, #37	@ 0x25
 80042c6:	f000 f99e 	bl	8004606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042ca:	bf00      	nop
 80042cc:	3728      	adds	r7, #40	@ 0x28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40011000 	.word	0x40011000
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020400 	.word	0x40020400

080042e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004318 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80042e4:	f7fe fd98 	bl	8002e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042e8:	480c      	ldr	r0, [pc, #48]	@ (800431c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042ea:	490d      	ldr	r1, [pc, #52]	@ (8004320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f0:	e002      	b.n	80042f8 <LoopCopyDataInit>

080042f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f6:	3304      	adds	r3, #4

080042f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042fc:	d3f9      	bcc.n	80042f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004300:	4c0a      	ldr	r4, [pc, #40]	@ (800432c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004304:	e001      	b.n	800430a <LoopFillZerobss>

08004306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004308:	3204      	adds	r2, #4

0800430a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800430c:	d3fb      	bcc.n	8004306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800430e:	f003 fa09 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004312:	f7fd f8bd 	bl	8001490 <main>
  bx  lr    
 8004316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004318:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800431c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004320:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004324:	08007a84 	.word	0x08007a84
  ldr r2, =_sbss
 8004328:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800432c:	20000324 	.word	0x20000324

08004330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004330:	e7fe      	b.n	8004330 <ADC_IRQHandler>
	...

08004334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <HAL_Init+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0d      	ldr	r2, [pc, #52]	@ (8004374 <HAL_Init+0x40>)
 800433e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_Init+0x40>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <HAL_Init+0x40>)
 800434a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800434e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004350:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <HAL_Init+0x40>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a07      	ldr	r2, [pc, #28]	@ (8004374 <HAL_Init+0x40>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 f92b 	bl	80045b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004362:	200f      	movs	r0, #15
 8004364:	f000 f808 	bl	8004378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004368:	f7fe fc86 	bl	8002c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023c00 	.word	0x40023c00

08004378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004380:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <HAL_InitTick+0x54>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <HAL_InitTick+0x58>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800438e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f943 	bl	8004622 <HAL_SYSTICK_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00e      	b.n	80043c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d80a      	bhi.n	80043c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ac:	2200      	movs	r2, #0
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f000 f90b 	bl	80045ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b8:	4a06      	ldr	r2, [pc, #24]	@ (80043d4 <HAL_InitTick+0x5c>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000000 	.word	0x20000000
 80043d0:	20000008 	.word	0x20000008
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <HAL_IncTick+0x20>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <HAL_IncTick+0x24>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	4a04      	ldr	r2, [pc, #16]	@ (80043fc <HAL_IncTick+0x24>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000008 	.word	0x20000008
 80043fc:	200001d4 	.word	0x200001d4

08004400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_GetTick+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200001d4 	.word	0x200001d4

08004418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <__NVIC_SetPriorityGrouping+0x44>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004434:	4013      	ands	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800444a:	4a04      	ldr	r2, [pc, #16]	@ (800445c <__NVIC_SetPriorityGrouping+0x44>)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	60d3      	str	r3, [r2, #12]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004464:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <__NVIC_GetPriorityGrouping+0x18>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	f003 0307 	and.w	r3, r3, #7
}
 800446e:	4618      	mov	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	2b00      	cmp	r3, #0
 800448c:	db0b      	blt.n	80044a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	f003 021f 	and.w	r2, r3, #31
 8004494:	4907      	ldr	r1, [pc, #28]	@ (80044b4 <__NVIC_EnableIRQ+0x38>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2001      	movs	r0, #1
 800449e:	fa00 f202 	lsl.w	r2, r0, r2
 80044a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000e100 	.word	0xe000e100

080044b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	db0a      	blt.n	80044e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	490c      	ldr	r1, [pc, #48]	@ (8004504 <__NVIC_SetPriority+0x4c>)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	0112      	lsls	r2, r2, #4
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	440b      	add	r3, r1
 80044dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044e0:	e00a      	b.n	80044f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4908      	ldr	r1, [pc, #32]	@ (8004508 <__NVIC_SetPriority+0x50>)
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3b04      	subs	r3, #4
 80044f0:	0112      	lsls	r2, r2, #4
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	440b      	add	r3, r1
 80044f6:	761a      	strb	r2, [r3, #24]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000e100 	.word	0xe000e100
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800450c:	b480      	push	{r7}
 800450e:	b089      	sub	sp, #36	@ 0x24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f1c3 0307 	rsb	r3, r3, #7
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf28      	it	cs
 800452a:	2304      	movcs	r3, #4
 800452c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3304      	adds	r3, #4
 8004532:	2b06      	cmp	r3, #6
 8004534:	d902      	bls.n	800453c <NVIC_EncodePriority+0x30>
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3b03      	subs	r3, #3
 800453a:	e000      	b.n	800453e <NVIC_EncodePriority+0x32>
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43da      	mvns	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	401a      	ands	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004554:	f04f 31ff 	mov.w	r1, #4294967295
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	43d9      	mvns	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	4313      	orrs	r3, r2
         );
}
 8004566:	4618      	mov	r0, r3
 8004568:	3724      	adds	r7, #36	@ 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3b01      	subs	r3, #1
 8004580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004584:	d301      	bcc.n	800458a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004586:	2301      	movs	r3, #1
 8004588:	e00f      	b.n	80045aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800458a:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <SysTick_Config+0x40>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3b01      	subs	r3, #1
 8004590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004592:	210f      	movs	r1, #15
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	f7ff ff8e 	bl	80044b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <SysTick_Config+0x40>)
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045a2:	4b04      	ldr	r3, [pc, #16]	@ (80045b4 <SysTick_Config+0x40>)
 80045a4:	2207      	movs	r2, #7
 80045a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	e000e010 	.word	0xe000e010

080045b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ff29 	bl	8004418 <__NVIC_SetPriorityGrouping>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4603      	mov	r3, r0
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045e0:	f7ff ff3e 	bl	8004460 <__NVIC_GetPriorityGrouping>
 80045e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	6978      	ldr	r0, [r7, #20]
 80045ec:	f7ff ff8e 	bl	800450c <NVIC_EncodePriority>
 80045f0:	4602      	mov	r2, r0
 80045f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff5d 	bl	80044b8 <__NVIC_SetPriority>
}
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	4603      	mov	r3, r0
 800460e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ff31 	bl	800447c <__NVIC_EnableIRQ>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ffa2 	bl	8004574 <SysTick_Config>
 8004630:	4603      	mov	r3, r0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004646:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004648:	f7ff feda 	bl	8004400 <HAL_GetTick>
 800464c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d008      	beq.n	800466c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2280      	movs	r2, #128	@ 0x80
 800465e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e052      	b.n	8004712 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0216 	bic.w	r2, r2, #22
 800467a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800468a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <HAL_DMA_Abort+0x62>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0208 	bic.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046bc:	e013      	b.n	80046e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046be:	f7ff fe9f 	bl	8004400 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d90c      	bls.n	80046e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e015      	b.n	8004712 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e4      	bne.n	80046be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f8:	223f      	movs	r2, #63	@ 0x3f
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d004      	beq.n	8004738 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2280      	movs	r2, #128	@ 0x80
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e00c      	b.n	8004752 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2205      	movs	r2, #5
 800473c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	@ 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e159      	b.n	8004a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800477c:	2201      	movs	r2, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	f040 8148 	bne.w	8004a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d005      	beq.n	80047b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d130      	bne.n	8004814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2203      	movs	r2, #3
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047e8:	2201      	movs	r2, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0201 	and.w	r2, r3, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b03      	cmp	r3, #3
 800481e:	d017      	beq.n	8004850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	2203      	movs	r2, #3
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d123      	bne.n	80048a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	08da      	lsrs	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3208      	adds	r2, #8
 8004864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	220f      	movs	r2, #15
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	08da      	lsrs	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3208      	adds	r2, #8
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0203 	and.w	r2, r3, #3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80a2 	beq.w	8004a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	4b57      	ldr	r3, [pc, #348]	@ (8004a48 <HAL_GPIO_Init+0x2e8>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	4a56      	ldr	r2, [pc, #344]	@ (8004a48 <HAL_GPIO_Init+0x2e8>)
 80048f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048f6:	4b54      	ldr	r3, [pc, #336]	@ (8004a48 <HAL_GPIO_Init+0x2e8>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004902:	4a52      	ldr	r2, [pc, #328]	@ (8004a4c <HAL_GPIO_Init+0x2ec>)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	089b      	lsrs	r3, r3, #2
 8004908:	3302      	adds	r3, #2
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	220f      	movs	r2, #15
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a49      	ldr	r2, [pc, #292]	@ (8004a50 <HAL_GPIO_Init+0x2f0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d019      	beq.n	8004962 <HAL_GPIO_Init+0x202>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a48      	ldr	r2, [pc, #288]	@ (8004a54 <HAL_GPIO_Init+0x2f4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_GPIO_Init+0x1fe>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a47      	ldr	r2, [pc, #284]	@ (8004a58 <HAL_GPIO_Init+0x2f8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00d      	beq.n	800495a <HAL_GPIO_Init+0x1fa>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a46      	ldr	r2, [pc, #280]	@ (8004a5c <HAL_GPIO_Init+0x2fc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <HAL_GPIO_Init+0x1f6>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a45      	ldr	r2, [pc, #276]	@ (8004a60 <HAL_GPIO_Init+0x300>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_GPIO_Init+0x1f2>
 800494e:	2304      	movs	r3, #4
 8004950:	e008      	b.n	8004964 <HAL_GPIO_Init+0x204>
 8004952:	2307      	movs	r3, #7
 8004954:	e006      	b.n	8004964 <HAL_GPIO_Init+0x204>
 8004956:	2303      	movs	r3, #3
 8004958:	e004      	b.n	8004964 <HAL_GPIO_Init+0x204>
 800495a:	2302      	movs	r3, #2
 800495c:	e002      	b.n	8004964 <HAL_GPIO_Init+0x204>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_GPIO_Init+0x204>
 8004962:	2300      	movs	r3, #0
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	f002 0203 	and.w	r2, r2, #3
 800496a:	0092      	lsls	r2, r2, #2
 800496c:	4093      	lsls	r3, r2
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004974:	4935      	ldr	r1, [pc, #212]	@ (8004a4c <HAL_GPIO_Init+0x2ec>)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	3302      	adds	r3, #2
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004982:	4b38      	ldr	r3, [pc, #224]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	43db      	mvns	r3, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d0:	4a24      	ldr	r2, [pc, #144]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049d6:	4b23      	ldr	r3, [pc, #140]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a00:	4b18      	ldr	r3, [pc, #96]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a24:	4a0f      	ldr	r2, [pc, #60]	@ (8004a64 <HAL_GPIO_Init+0x304>)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	f67f aea2 	bls.w	800477c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3724      	adds	r7, #36	@ 0x24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40013800 	.word	0x40013800
 8004a50:	40020000 	.word	0x40020000
 8004a54:	40020400 	.word	0x40020400
 8004a58:	40020800 	.word	0x40020800
 8004a5c:	40020c00 	.word	0x40020c00
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e001      	b.n	8004a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa8:	787b      	ldrb	r3, [r7, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ab4:	e003      	b.n	8004abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	041a      	lsls	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	619a      	str	r2, [r3, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e267      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aea:	4b88      	ldr	r3, [pc, #544]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d00c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af6:	4b85      	ldr	r3, [pc, #532]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d112      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b02:	4b82      	ldr	r3, [pc, #520]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b0e:	d10b      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	4b7e      	ldr	r3, [pc, #504]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05b      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x108>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d157      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e242      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d106      	bne.n	8004b40 <HAL_RCC_OscConfig+0x74>
 8004b32:	4b76      	ldr	r3, [pc, #472]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a75      	ldr	r2, [pc, #468]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e01d      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x98>
 8004b4a:	4b70      	ldr	r3, [pc, #448]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b6d      	ldr	r3, [pc, #436]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b64:	4b69      	ldr	r3, [pc, #420]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a68      	ldr	r2, [pc, #416]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b66      	ldr	r3, [pc, #408]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a65      	ldr	r2, [pc, #404]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7ff fc3c 	bl	8004400 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7ff fc38 	bl	8004400 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e207      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0xc0>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7ff fc28 	bl	8004400 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7ff fc24 	bl	8004400 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1f3      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	4b51      	ldr	r3, [pc, #324]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xe8>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004be2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bee:	4b47      	ldr	r3, [pc, #284]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b41      	ldr	r3, [pc, #260]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1c7      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4937      	ldr	r1, [pc, #220]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7ff fbdd 	bl	8004400 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7ff fbd9 	bl	8004400 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1a8      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4925      	ldr	r1, [pc, #148]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7ff fbbc 	bl	8004400 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7ff fbb8 	bl	8004400 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e187      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d036      	beq.n	8004d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7ff fb9c 	bl	8004400 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7ff fb98 	bl	8004400 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e167      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x200>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf2:	f7ff fb85 	bl	8004400 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	e00e      	b.n	8004d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7ff fb81 	bl	8004400 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d907      	bls.n	8004d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e150      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	4b88      	ldr	r3, [pc, #544]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8097 	beq.w	8004e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b81      	ldr	r3, [pc, #516]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	4b7d      	ldr	r3, [pc, #500]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d52:	4b7a      	ldr	r3, [pc, #488]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b77      	ldr	r3, [pc, #476]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b74      	ldr	r3, [pc, #464]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a73      	ldr	r2, [pc, #460]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7ff fb41 	bl	8004400 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7ff fb3d 	bl	8004400 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e10c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b6a      	ldr	r3, [pc, #424]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x2ea>
 8004da8:	4b64      	ldr	r3, [pc, #400]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a63      	ldr	r2, [pc, #396]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	e01c      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x30c>
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dca:	4b5c      	ldr	r3, [pc, #368]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	4a5b      	ldr	r2, [pc, #364]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004dd8:	4b58      	ldr	r3, [pc, #352]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	4a57      	ldr	r2, [pc, #348]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de4:	4b55      	ldr	r3, [pc, #340]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de8:	4a54      	ldr	r2, [pc, #336]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7ff fb02 	bl	8004400 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7ff fafe 	bl	8004400 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0cb      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b49      	ldr	r3, [pc, #292]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x334>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7ff faec 	bl	8004400 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7ff fae8 	bl	8004400 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0b5      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	4b3e      	ldr	r3, [pc, #248]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b39      	ldr	r3, [pc, #228]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	4a38      	ldr	r2, [pc, #224]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a1 	beq.w	8004fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6a:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d05c      	beq.n	8004f30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d141      	bne.n	8004f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7ff fabc 	bl	8004400 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7ff fab8 	bl	8004400 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e087      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	491b      	ldr	r1, [pc, #108]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7ff fa91 	bl	8004400 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7ff fa8d 	bl	8004400 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e05c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x416>
 8004f00:	e054      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7ff fa7a 	bl	8004400 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7ff fa76 	bl	8004400 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e045      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x444>
 8004f2e:	e03d      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e038      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000
 8004f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <HAL_RCC_OscConfig+0x4ec>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d121      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11a      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0cc      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b68      	ldr	r3, [pc, #416]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d90c      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b65      	ldr	r3, [pc, #404]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b63      	ldr	r3, [pc, #396]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0b8      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005010:	4b59      	ldr	r3, [pc, #356]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a58      	ldr	r2, [pc, #352]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800501a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005028:	4b53      	ldr	r3, [pc, #332]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b50      	ldr	r3, [pc, #320]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	494d      	ldr	r1, [pc, #308]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d119      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e07f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d003      	beq.n	800507a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005076:	2b03      	cmp	r3, #3
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	4b3f      	ldr	r3, [pc, #252]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e06f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e067      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509a:	4b37      	ldr	r3, [pc, #220]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4934      	ldr	r1, [pc, #208]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ac:	f7ff f9a8 	bl	8004400 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7ff f9a4 	bl	8004400 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 020c 	and.w	r2, r3, #12
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1eb      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d20c      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b22      	ldr	r3, [pc, #136]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b20      	ldr	r3, [pc, #128]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e032      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005110:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4916      	ldr	r1, [pc, #88]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	490e      	ldr	r1, [pc, #56]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005142:	f000 f821 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8005146:	4602      	mov	r2, r0
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	490a      	ldr	r1, [pc, #40]	@ (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	5ccb      	ldrb	r3, [r1, r3]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a09      	ldr	r2, [pc, #36]	@ (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800515e:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f908 	bl	8004378 <HAL_InitTick>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023c00 	.word	0x40023c00
 8005178:	40023800 	.word	0x40023800
 800517c:	08007880 	.word	0x08007880
 8005180:	20000000 	.word	0x20000000
 8005184:	20000004 	.word	0x20000004

08005188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b090      	sub	sp, #64	@ 0x40
 800518e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a0:	4b59      	ldr	r3, [pc, #356]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x180>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d00d      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x40>
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	f200 80a1 	bhi.w	80052f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x34>
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d003      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ba:	e09b      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b53      	ldr	r3, [pc, #332]	@ (800530c <HAL_RCC_GetSysClockFreq+0x184>)
 80051be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051c0:	e09b      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c2:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x188>)
 80051c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051c6:	e098      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d2:	4b4d      	ldr	r3, [pc, #308]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x180>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d028      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b4a      	ldr	r3, [pc, #296]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	2200      	movs	r2, #0
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051f0:	2100      	movs	r1, #0
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x188>)
 80051f4:	fb03 f201 	mul.w	r2, r3, r1
 80051f8:	2300      	movs	r3, #0
 80051fa:	fb00 f303 	mul.w	r3, r0, r3
 80051fe:	4413      	add	r3, r2
 8005200:	4a43      	ldr	r2, [pc, #268]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x188>)
 8005202:	fba0 1202 	umull	r1, r2, r0, r2
 8005206:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005208:	460a      	mov	r2, r1
 800520a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800520c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520e:	4413      	add	r3, r2
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	2200      	movs	r2, #0
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	61fa      	str	r2, [r7, #28]
 800521a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005222:	f7fb fcd3 	bl	8000bcc <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4613      	mov	r3, r2
 800522c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800522e:	e053      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005230:	4b35      	ldr	r3, [pc, #212]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x180>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	2200      	movs	r2, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	617a      	str	r2, [r7, #20]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005242:	f04f 0b00 	mov.w	fp, #0
 8005246:	4652      	mov	r2, sl
 8005248:	465b      	mov	r3, fp
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	0159      	lsls	r1, r3, #5
 8005254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005258:	0150      	lsls	r0, r2, #5
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	ebb2 080a 	subs.w	r8, r2, sl
 8005262:	eb63 090b 	sbc.w	r9, r3, fp
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005272:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005276:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800527a:	ebb2 0408 	subs.w	r4, r2, r8
 800527e:	eb63 0509 	sbc.w	r5, r3, r9
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	00eb      	lsls	r3, r5, #3
 800528c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005290:	00e2      	lsls	r2, r4, #3
 8005292:	4614      	mov	r4, r2
 8005294:	461d      	mov	r5, r3
 8005296:	eb14 030a 	adds.w	r3, r4, sl
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	eb45 030b 	adc.w	r3, r5, fp
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ae:	4629      	mov	r1, r5
 80052b0:	028b      	lsls	r3, r1, #10
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b8:	4621      	mov	r1, r4
 80052ba:	028a      	lsls	r2, r1, #10
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c2:	2200      	movs	r2, #0
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	60fa      	str	r2, [r7, #12]
 80052c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052cc:	f7fb fc7e 	bl	8000bcc <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x180>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	3301      	adds	r3, #1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80052e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052f2:	e002      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_GetSysClockFreq+0x184>)
 80052f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3740      	adds	r7, #64	@ 0x40
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	00f42400 	.word	0x00f42400
 8005310:	017d7840 	.word	0x017d7840

08005314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000000 	.word	0x20000000

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	08007890 	.word	0x08007890

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005358:	f7ff ffdc 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0b5b      	lsrs	r3, r3, #13
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	@ (8005378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	08007890 	.word	0x08007890

0800537c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e041      	b.n	8005412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd fde6 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 fa9e 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e044      	b.n	80054be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545e:	d013      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1a      	ldr	r2, [pc, #104]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a19      	ldr	r2, [pc, #100]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a17      	ldr	r2, [pc, #92]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a16      	ldr	r2, [pc, #88]	@ (80054dc <HAL_TIM_Base_Start_IT+0xc0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d010      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054aa:	e007      	b.n	80054bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40014000 	.word	0x40014000

080054e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <HAL_TIM_Base_Stop_IT+0x48>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <HAL_TIM_Base_Stop_IT+0x48>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01b      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f06f 0202 	mvn.w	r2, #2
 8005572:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f999 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 800558e:	e005      	b.n	800559c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f98b 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f99c 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01b      	beq.n	80055ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0204 	mvn.w	r2, #4
 80055be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f973 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 80055da:	e005      	b.n	80055e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f965 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f976 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d020      	beq.n	800563a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01b      	beq.n	800563a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f06f 0208 	mvn.w	r2, #8
 800560a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2204      	movs	r2, #4
 8005610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f94d 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 8005626:	e005      	b.n	8005634 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f93f 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f950 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d020      	beq.n	8005686 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01b      	beq.n	8005686 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0210 	mvn.w	r2, #16
 8005656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2208      	movs	r2, #8
 800565c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f927 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 8005672:	e005      	b.n	8005680 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f919 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f92a 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00c      	beq.n	80056aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0201 	mvn.w	r2, #1
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fd f905 	bl	80028b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00c      	beq.n	80056ce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fab5 	bl	8005c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8fb 	bl	80058e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00c      	beq.n	8005716 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0220 	mvn.w	r2, #32
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa87 	bl	8005c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_TIM_ConfigClockSource+0x1c>
 8005736:	2302      	movs	r3, #2
 8005738:	e0b4      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x186>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2202      	movs	r2, #2
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005758:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005760:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005772:	d03e      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0xd4>
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005778:	f200 8087 	bhi.w	800588a <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005780:	f000 8086 	beq.w	8005890 <HAL_TIM_ConfigClockSource+0x172>
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005788:	d87f      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 800578a:	2b70      	cmp	r3, #112	@ 0x70
 800578c:	d01a      	beq.n	80057c4 <HAL_TIM_ConfigClockSource+0xa6>
 800578e:	2b70      	cmp	r3, #112	@ 0x70
 8005790:	d87b      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 8005792:	2b60      	cmp	r3, #96	@ 0x60
 8005794:	d050      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x11a>
 8005796:	2b60      	cmp	r3, #96	@ 0x60
 8005798:	d877      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 800579a:	2b50      	cmp	r3, #80	@ 0x50
 800579c:	d03c      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0xfa>
 800579e:	2b50      	cmp	r3, #80	@ 0x50
 80057a0:	d873      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 80057a2:	2b40      	cmp	r3, #64	@ 0x40
 80057a4:	d058      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x13a>
 80057a6:	2b40      	cmp	r3, #64	@ 0x40
 80057a8:	d86f      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 80057aa:	2b30      	cmp	r3, #48	@ 0x30
 80057ac:	d064      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0x15a>
 80057ae:	2b30      	cmp	r3, #48	@ 0x30
 80057b0:	d86b      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d060      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0x15a>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d867      	bhi.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d05c      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0x15a>
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d05a      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0x15a>
 80057c2:	e062      	b.n	800588a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057d4:	f000 f998 	bl	8005b08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]
      break;
 80057f0:	e04f      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005802:	f000 f981 	bl	8005b08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005814:	609a      	str	r2, [r3, #8]
      break;
 8005816:	e03c      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005824:	461a      	mov	r2, r3
 8005826:	f000 f8f5 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2150      	movs	r1, #80	@ 0x50
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f94e 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005836:	e02c      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005844:	461a      	mov	r2, r3
 8005846:	f000 f914 	bl	8005a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2160      	movs	r1, #96	@ 0x60
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f93e 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005856:	e01c      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005864:	461a      	mov	r2, r3
 8005866:	f000 f8d5 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2140      	movs	r1, #64	@ 0x40
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f92e 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005876:	e00c      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 f925 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005888:	e003      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
      break;
 800588e:	e000      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005890:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a3a      	ldr	r2, [pc, #232]	@ (80059f8 <TIM_Base_SetConfig+0xfc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a37      	ldr	r2, [pc, #220]	@ (80059fc <TIM_Base_SetConfig+0x100>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a36      	ldr	r2, [pc, #216]	@ (8005a00 <TIM_Base_SetConfig+0x104>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a35      	ldr	r2, [pc, #212]	@ (8005a04 <TIM_Base_SetConfig+0x108>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <TIM_Base_SetConfig+0xfc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01b      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005954:	d017      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a28      	ldr	r2, [pc, #160]	@ (80059fc <TIM_Base_SetConfig+0x100>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <TIM_Base_SetConfig+0x104>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00f      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <TIM_Base_SetConfig+0x108>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a25      	ldr	r2, [pc, #148]	@ (8005a08 <TIM_Base_SetConfig+0x10c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a24      	ldr	r2, [pc, #144]	@ (8005a0c <TIM_Base_SetConfig+0x110>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0x8a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a23      	ldr	r2, [pc, #140]	@ (8005a10 <TIM_Base_SetConfig+0x114>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0e      	ldr	r2, [pc, #56]	@ (80059f8 <TIM_Base_SetConfig+0xfc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d103      	bne.n	80059cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d105      	bne.n	80059ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]
  }
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 030a 	bic.w	r3, r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 0210 	bic.w	r2, r3, #16
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	031b      	lsls	r3, r3, #12
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 0307 	orr.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e050      	b.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d013      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	40000c00 	.word	0x40000c00
 8005c20:	40014000 	.word	0x40014000

08005c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e042      	b.n	8005ce4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fe fae4 	bl	8004240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2224      	movs	r2, #36	@ 0x24
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fcdb 	bl	800664c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d112      	bne.n	8005d2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_UART_Receive_IT+0x26>
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00b      	b.n	8005d2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 faba 	bl	800629c <UART_Start_Receive_IT>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	e000      	b.n	8005d2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b0ba      	sub	sp, #232	@ 0xe8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_UART_IRQHandler+0x66>
 8005d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb99 	bl	80064ce <UART_Receive_IT>
      return;
 8005d9c:	e25b      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80de 	beq.w	8005f64 <HAL_UART_IRQHandler+0x22c>
 8005da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80d1 	beq.w	8005f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_UART_IRQHandler+0xae>
 8005dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0xd2>
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	f043 0202 	orr.w	r2, r3, #2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_UART_IRQHandler+0xf6>
 8005e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	f043 0204 	orr.w	r2, r3, #4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <HAL_UART_IRQHandler+0x126>
 8005e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	f043 0208 	orr.w	r2, r3, #8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 81f2 	beq.w	800624c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_UART_IRQHandler+0x14e>
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb24 	bl	80064ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	2b40      	cmp	r3, #64	@ 0x40
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x17a>
 8005eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d04f      	beq.n	8005f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa2c 	bl	8006310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d141      	bne.n	8005f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1d9      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006118 <HAL_UART_IRQHandler+0x3e0>)
 8005f20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe fbf7 	bl	800471a <HAL_DMA_Abort_IT>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	e00e      	b.n	8005f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f994 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	e00a      	b.n	8005f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f990 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e006      	b.n	8005f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f98c 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f5e:	e175      	b.n	800624c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	bf00      	nop
    return;
 8005f62:	e173      	b.n	800624c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f040 814f 	bne.w	800620c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8148 	beq.w	800620c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8141 	beq.w	800620c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b40      	cmp	r3, #64	@ 0x40
 8005fac:	f040 80b6 	bne.w	800611c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8145 	beq.w	8006250 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	f080 813e 	bcs.w	8006250 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe6:	f000 8088 	beq.w	80060fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006000:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006016:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800601a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006022:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800602e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1d9      	bne.n	8005fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006048:	f023 0301 	bic.w	r3, r3, #1
 800604c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3314      	adds	r3, #20
 8006056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800605a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800605e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800606c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e1      	bne.n	8006036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3314      	adds	r3, #20
 8006092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006096:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006098:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800609c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e3      	bne.n	8006072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	330c      	adds	r3, #12
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ca:	f023 0310 	bic.w	r3, r3, #16
 80060ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e3      	bne.n	80060b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe faa0 	bl	800463a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006108:	b29b      	uxth	r3, r3
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f8b7 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006116:	e09b      	b.n	8006250 <HAL_UART_IRQHandler+0x518>
 8006118:	080063d7 	.word	0x080063d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 808e 	beq.w	8006254 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8089 	beq.w	8006254 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006166:	647a      	str	r2, [r7, #68]	@ 0x44
 8006168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800616c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e3      	bne.n	8006142 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	623b      	str	r3, [r7, #32]
   return(result);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3314      	adds	r3, #20
 800619a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800619e:	633a      	str	r2, [r7, #48]	@ 0x30
 80061a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e3      	bne.n	800617a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0310 	bic.w	r3, r3, #16
 80061d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061e4:	61fa      	str	r2, [r7, #28]
 80061e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	69b9      	ldr	r1, [r7, #24]
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	617b      	str	r3, [r7, #20]
   return(result);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e3      	bne.n	80061c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f83d 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800620a:	e023      	b.n	8006254 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_UART_IRQHandler+0x4f4>
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f8ea 	bl	80063fe <UART_Transmit_IT>
    return;
 800622a:	e014      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00e      	beq.n	8006256 <HAL_UART_IRQHandler+0x51e>
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800623c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f92a 	bl	800649e <UART_EndTransmit_IT>
    return;
 800624a:	e004      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
    return;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
      return;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
      return;
 8006254:	bf00      	nop
  }
}
 8006256:	37e8      	adds	r7, #232	@ 0xe8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	88fa      	ldrh	r2, [r7, #6]
 80062ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2222      	movs	r2, #34	@ 0x22
 80062c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0220 	orr.w	r2, r2, #32
 8006300:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b095      	sub	sp, #84	@ 0x54
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006338:	643a      	str	r2, [r7, #64]	@ 0x40
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800633e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e5      	bne.n	8006318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	61fb      	str	r3, [r7, #28]
   return(result);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800636c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800636e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006384:	2b01      	cmp	r3, #1
 8006386:	d119      	bne.n	80063bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	60bb      	str	r3, [r7, #8]
   return(result);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f023 0310 	bic.w	r3, r3, #16
 800639e:	647b      	str	r3, [r7, #68]	@ 0x44
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063a8:	61ba      	str	r2, [r7, #24]
 80063aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	613b      	str	r3, [r7, #16]
   return(result);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063ca:	bf00      	nop
 80063cc:	3754      	adds	r7, #84	@ 0x54
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff ff3d 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b21      	cmp	r3, #33	@ 0x21
 8006410:	d13e      	bne.n	8006490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800641a:	d114      	bne.n	8006446 <UART_Transmit_IT+0x48>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d110      	bne.n	8006446 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	621a      	str	r2, [r3, #32]
 8006444:	e008      	b.n	8006458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	1c59      	adds	r1, r3, #1
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6211      	str	r1, [r2, #32]
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29b      	uxth	r3, r3
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4619      	mov	r1, r3
 8006466:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800647a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800648a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff fecc 	bl	800625c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b08c      	sub	sp, #48	@ 0x30
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b22      	cmp	r3, #34	@ 0x22
 80064e0:	f040 80ae 	bne.w	8006640 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ec:	d117      	bne.n	800651e <UART_Receive_IT+0x50>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d113      	bne.n	800651e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	b29a      	uxth	r2, r3
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	1c9a      	adds	r2, r3, #2
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	629a      	str	r2, [r3, #40]	@ 0x28
 800651c:	e026      	b.n	800656c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006530:	d007      	beq.n	8006542 <UART_Receive_IT+0x74>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <UART_Receive_IT+0x82>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e008      	b.n	8006562 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800655c:	b2da      	uxtb	r2, r3
 800655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006560:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4619      	mov	r1, r3
 800657a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800657c:	2b00      	cmp	r3, #0
 800657e:	d15d      	bne.n	800663c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0220 	bic.w	r2, r2, #32
 800658e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800659e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d135      	bne.n	8006632 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	613b      	str	r3, [r7, #16]
   return(result);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ec:	623a      	str	r2, [r7, #32]
 80065ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e5      	bne.n	80065cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b10      	cmp	r3, #16
 800660c:	d10a      	bne.n	8006624 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fe2a 	bl	8006284 <HAL_UARTEx_RxEventCallback>
 8006630:	e002      	b.n	8006638 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fd f98a 	bl	800394c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	e002      	b.n	8006642 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3730      	adds	r7, #48	@ 0x30
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006650:	b0c0      	sub	sp, #256	@ 0x100
 8006652:	af00      	add	r7, sp, #0
 8006654:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	68d9      	ldr	r1, [r3, #12]
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	ea40 0301 	orr.w	r3, r0, r1
 8006674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	431a      	orrs	r2, r3
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	431a      	orrs	r2, r3
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066a4:	f021 010c 	bic.w	r1, r1, #12
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066b2:	430b      	orrs	r3, r1
 80066b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c6:	6999      	ldr	r1, [r3, #24]
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	ea40 0301 	orr.w	r3, r0, r1
 80066d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b8f      	ldr	r3, [pc, #572]	@ (8006918 <UART_SetConfig+0x2cc>)
 80066dc:	429a      	cmp	r2, r3
 80066de:	d005      	beq.n	80066ec <UART_SetConfig+0xa0>
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b8d      	ldr	r3, [pc, #564]	@ (800691c <UART_SetConfig+0x2d0>)
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d104      	bne.n	80066f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fe fe32 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 80066f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066f4:	e003      	b.n	80066fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066f6:	f7fe fe19 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 80066fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006708:	f040 810c 	bne.w	8006924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800670c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006710:	2200      	movs	r2, #0
 8006712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006716:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800671a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800671e:	4622      	mov	r2, r4
 8006720:	462b      	mov	r3, r5
 8006722:	1891      	adds	r1, r2, r2
 8006724:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006726:	415b      	adcs	r3, r3
 8006728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800672a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800672e:	4621      	mov	r1, r4
 8006730:	eb12 0801 	adds.w	r8, r2, r1
 8006734:	4629      	mov	r1, r5
 8006736:	eb43 0901 	adc.w	r9, r3, r1
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800674a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800674e:	4690      	mov	r8, r2
 8006750:	4699      	mov	r9, r3
 8006752:	4623      	mov	r3, r4
 8006754:	eb18 0303 	adds.w	r3, r8, r3
 8006758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800675c:	462b      	mov	r3, r5
 800675e:	eb49 0303 	adc.w	r3, r9, r3
 8006762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006772:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800677a:	460b      	mov	r3, r1
 800677c:	18db      	adds	r3, r3, r3
 800677e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006780:	4613      	mov	r3, r2
 8006782:	eb42 0303 	adc.w	r3, r2, r3
 8006786:	657b      	str	r3, [r7, #84]	@ 0x54
 8006788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800678c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006790:	f7fa fa1c 	bl	8000bcc <__aeabi_uldivmod>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4b61      	ldr	r3, [pc, #388]	@ (8006920 <UART_SetConfig+0x2d4>)
 800679a:	fba3 2302 	umull	r2, r3, r3, r2
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	011c      	lsls	r4, r3, #4
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	1891      	adds	r1, r2, r2
 80067ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067bc:	415b      	adcs	r3, r3
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067c4:	4641      	mov	r1, r8
 80067c6:	eb12 0a01 	adds.w	sl, r2, r1
 80067ca:	4649      	mov	r1, r9
 80067cc:	eb43 0b01 	adc.w	fp, r3, r1
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e4:	4692      	mov	sl, r2
 80067e6:	469b      	mov	fp, r3
 80067e8:	4643      	mov	r3, r8
 80067ea:	eb1a 0303 	adds.w	r3, sl, r3
 80067ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067f2:	464b      	mov	r3, r9
 80067f4:	eb4b 0303 	adc.w	r3, fp, r3
 80067f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006808:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800680c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006810:	460b      	mov	r3, r1
 8006812:	18db      	adds	r3, r3, r3
 8006814:	643b      	str	r3, [r7, #64]	@ 0x40
 8006816:	4613      	mov	r3, r2
 8006818:	eb42 0303 	adc.w	r3, r2, r3
 800681c:	647b      	str	r3, [r7, #68]	@ 0x44
 800681e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006826:	f7fa f9d1 	bl	8000bcc <__aeabi_uldivmod>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4611      	mov	r1, r2
 8006830:	4b3b      	ldr	r3, [pc, #236]	@ (8006920 <UART_SetConfig+0x2d4>)
 8006832:	fba3 2301 	umull	r2, r3, r3, r1
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	2264      	movs	r2, #100	@ 0x64
 800683a:	fb02 f303 	mul.w	r3, r2, r3
 800683e:	1acb      	subs	r3, r1, r3
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006846:	4b36      	ldr	r3, [pc, #216]	@ (8006920 <UART_SetConfig+0x2d4>)
 8006848:	fba3 2302 	umull	r2, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006854:	441c      	add	r4, r3
 8006856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006860:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006868:	4642      	mov	r2, r8
 800686a:	464b      	mov	r3, r9
 800686c:	1891      	adds	r1, r2, r2
 800686e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006870:	415b      	adcs	r3, r3
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006878:	4641      	mov	r1, r8
 800687a:	1851      	adds	r1, r2, r1
 800687c:	6339      	str	r1, [r7, #48]	@ 0x30
 800687e:	4649      	mov	r1, r9
 8006880:	414b      	adcs	r3, r1
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006890:	4659      	mov	r1, fp
 8006892:	00cb      	lsls	r3, r1, #3
 8006894:	4651      	mov	r1, sl
 8006896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689a:	4651      	mov	r1, sl
 800689c:	00ca      	lsls	r2, r1, #3
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	4642      	mov	r2, r8
 80068a6:	189b      	adds	r3, r3, r2
 80068a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068ac:	464b      	mov	r3, r9
 80068ae:	460a      	mov	r2, r1
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068cc:	460b      	mov	r3, r1
 80068ce:	18db      	adds	r3, r3, r3
 80068d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068d2:	4613      	mov	r3, r2
 80068d4:	eb42 0303 	adc.w	r3, r2, r3
 80068d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068e2:	f7fa f973 	bl	8000bcc <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006920 <UART_SetConfig+0x2d4>)
 80068ec:	fba3 1302 	umull	r1, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	2164      	movs	r1, #100	@ 0x64
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	3332      	adds	r3, #50	@ 0x32
 80068fe:	4a08      	ldr	r2, [pc, #32]	@ (8006920 <UART_SetConfig+0x2d4>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	f003 0207 	and.w	r2, r3, #7
 800690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4422      	add	r2, r4
 8006912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006914:	e106      	b.n	8006b24 <UART_SetConfig+0x4d8>
 8006916:	bf00      	nop
 8006918:	40011000 	.word	0x40011000
 800691c:	40011400 	.word	0x40011400
 8006920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006928:	2200      	movs	r2, #0
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800692e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006936:	4642      	mov	r2, r8
 8006938:	464b      	mov	r3, r9
 800693a:	1891      	adds	r1, r2, r2
 800693c:	6239      	str	r1, [r7, #32]
 800693e:	415b      	adcs	r3, r3
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
 8006942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006946:	4641      	mov	r1, r8
 8006948:	1854      	adds	r4, r2, r1
 800694a:	4649      	mov	r1, r9
 800694c:	eb43 0501 	adc.w	r5, r3, r1
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	00eb      	lsls	r3, r5, #3
 800695a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800695e:	00e2      	lsls	r2, r4, #3
 8006960:	4614      	mov	r4, r2
 8006962:	461d      	mov	r5, r3
 8006964:	4643      	mov	r3, r8
 8006966:	18e3      	adds	r3, r4, r3
 8006968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800696c:	464b      	mov	r3, r9
 800696e:	eb45 0303 	adc.w	r3, r5, r3
 8006972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006982:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006992:	4629      	mov	r1, r5
 8006994:	008b      	lsls	r3, r1, #2
 8006996:	4621      	mov	r1, r4
 8006998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800699c:	4621      	mov	r1, r4
 800699e:	008a      	lsls	r2, r1, #2
 80069a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069a4:	f7fa f912 	bl	8000bcc <__aeabi_uldivmod>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4b60      	ldr	r3, [pc, #384]	@ (8006b30 <UART_SetConfig+0x4e4>)
 80069ae:	fba3 2302 	umull	r2, r3, r3, r2
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	011c      	lsls	r4, r3, #4
 80069b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	1891      	adds	r1, r2, r2
 80069ce:	61b9      	str	r1, [r7, #24]
 80069d0:	415b      	adcs	r3, r3
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069d8:	4641      	mov	r1, r8
 80069da:	1851      	adds	r1, r2, r1
 80069dc:	6139      	str	r1, [r7, #16]
 80069de:	4649      	mov	r1, r9
 80069e0:	414b      	adcs	r3, r1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069f0:	4659      	mov	r1, fp
 80069f2:	00cb      	lsls	r3, r1, #3
 80069f4:	4651      	mov	r1, sl
 80069f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fa:	4651      	mov	r1, sl
 80069fc:	00ca      	lsls	r2, r1, #3
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	4642      	mov	r2, r8
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a30:	4649      	mov	r1, r9
 8006a32:	008b      	lsls	r3, r1, #2
 8006a34:	4641      	mov	r1, r8
 8006a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a3a:	4641      	mov	r1, r8
 8006a3c:	008a      	lsls	r2, r1, #2
 8006a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a42:	f7fa f8c3 	bl	8000bcc <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4b38      	ldr	r3, [pc, #224]	@ (8006b30 <UART_SetConfig+0x4e4>)
 8006a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2264      	movs	r2, #100	@ 0x64
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	1acb      	subs	r3, r1, r3
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	3332      	adds	r3, #50	@ 0x32
 8006a60:	4a33      	ldr	r2, [pc, #204]	@ (8006b30 <UART_SetConfig+0x4e4>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a6c:	441c      	add	r4, r3
 8006a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a72:	2200      	movs	r2, #0
 8006a74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a76:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	1891      	adds	r1, r2, r2
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	415b      	adcs	r3, r3
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	1851      	adds	r1, r2, r1
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	4649      	mov	r1, r9
 8006a94:	414b      	adcs	r3, r1
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	00cb      	lsls	r3, r1, #3
 8006aa8:	4651      	mov	r1, sl
 8006aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aae:	4651      	mov	r1, sl
 8006ab0:	00ca      	lsls	r2, r1, #3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4642      	mov	r2, r8
 8006aba:	189b      	adds	r3, r3, r2
 8006abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006abe:	464b      	mov	r3, r9
 8006ac0:	460a      	mov	r2, r1
 8006ac2:	eb42 0303 	adc.w	r3, r2, r3
 8006ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ad2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	008b      	lsls	r3, r1, #2
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aea:	4641      	mov	r1, r8
 8006aec:	008a      	lsls	r2, r1, #2
 8006aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006af2:	f7fa f86b 	bl	8000bcc <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4b0d      	ldr	r3, [pc, #52]	@ (8006b30 <UART_SetConfig+0x4e4>)
 8006afc:	fba3 1302 	umull	r1, r3, r3, r2
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	2164      	movs	r1, #100	@ 0x64
 8006b04:	fb01 f303 	mul.w	r3, r1, r3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	3332      	adds	r3, #50	@ 0x32
 8006b0e:	4a08      	ldr	r2, [pc, #32]	@ (8006b30 <UART_SetConfig+0x4e4>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	f003 020f 	and.w	r2, r3, #15
 8006b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4422      	add	r2, r4
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b30:	51eb851f 	.word	0x51eb851f

08006b34 <_ZdlPvj>:
 8006b34:	f000 bb98 	b.w	8007268 <_ZdlPv>

08006b38 <_Znwj>:
 8006b38:	2801      	cmp	r0, #1
 8006b3a:	bf38      	it	cc
 8006b3c:	2001      	movcc	r0, #1
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4604      	mov	r4, r0
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fc20 	bl	8007388 <malloc>
 8006b48:	b100      	cbz	r0, 8006b4c <_Znwj+0x14>
 8006b4a:	bd10      	pop	{r4, pc}
 8006b4c:	f000 fb8e 	bl	800726c <_ZSt15get_new_handlerv>
 8006b50:	b908      	cbnz	r0, 8006b56 <_Znwj+0x1e>
 8006b52:	f000 fc11 	bl	8007378 <abort>
 8006b56:	4780      	blx	r0
 8006b58:	e7f3      	b.n	8006b42 <_Znwj+0xa>

08006b5a <_ZNSaIcEC1Ev>:
 8006b5a:	4770      	bx	lr

08006b5c <_ZNSaIcED1Ev>:
 8006b5c:	4770      	bx	lr

08006b5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8006b5e:	68c3      	ldr	r3, [r0, #12]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	60c2      	str	r2, [r0, #12]
 8006b64:	b510      	push	{r4, lr}
 8006b66:	b102      	cbz	r2, 8006b6a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8006b68:	6050      	str	r0, [r2, #4]
 8006b6a:	6842      	ldr	r2, [r0, #4]
 8006b6c:	605a      	str	r2, [r3, #4]
 8006b6e:	680c      	ldr	r4, [r1, #0]
 8006b70:	4284      	cmp	r4, r0
 8006b72:	d103      	bne.n	8006b7c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8006b74:	600b      	str	r3, [r1, #0]
 8006b76:	6098      	str	r0, [r3, #8]
 8006b78:	6043      	str	r3, [r0, #4]
 8006b7a:	bd10      	pop	{r4, pc}
 8006b7c:	6891      	ldr	r1, [r2, #8]
 8006b7e:	4281      	cmp	r1, r0
 8006b80:	bf0c      	ite	eq
 8006b82:	6093      	streq	r3, [r2, #8]
 8006b84:	60d3      	strne	r3, [r2, #12]
 8006b86:	e7f6      	b.n	8006b76 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08006b88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8006b88:	6883      	ldr	r3, [r0, #8]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	6082      	str	r2, [r0, #8]
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	b102      	cbz	r2, 8006b94 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8006b92:	6050      	str	r0, [r2, #4]
 8006b94:	6842      	ldr	r2, [r0, #4]
 8006b96:	605a      	str	r2, [r3, #4]
 8006b98:	680c      	ldr	r4, [r1, #0]
 8006b9a:	4284      	cmp	r4, r0
 8006b9c:	d103      	bne.n	8006ba6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	60d8      	str	r0, [r3, #12]
 8006ba2:	6043      	str	r3, [r0, #4]
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	68d1      	ldr	r1, [r2, #12]
 8006ba8:	4281      	cmp	r1, r0
 8006baa:	bf0c      	ite	eq
 8006bac:	60d3      	streq	r3, [r2, #12]
 8006bae:	6093      	strne	r3, [r2, #8]
 8006bb0:	e7f6      	b.n	8006ba0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08006bb2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8006bb2:	68c3      	ldr	r3, [r0, #12]
 8006bb4:	b123      	cbz	r3, 8006bc0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1fb      	bne.n	8006bb6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8006bbe:	4770      	bx	lr
 8006bc0:	6843      	ldr	r3, [r0, #4]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	4282      	cmp	r2, r0
 8006bc6:	d004      	beq.n	8006bd2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8006bc8:	68c2      	ldr	r2, [r0, #12]
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	bf18      	it	ne
 8006bce:	4618      	movne	r0, r3
 8006bd0:	4770      	bx	lr
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	e7f4      	b.n	8006bc2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08006bd8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8006bd8:	7802      	ldrb	r2, [r0, #0]
 8006bda:	4603      	mov	r3, r0
 8006bdc:	b92a      	cbnz	r2, 8006bea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8006bde:	6842      	ldr	r2, [r0, #4]
 8006be0:	6852      	ldr	r2, [r2, #4]
 8006be2:	4282      	cmp	r2, r0
 8006be4:	d101      	bne.n	8006bea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8006be6:	68d0      	ldr	r0, [r2, #12]
 8006be8:	4770      	bx	lr
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	b122      	cbz	r2, 8006bf8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8006bee:	4610      	mov	r0, r2
 8006bf0:	68d2      	ldr	r2, [r2, #12]
 8006bf2:	2a00      	cmp	r2, #0
 8006bf4:	d1fb      	bne.n	8006bee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8006bf6:	4770      	bx	lr
 8006bf8:	6858      	ldr	r0, [r3, #4]
 8006bfa:	6882      	ldr	r2, [r0, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d000      	beq.n	8006c02 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8006c00:	4770      	bx	lr
 8006c02:	4603      	mov	r3, r0
 8006c04:	6840      	ldr	r0, [r0, #4]
 8006c06:	e7f8      	b.n	8006bfa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08006c08 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8006c08:	f7ff bfd3 	b.w	8006bb2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08006c0c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8006c0c:	f7ff bfe4 	b.w	8006bd8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08006c10 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	461d      	mov	r5, r3
 8006c16:	1d1f      	adds	r7, r3, #4
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8006c1e:	460c      	mov	r4, r1
 8006c20:	604a      	str	r2, [r1, #4]
 8006c22:	700b      	strb	r3, [r1, #0]
 8006c24:	b1a0      	cbz	r0, 8006c50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8006c26:	4295      	cmp	r5, r2
 8006c28:	6091      	str	r1, [r2, #8]
 8006c2a:	d102      	bne.n	8006c32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8006c2c:	6069      	str	r1, [r5, #4]
 8006c2e:	60ec      	str	r4, [r5, #12]
 8006c30:	e003      	b.n	8006c3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8006c32:	68ab      	ldr	r3, [r5, #8]
 8006c34:	4293      	cmp	r3, r2
 8006c36:	bf08      	it	eq
 8006c38:	60a9      	streq	r1, [r5, #8]
 8006c3a:	f04f 0900 	mov.w	r9, #0
 8006c3e:	f04f 0801 	mov.w	r8, #1
 8006c42:	686b      	ldr	r3, [r5, #4]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	d132      	bne.n	8006cae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c50:	60d1      	str	r1, [r2, #12]
 8006c52:	68eb      	ldr	r3, [r5, #12]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d1f0      	bne.n	8006c3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8006c58:	e7e9      	b.n	8006c2e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8006c5a:	68c3      	ldr	r3, [r0, #12]
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d103      	bne.n	8006c68 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7ff ff7c 	bl	8006b5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8006c66:	4604      	mov	r4, r0
 8006c68:	6863      	ldr	r3, [r4, #4]
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f883 8000 	strb.w	r8, [r3]
 8006c70:	4630      	mov	r0, r6
 8006c72:	f886 9000 	strb.w	r9, [r6]
 8006c76:	f7ff ff87 	bl	8006b88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8006c7a:	e7e2      	b.n	8006c42 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8006c7c:	b133      	cbz	r3, 8006c8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	b922      	cbnz	r2, 8006c8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8006c82:	f880 8000 	strb.w	r8, [r0]
 8006c86:	f883 8000 	strb.w	r8, [r3]
 8006c8a:	e021      	b.n	8006cd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8006c8c:	6883      	ldr	r3, [r0, #8]
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	d103      	bne.n	8006c9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7ff ff78 	bl	8006b88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	6863      	ldr	r3, [r4, #4]
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f883 8000 	strb.w	r8, [r3]
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f886 9000 	strb.w	r9, [r6]
 8006ca8:	f7ff ff59 	bl	8006b5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8006cac:	e7c9      	b.n	8006c42 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8006cae:	6860      	ldr	r0, [r4, #4]
 8006cb0:	7802      	ldrb	r2, [r0, #0]
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	d1c8      	bne.n	8006c48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8006cb6:	6846      	ldr	r6, [r0, #4]
 8006cb8:	68b3      	ldr	r3, [r6, #8]
 8006cba:	4283      	cmp	r3, r0
 8006cbc:	d1de      	bne.n	8006c7c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8006cbe:	68f2      	ldr	r2, [r6, #12]
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d0ca      	beq.n	8006c5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8006cc4:	7811      	ldrb	r1, [r2, #0]
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	d1c7      	bne.n	8006c5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8006cca:	2101      	movs	r1, #1
 8006ccc:	7019      	strb	r1, [r3, #0]
 8006cce:	7011      	strb	r1, [r2, #0]
 8006cd0:	f886 9000 	strb.w	r9, [r6]
 8006cd4:	4634      	mov	r4, r6
 8006cd6:	e7b4      	b.n	8006c42 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08006cd8 <_ZSt17__throw_bad_allocv>:
 8006cd8:	b508      	push	{r3, lr}
 8006cda:	f000 fb4d 	bl	8007378 <abort>

08006cde <_ZSt28__throw_bad_array_new_lengthv>:
 8006cde:	b508      	push	{r3, lr}
 8006ce0:	f000 fb4a 	bl	8007378 <abort>

08006ce4 <_ZSt19__throw_logic_errorPKc>:
 8006ce4:	b508      	push	{r3, lr}
 8006ce6:	f000 fb47 	bl	8007378 <abort>

08006cea <_ZSt24__throw_invalid_argumentPKc>:
 8006cea:	b508      	push	{r3, lr}
 8006cec:	f000 fb44 	bl	8007378 <abort>

08006cf0 <_ZSt20__throw_length_errorPKc>:
 8006cf0:	b508      	push	{r3, lr}
 8006cf2:	f000 fb41 	bl	8007378 <abort>

08006cf6 <_ZSt20__throw_out_of_rangePKc>:
 8006cf6:	b508      	push	{r3, lr}
 8006cf8:	f000 fb3e 	bl	8007378 <abort>

08006cfc <_ZSt24__throw_out_of_range_fmtPKcz>:
 8006cfc:	b40f      	push	{r0, r1, r2, r3}
 8006cfe:	b508      	push	{r3, lr}
 8006d00:	f000 fb3a 	bl	8007378 <abort>

08006d04 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006d04:	b10a      	cbz	r2, 8006d0a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006d06:	f000 bd33 	b.w	8007770 <memcpy>
 8006d0a:	4770      	bx	lr

08006d0c <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	460a      	mov	r2, r1
 8006d10:	b111      	cbz	r1, 8006d18 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8006d12:	7819      	ldrb	r1, [r3, #0]
 8006d14:	f7f9 ba64 	b.w	80001e0 <memchr>
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4770      	bx	lr

08006d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8006d1c:	f850 3b08 	ldr.w	r3, [r0], #8
 8006d20:	1a1b      	subs	r3, r3, r0
 8006d22:	4258      	negs	r0, r3
 8006d24:	4158      	adcs	r0, r3
 8006d26:	4770      	bx	lr

08006d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006d28:	b508      	push	{r3, lr}
 8006d2a:	680b      	ldr	r3, [r1, #0]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d30:	d302      	bcc.n	8006d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006d32:	480d      	ldr	r0, [pc, #52]	@ (8006d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006d34:	f7ff ffdc 	bl	8006cf0 <_ZSt20__throw_length_errorPKc>
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d90b      	bls.n	8006d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006d3c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006d40:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006d44:	d206      	bcs.n	8006d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006d46:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006d4a:	bf2a      	itet	cs
 8006d4c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8006d50:	6008      	strcc	r0, [r1, #0]
 8006d52:	600b      	strcs	r3, [r1, #0]
 8006d54:	6808      	ldr	r0, [r1, #0]
 8006d56:	3001      	adds	r0, #1
 8006d58:	d501      	bpl.n	8006d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006d5a:	f7ff ffbd 	bl	8006cd8 <_ZSt17__throw_bad_allocv>
 8006d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d62:	f7ff bee9 	b.w	8006b38 <_Znwj>
 8006d66:	bf00      	nop
 8006d68:	08007898 	.word	0x08007898

08006d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	4604      	mov	r4, r0
 8006d70:	f7ff ffd4 	bl	8006d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006d74:	b920      	cbnz	r0, 8006d80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7c:	f000 ba74 	b.w	8007268 <_ZdlPv>
 8006d80:	bd10      	pop	{r4, pc}
	...

08006d84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8006d84:	b508      	push	{r3, lr}
 8006d86:	4603      	mov	r3, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4298      	cmp	r0, r3
 8006d8e:	4611      	mov	r1, r2
 8006d90:	d903      	bls.n	8006d9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8006d92:	4602      	mov	r2, r0
 8006d94:	4801      	ldr	r0, [pc, #4]	@ (8006d9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8006d96:	f7ff ffb1 	bl	8006cfc <_ZSt24__throw_out_of_range_fmtPKcz>
 8006d9a:	bd08      	pop	{r3, pc}
 8006d9c:	080078b0 	.word	0x080078b0

08006da0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006da0:	6840      	ldr	r0, [r0, #4]
 8006da2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8006da6:	3901      	subs	r1, #1
 8006da8:	1a09      	subs	r1, r1, r0
 8006daa:	4291      	cmp	r1, r2
 8006dac:	b508      	push	{r3, lr}
 8006dae:	d202      	bcs.n	8006db6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff9d 	bl	8006cf0 <_ZSt20__throw_length_errorPKc>
 8006db6:	bd08      	pop	{r3, pc}

08006db8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8006db8:	6803      	ldr	r3, [r0, #0]
 8006dba:	428b      	cmp	r3, r1
 8006dbc:	d806      	bhi.n	8006dcc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8006dbe:	6842      	ldr	r2, [r0, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	bf94      	ite	ls
 8006dc6:	2000      	movls	r0, #0
 8006dc8:	2001      	movhi	r0, #1
 8006dca:	4770      	bx	lr
 8006dcc:	2001      	movs	r0, #1
 8006dce:	4770      	bx	lr

08006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006dd0:	2a01      	cmp	r2, #1
 8006dd2:	b410      	push	{r4}
 8006dd4:	d104      	bne.n	8006de0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006dd6:	780a      	ldrb	r2, [r1, #0]
 8006dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ddc:	7002      	strb	r2, [r0, #0]
 8006dde:	4770      	bx	lr
 8006de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de4:	f7ff bf8e 	b.w	8006d04 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8006de8:	2a01      	cmp	r2, #1
 8006dea:	b430      	push	{r4, r5}
 8006dec:	d103      	bne.n	8006df6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8006dee:	780b      	ldrb	r3, [r1, #0]
 8006df0:	7003      	strb	r3, [r0, #0]
 8006df2:	bc30      	pop	{r4, r5}
 8006df4:	4770      	bx	lr
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	d0fb      	beq.n	8006df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8006dfa:	bc30      	pop	{r4, r5}
 8006dfc:	f000 bc16 	b.w	800762c <memmove>

08006e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8006e00:	b508      	push	{r3, lr}
 8006e02:	1a52      	subs	r2, r2, r1
 8006e04:	f7ff ffe4 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006e08:	bd08      	pop	{r3, pc}

08006e0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006e0a:	b508      	push	{r3, lr}
 8006e0c:	1a52      	subs	r2, r2, r1
 8006e0e:	f7ff ffdf 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006e12:	bd08      	pop	{r3, pc}

08006e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4604      	mov	r4, r0
 8006e18:	4615      	mov	r5, r2
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	4411      	add	r1, r2
 8006e1e:	6862      	ldr	r2, [r4, #4]
 8006e20:	1a52      	subs	r2, r2, r1
 8006e22:	d005      	beq.n	8006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8006e24:	b125      	cbz	r5, 8006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	4419      	add	r1, r3
 8006e2a:	4418      	add	r0, r3
 8006e2c:	f7ff ffdc 	bl	8006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	1b5b      	subs	r3, r3, r5
 8006e36:	2100      	movs	r1, #0
 8006e38:	6063      	str	r3, [r4, #4]
 8006e3a:	54d1      	strb	r1, [r2, r3]
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}

08006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006e3e:	f100 0208 	add.w	r2, r0, #8
 8006e42:	6002      	str	r2, [r0, #0]
 8006e44:	2200      	movs	r2, #0
 8006e46:	6042      	str	r2, [r0, #4]
 8006e48:	7202      	strb	r2, [r0, #8]
 8006e4a:	4770      	bx	lr

08006e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	f100 0708 	add.w	r7, r0, #8
 8006e52:	6007      	str	r7, [r0, #0]
 8006e54:	4605      	mov	r5, r0
 8006e56:	4608      	mov	r0, r1
 8006e58:	460c      	mov	r4, r1
 8006e5a:	f7ff ff5f 	bl	8006d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006e5e:	f104 0608 	add.w	r6, r4, #8
 8006e62:	6862      	ldr	r2, [r4, #4]
 8006e64:	b160      	cbz	r0, 8006e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8006e66:	3201      	adds	r2, #1
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	f7ff ff4a 	bl	8006d04 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8006e70:	6863      	ldr	r3, [r4, #4]
 8006e72:	606b      	str	r3, [r5, #4]
 8006e74:	2300      	movs	r3, #0
 8006e76:	7223      	strb	r3, [r4, #8]
 8006e78:	6026      	str	r6, [r4, #0]
 8006e7a:	6063      	str	r3, [r4, #4]
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	68a3      	ldr	r3, [r4, #8]
 8006e86:	60ab      	str	r3, [r5, #8]
 8006e88:	e7f2      	b.n	8006e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	f7ff ff6d 	bl	8006d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006e92:	4620      	mov	r0, r4
 8006e94:	bd10      	pop	{r4, pc}

08006e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8006e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	f7ff ff3e 	bl	8006d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7ff ff3a 	bl	8006d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006ea8:	b190      	cbz	r0, 8006ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8006eaa:	42a5      	cmp	r5, r4
 8006eac:	d00a      	beq.n	8006ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8006eae:	6862      	ldr	r2, [r4, #4]
 8006eb0:	b11a      	cbz	r2, 8006eba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	6828      	ldr	r0, [r5, #0]
 8006eb6:	f7ff ff8b 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	682a      	ldr	r2, [r5, #0]
 8006ebe:	606b      	str	r3, [r5, #4]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	54d1      	strb	r1, [r2, r3]
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6063      	str	r3, [r4, #4]
 8006eca:	7013      	strb	r3, [r2, #0]
 8006ecc:	4628      	mov	r0, r5
 8006ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed0:	b90e      	cbnz	r6, 8006ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	68af      	ldr	r7, [r5, #8]
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	606b      	str	r3, [r5, #4]
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	60ab      	str	r3, [r5, #8]
 8006ee2:	b110      	cbz	r0, 8006eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8006ee4:	6020      	str	r0, [r4, #0]
 8006ee6:	60a7      	str	r7, [r4, #8]
 8006ee8:	e7ec      	b.n	8006ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8006eea:	f104 0308 	add.w	r3, r4, #8
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	e7e8      	b.n	8006ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08006ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8006ef2:	6800      	ldr	r0, [r0, #0]
 8006ef4:	4770      	bx	lr

08006ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8006ef6:	e9d0 2000 	ldrd	r2, r0, [r0]
 8006efa:	4410      	add	r0, r2
 8006efc:	4770      	bx	lr

08006efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8006efe:	6840      	ldr	r0, [r0, #4]
 8006f00:	4770      	bx	lr

08006f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	f7ff ff09 	bl	8006d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006f0a:	b908      	cbnz	r0, 8006f10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8006f0c:	68a0      	ldr	r0, [r4, #8]
 8006f0e:	bd10      	pop	{r4, pc}
 8006f10:	200f      	movs	r0, #15
 8006f12:	e7fc      	b.n	8006f0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08006f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8006f14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f1a:	461f      	mov	r7, r3
 8006f1c:	6843      	ldr	r3, [r0, #4]
 8006f1e:	eb01 0802 	add.w	r8, r1, r2
 8006f22:	1ab2      	subs	r2, r6, r2
 8006f24:	441a      	add	r2, r3
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	eba3 0908 	sub.w	r9, r3, r8
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	f7ff ffe7 	bl	8006f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006f34:	a901      	add	r1, sp, #4
 8006f36:	4602      	mov	r2, r0
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff fef5 	bl	8006d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006f3e:	4682      	mov	sl, r0
 8006f40:	b11d      	cbz	r5, 8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8006f42:	6821      	ldr	r1, [r4, #0]
 8006f44:	462a      	mov	r2, r5
 8006f46:	f7ff ff43 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f4a:	b137      	cbz	r7, 8006f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8006f4c:	b12e      	cbz	r6, 8006f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8006f4e:	4632      	mov	r2, r6
 8006f50:	4639      	mov	r1, r7
 8006f52:	eb0a 0005 	add.w	r0, sl, r5
 8006f56:	f7ff ff3b 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f5a:	f1b9 0f00 	cmp.w	r9, #0
 8006f5e:	d007      	beq.n	8006f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8006f60:	6821      	ldr	r1, [r4, #0]
 8006f62:	4435      	add	r5, r6
 8006f64:	464a      	mov	r2, r9
 8006f66:	4441      	add	r1, r8
 8006f68:	eb0a 0005 	add.w	r0, sl, r5
 8006f6c:	f7ff ff30 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7ff fefb 	bl	8006d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	f8c4 a000 	str.w	sl, [r4]
 8006f7c:	60a3      	str	r3, [r4, #8]
 8006f7e:	b002      	add	sp, #8
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8006f84:	6800      	ldr	r0, [r0, #0]
 8006f86:	4408      	add	r0, r1
 8006f88:	4770      	bx	lr

08006f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>:
 8006f8a:	b570      	push	{r4, r5, r6, lr}
 8006f8c:	6843      	ldr	r3, [r0, #4]
 8006f8e:	6805      	ldr	r5, [r0, #0]
 8006f90:	1b4e      	subs	r6, r1, r5
 8006f92:	441d      	add	r5, r3
 8006f94:	42aa      	cmp	r2, r5
 8006f96:	4604      	mov	r4, r0
 8006f98:	d105      	bne.n	8006fa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_+0x1c>
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6046      	str	r6, [r0, #4]
 8006f9e:	700a      	strb	r2, [r1, #0]
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	4430      	add	r0, r6
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	1a52      	subs	r2, r2, r1
 8006fa8:	4631      	mov	r1, r6
 8006faa:	f7ff ff33 	bl	8006e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8006fae:	e7f7      	b.n	8006fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_+0x16>

08006fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8006fba:	4614      	mov	r4, r2
 8006fbc:	4689      	mov	r9, r1
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	4b37      	ldr	r3, [pc, #220]	@ (80070a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8006fc6:	f7ff feeb 	bl	8006da0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8006fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fce:	9303      	str	r3, [sp, #12]
 8006fd0:	eba5 0b04 	sub.w	fp, r5, r4
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	eb03 0a0b 	add.w	sl, r3, fp
 8006fda:	f7ff ff92 	bl	8006f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006fde:	4550      	cmp	r0, sl
 8006fe0:	d354      	bcc.n	800708c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8006fe2:	f8d8 6000 	ldr.w	r6, [r8]
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	444e      	add	r6, r9
 8006fea:	4639      	mov	r1, r7
 8006fec:	44a1      	add	r9, r4
 8006fee:	4640      	mov	r0, r8
 8006ff0:	eba3 0909 	sub.w	r9, r3, r9
 8006ff4:	f7ff fee0 	bl	8006db8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8006ff8:	b180      	cbz	r0, 800701c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8006ffa:	f1b9 0f00 	cmp.w	r9, #0
 8006ffe:	d006      	beq.n	800700e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8007000:	42ac      	cmp	r4, r5
 8007002:	d004      	beq.n	800700e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8007004:	464a      	mov	r2, r9
 8007006:	1931      	adds	r1, r6, r4
 8007008:	1970      	adds	r0, r6, r5
 800700a:	f7ff feed 	bl	8006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800700e:	b315      	cbz	r5, 8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007010:	462a      	mov	r2, r5
 8007012:	4639      	mov	r1, r7
 8007014:	4630      	mov	r0, r6
 8007016:	f7ff fedb 	bl	8006dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800701a:	e01c      	b.n	8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800701c:	b135      	cbz	r5, 800702c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 800701e:	42ac      	cmp	r4, r5
 8007020:	d33c      	bcc.n	800709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8007022:	462a      	mov	r2, r5
 8007024:	4639      	mov	r1, r7
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff fede 	bl	8006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800702c:	f1b9 0f00 	cmp.w	r9, #0
 8007030:	d011      	beq.n	8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007032:	42ac      	cmp	r4, r5
 8007034:	d00f      	beq.n	8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007036:	464a      	mov	r2, r9
 8007038:	1931      	adds	r1, r6, r4
 800703a:	1970      	adds	r0, r6, r5
 800703c:	f7ff fed4 	bl	8006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007040:	42ac      	cmp	r4, r5
 8007042:	d208      	bcs.n	8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007044:	4434      	add	r4, r6
 8007046:	197b      	adds	r3, r7, r5
 8007048:	429c      	cmp	r4, r3
 800704a:	d30f      	bcc.n	800706c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 800704c:	462a      	mov	r2, r5
 800704e:	4639      	mov	r1, r7
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff fec9 	bl	8006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007056:	f8d8 3000 	ldr.w	r3, [r8]
 800705a:	f8c8 a004 	str.w	sl, [r8, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	4640      	mov	r0, r8
 8007062:	f803 200a 	strb.w	r2, [r3, sl]
 8007066:	b005      	add	sp, #20
 8007068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706c:	42bc      	cmp	r4, r7
 800706e:	d803      	bhi.n	8007078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8007070:	462a      	mov	r2, r5
 8007072:	eb07 010b 	add.w	r1, r7, fp
 8007076:	e7cd      	b.n	8007014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8007078:	1be4      	subs	r4, r4, r7
 800707a:	4622      	mov	r2, r4
 800707c:	4639      	mov	r1, r7
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff feb2 	bl	8006de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007084:	1b2a      	subs	r2, r5, r4
 8007086:	1971      	adds	r1, r6, r5
 8007088:	1930      	adds	r0, r6, r4
 800708a:	e7c4      	b.n	8007016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800708c:	9500      	str	r5, [sp, #0]
 800708e:	463b      	mov	r3, r7
 8007090:	4622      	mov	r2, r4
 8007092:	4649      	mov	r1, r9
 8007094:	4640      	mov	r0, r8
 8007096:	f7ff ff3d 	bl	8006f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800709a:	e7dc      	b.n	8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800709c:	f1b9 0f00 	cmp.w	r9, #0
 80070a0:	d0d0      	beq.n	8007044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 80070a2:	e7c8      	b.n	8007036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 80070a4:	080078e7 	.word	0x080078e7

080070a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80070a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	460d      	mov	r5, r1
 80070b0:	f7f9 f8e6 	bl	8000280 <strlen>
 80070b4:	9000      	str	r0, [sp, #0]
 80070b6:	6862      	ldr	r2, [r4, #4]
 80070b8:	462b      	mov	r3, r5
 80070ba:	2100      	movs	r1, #0
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff ff77 	bl	8006fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80070c2:	b003      	add	sp, #12
 80070c4:	bd30      	pop	{r4, r5, pc}

080070c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80070c6:	b508      	push	{r3, lr}
 80070c8:	f7ff ffee 	bl	80070a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80070cc:	bd08      	pop	{r3, pc}

080070ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80070ce:	6800      	ldr	r0, [r0, #0]
 80070d0:	4770      	bx	lr

080070d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 80070d2:	6800      	ldr	r0, [r0, #0]
 80070d4:	4770      	bx	lr

080070d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80070d6:	b513      	push	{r0, r1, r4, lr}
 80070d8:	f88d 1007 	strb.w	r1, [sp, #7]
 80070dc:	6841      	ldr	r1, [r0, #4]
 80070de:	428a      	cmp	r2, r1
 80070e0:	4613      	mov	r3, r2
 80070e2:	d20a      	bcs.n	80070fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80070e4:	6804      	ldr	r4, [r0, #0]
 80070e6:	f10d 0207 	add.w	r2, sp, #7
 80070ea:	1ac9      	subs	r1, r1, r3
 80070ec:	18e0      	adds	r0, r4, r3
 80070ee:	f7ff fe0d 	bl	8006d0c <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80070f2:	b110      	cbz	r0, 80070fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80070f4:	1b00      	subs	r0, r0, r4
 80070f6:	b002      	add	sp, #8
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e7fa      	b.n	80070f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08007100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	6845      	ldr	r5, [r0, #4]
 8007104:	684c      	ldr	r4, [r1, #4]
 8007106:	6800      	ldr	r0, [r0, #0]
 8007108:	6809      	ldr	r1, [r1, #0]
 800710a:	42a5      	cmp	r5, r4
 800710c:	462a      	mov	r2, r5
 800710e:	bf28      	it	cs
 8007110:	4622      	movcs	r2, r4
 8007112:	f7fb ff73 	bl	8002ffc <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007116:	b900      	cbnz	r0, 800711a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8007118:	1b28      	subs	r0, r5, r4
 800711a:	bd38      	pop	{r3, r4, r5, pc}

0800711c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	6847      	ldr	r7, [r0, #4]
 8007120:	4605      	mov	r5, r0
 8007122:	4608      	mov	r0, r1
 8007124:	460e      	mov	r6, r1
 8007126:	f7f9 f8ab 	bl	8000280 <strlen>
 800712a:	4287      	cmp	r7, r0
 800712c:	4604      	mov	r4, r0
 800712e:	463a      	mov	r2, r7
 8007130:	4631      	mov	r1, r6
 8007132:	bf28      	it	cs
 8007134:	4602      	movcs	r2, r0
 8007136:	6828      	ldr	r0, [r5, #0]
 8007138:	f7fb ff60 	bl	8002ffc <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800713c:	b900      	cbnz	r0, 8007140 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800713e:	1b38      	subs	r0, r7, r4
 8007140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8007142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007144:	1a53      	subs	r3, r2, r1
 8007146:	2b0f      	cmp	r3, #15
 8007148:	4604      	mov	r4, r0
 800714a:	460d      	mov	r5, r1
 800714c:	4616      	mov	r6, r2
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	d906      	bls.n	8007160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8007152:	2200      	movs	r2, #0
 8007154:	a901      	add	r1, sp, #4
 8007156:	f7ff fde7 	bl	8006d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	6020      	str	r0, [r4, #0]
 800715e:	60a3      	str	r3, [r4, #8]
 8007160:	4632      	mov	r2, r6
 8007162:	4629      	mov	r1, r5
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	f7ff fe4b 	bl	8006e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	2100      	movs	r1, #0
 8007172:	54d1      	strb	r1, [r2, r3]
 8007174:	b002      	add	sp, #8
 8007176:	bd70      	pop	{r4, r5, r6, pc}

08007178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8007178:	f100 0208 	add.w	r2, r0, #8
 800717c:	b510      	push	{r4, lr}
 800717e:	6002      	str	r2, [r0, #0]
 8007180:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007184:	4604      	mov	r4, r0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	440a      	add	r2, r1
 800718c:	f7ff ffd9 	bl	8007142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8007190:	4620      	mov	r0, r4
 8007192:	bd10      	pop	{r4, pc}

08007194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007194:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007196:	1a53      	subs	r3, r2, r1
 8007198:	2b0f      	cmp	r3, #15
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
 800719e:	4616      	mov	r6, r2
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	d906      	bls.n	80071b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 80071a4:	2200      	movs	r2, #0
 80071a6:	a901      	add	r1, sp, #4
 80071a8:	f7ff fdbe 	bl	8006d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	6020      	str	r0, [r4, #0]
 80071b0:	60a3      	str	r3, [r4, #8]
 80071b2:	4632      	mov	r2, r6
 80071b4:	4629      	mov	r1, r5
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	f7ff fe27 	bl	8006e0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	6063      	str	r3, [r4, #4]
 80071c2:	2100      	movs	r1, #0
 80071c4:	54d1      	strb	r1, [r2, r3]
 80071c6:	b002      	add	sp, #8
 80071c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080071cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	4698      	mov	r8, r3
 80071d2:	f100 0308 	add.w	r3, r0, #8
 80071d6:	460d      	mov	r5, r1
 80071d8:	4617      	mov	r7, r2
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	680e      	ldr	r6, [r1, #0]
 80071de:	4a0b      	ldr	r2, [pc, #44]	@ (800720c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 80071e0:	4604      	mov	r4, r0
 80071e2:	4639      	mov	r1, r7
 80071e4:	4628      	mov	r0, r5
 80071e6:	f7ff fdcd 	bl	8006d84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80071ea:	686a      	ldr	r2, [r5, #4]
 80071ec:	1831      	adds	r1, r6, r0
 80071ee:	1bd2      	subs	r2, r2, r7
 80071f0:	4620      	mov	r0, r4
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	4542      	cmp	r2, r8
 80071f8:	bf94      	ite	ls
 80071fa:	188a      	addls	r2, r1, r2
 80071fc:	eb01 0208 	addhi.w	r2, r1, r8
 8007200:	f7ff ffc8 	bl	8007194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007204:	4620      	mov	r0, r4
 8007206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800720a:	bf00      	nop
 800720c:	08007900 	.word	0x08007900

08007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	460d      	mov	r5, r1
 8007214:	4604      	mov	r4, r0
 8007216:	4611      	mov	r1, r2
 8007218:	4628      	mov	r0, r5
 800721a:	4a06      	ldr	r2, [pc, #24]	@ (8007234 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 800721c:	461e      	mov	r6, r3
 800721e:	f7ff fdb1 	bl	8006d84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007222:	4633      	mov	r3, r6
 8007224:	4602      	mov	r2, r0
 8007226:	4629      	mov	r1, r5
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff ffcf 	bl	80071cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 800722e:	4620      	mov	r0, r4
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	bf00      	nop
 8007234:	0800791b 	.word	0x0800791b

08007238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	f100 0308 	add.w	r3, r0, #8
 800723e:	4604      	mov	r4, r0
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	460d      	mov	r5, r1
 8007244:	b911      	cbnz	r1, 800724c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8007246:	4807      	ldr	r0, [pc, #28]	@ (8007264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8007248:	f7ff fd4c 	bl	8006ce4 <_ZSt19__throw_logic_errorPKc>
 800724c:	4608      	mov	r0, r1
 800724e:	f7f9 f817 	bl	8000280 <strlen>
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	182a      	adds	r2, r5, r0
 8007258:	4629      	mov	r1, r5
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff ff9a 	bl	8007194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007260:	4620      	mov	r0, r4
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	08007930 	.word	0x08007930

08007268 <_ZdlPv>:
 8007268:	f000 b896 	b.w	8007398 <free>

0800726c <_ZSt15get_new_handlerv>:
 800726c:	4b02      	ldr	r3, [pc, #8]	@ (8007278 <_ZSt15get_new_handlerv+0xc>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	f3bf 8f5b 	dmb	ish
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	200001d8 	.word	0x200001d8
 800727c:	00000000 	.word	0x00000000

08007280 <floor>:
 8007280:	ec51 0b10 	vmov	r0, r1, d0
 8007284:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007290:	2e13      	cmp	r6, #19
 8007292:	460c      	mov	r4, r1
 8007294:	4605      	mov	r5, r0
 8007296:	4680      	mov	r8, r0
 8007298:	dc34      	bgt.n	8007304 <floor+0x84>
 800729a:	2e00      	cmp	r6, #0
 800729c:	da17      	bge.n	80072ce <floor+0x4e>
 800729e:	a332      	add	r3, pc, #200	@ (adr r3, 8007368 <floor+0xe8>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f8 fffa 	bl	800029c <__adddf3>
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	f7f9 fc3c 	bl	8000b28 <__aeabi_dcmpgt>
 80072b0:	b150      	cbz	r0, 80072c8 <floor+0x48>
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	da55      	bge.n	8007362 <floor+0xe2>
 80072b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80072ba:	432c      	orrs	r4, r5
 80072bc:	2500      	movs	r5, #0
 80072be:	42ac      	cmp	r4, r5
 80072c0:	4c2b      	ldr	r4, [pc, #172]	@ (8007370 <floor+0xf0>)
 80072c2:	bf08      	it	eq
 80072c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80072c8:	4621      	mov	r1, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	e023      	b.n	8007316 <floor+0x96>
 80072ce:	4f29      	ldr	r7, [pc, #164]	@ (8007374 <floor+0xf4>)
 80072d0:	4137      	asrs	r7, r6
 80072d2:	ea01 0307 	and.w	r3, r1, r7
 80072d6:	4303      	orrs	r3, r0
 80072d8:	d01d      	beq.n	8007316 <floor+0x96>
 80072da:	a323      	add	r3, pc, #140	@ (adr r3, 8007368 <floor+0xe8>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f8 ffdc 	bl	800029c <__adddf3>
 80072e4:	2200      	movs	r2, #0
 80072e6:	2300      	movs	r3, #0
 80072e8:	f7f9 fc1e 	bl	8000b28 <__aeabi_dcmpgt>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0eb      	beq.n	80072c8 <floor+0x48>
 80072f0:	2c00      	cmp	r4, #0
 80072f2:	bfbe      	ittt	lt
 80072f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80072f8:	4133      	asrlt	r3, r6
 80072fa:	18e4      	addlt	r4, r4, r3
 80072fc:	ea24 0407 	bic.w	r4, r4, r7
 8007300:	2500      	movs	r5, #0
 8007302:	e7e1      	b.n	80072c8 <floor+0x48>
 8007304:	2e33      	cmp	r6, #51	@ 0x33
 8007306:	dd0a      	ble.n	800731e <floor+0x9e>
 8007308:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800730c:	d103      	bne.n	8007316 <floor+0x96>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	f7f8 ffc3 	bl	800029c <__adddf3>
 8007316:	ec41 0b10 	vmov	d0, r0, r1
 800731a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007322:	f04f 37ff 	mov.w	r7, #4294967295
 8007326:	40df      	lsrs	r7, r3
 8007328:	4207      	tst	r7, r0
 800732a:	d0f4      	beq.n	8007316 <floor+0x96>
 800732c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007368 <floor+0xe8>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ffb3 	bl	800029c <__adddf3>
 8007336:	2200      	movs	r2, #0
 8007338:	2300      	movs	r3, #0
 800733a:	f7f9 fbf5 	bl	8000b28 <__aeabi_dcmpgt>
 800733e:	2800      	cmp	r0, #0
 8007340:	d0c2      	beq.n	80072c8 <floor+0x48>
 8007342:	2c00      	cmp	r4, #0
 8007344:	da0a      	bge.n	800735c <floor+0xdc>
 8007346:	2e14      	cmp	r6, #20
 8007348:	d101      	bne.n	800734e <floor+0xce>
 800734a:	3401      	adds	r4, #1
 800734c:	e006      	b.n	800735c <floor+0xdc>
 800734e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007352:	2301      	movs	r3, #1
 8007354:	40b3      	lsls	r3, r6
 8007356:	441d      	add	r5, r3
 8007358:	4545      	cmp	r5, r8
 800735a:	d3f6      	bcc.n	800734a <floor+0xca>
 800735c:	ea25 0507 	bic.w	r5, r5, r7
 8007360:	e7b2      	b.n	80072c8 <floor+0x48>
 8007362:	2500      	movs	r5, #0
 8007364:	462c      	mov	r4, r5
 8007366:	e7af      	b.n	80072c8 <floor+0x48>
 8007368:	8800759c 	.word	0x8800759c
 800736c:	7e37e43c 	.word	0x7e37e43c
 8007370:	bff00000 	.word	0xbff00000
 8007374:	000fffff 	.word	0x000fffff

08007378 <abort>:
 8007378:	b508      	push	{r3, lr}
 800737a:	2006      	movs	r0, #6
 800737c:	f000 f9a0 	bl	80076c0 <raise>
 8007380:	2001      	movs	r0, #1
 8007382:	f7fb fd07 	bl	8002d94 <_exit>
	...

08007388 <malloc>:
 8007388:	4b02      	ldr	r3, [pc, #8]	@ (8007394 <malloc+0xc>)
 800738a:	4601      	mov	r1, r0
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f000 b82d 	b.w	80073ec <_malloc_r>
 8007392:	bf00      	nop
 8007394:	2000000c 	.word	0x2000000c

08007398 <free>:
 8007398:	4b02      	ldr	r3, [pc, #8]	@ (80073a4 <free+0xc>)
 800739a:	4601      	mov	r1, r0
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	f000 b9f5 	b.w	800778c <_free_r>
 80073a2:	bf00      	nop
 80073a4:	2000000c 	.word	0x2000000c

080073a8 <sbrk_aligned>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4e0f      	ldr	r6, [pc, #60]	@ (80073e8 <sbrk_aligned+0x40>)
 80073ac:	460c      	mov	r4, r1
 80073ae:	6831      	ldr	r1, [r6, #0]
 80073b0:	4605      	mov	r5, r0
 80073b2:	b911      	cbnz	r1, 80073ba <sbrk_aligned+0x12>
 80073b4:	f000 f9a0 	bl	80076f8 <_sbrk_r>
 80073b8:	6030      	str	r0, [r6, #0]
 80073ba:	4621      	mov	r1, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f99b 	bl	80076f8 <_sbrk_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	d103      	bne.n	80073ce <sbrk_aligned+0x26>
 80073c6:	f04f 34ff 	mov.w	r4, #4294967295
 80073ca:	4620      	mov	r0, r4
 80073cc:	bd70      	pop	{r4, r5, r6, pc}
 80073ce:	1cc4      	adds	r4, r0, #3
 80073d0:	f024 0403 	bic.w	r4, r4, #3
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d0f8      	beq.n	80073ca <sbrk_aligned+0x22>
 80073d8:	1a21      	subs	r1, r4, r0
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 f98c 	bl	80076f8 <_sbrk_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d1f2      	bne.n	80073ca <sbrk_aligned+0x22>
 80073e4:	e7ef      	b.n	80073c6 <sbrk_aligned+0x1e>
 80073e6:	bf00      	nop
 80073e8:	200001dc 	.word	0x200001dc

080073ec <_malloc_r>:
 80073ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f0:	1ccd      	adds	r5, r1, #3
 80073f2:	f025 0503 	bic.w	r5, r5, #3
 80073f6:	3508      	adds	r5, #8
 80073f8:	2d0c      	cmp	r5, #12
 80073fa:	bf38      	it	cc
 80073fc:	250c      	movcc	r5, #12
 80073fe:	2d00      	cmp	r5, #0
 8007400:	4606      	mov	r6, r0
 8007402:	db01      	blt.n	8007408 <_malloc_r+0x1c>
 8007404:	42a9      	cmp	r1, r5
 8007406:	d904      	bls.n	8007412 <_malloc_r+0x26>
 8007408:	230c      	movs	r3, #12
 800740a:	6033      	str	r3, [r6, #0]
 800740c:	2000      	movs	r0, #0
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074e8 <_malloc_r+0xfc>
 8007416:	f000 f869 	bl	80074ec <__malloc_lock>
 800741a:	f8d8 3000 	ldr.w	r3, [r8]
 800741e:	461c      	mov	r4, r3
 8007420:	bb44      	cbnz	r4, 8007474 <_malloc_r+0x88>
 8007422:	4629      	mov	r1, r5
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff ffbf 	bl	80073a8 <sbrk_aligned>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	4604      	mov	r4, r0
 800742e:	d158      	bne.n	80074e2 <_malloc_r+0xf6>
 8007430:	f8d8 4000 	ldr.w	r4, [r8]
 8007434:	4627      	mov	r7, r4
 8007436:	2f00      	cmp	r7, #0
 8007438:	d143      	bne.n	80074c2 <_malloc_r+0xd6>
 800743a:	2c00      	cmp	r4, #0
 800743c:	d04b      	beq.n	80074d6 <_malloc_r+0xea>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4639      	mov	r1, r7
 8007442:	4630      	mov	r0, r6
 8007444:	eb04 0903 	add.w	r9, r4, r3
 8007448:	f000 f956 	bl	80076f8 <_sbrk_r>
 800744c:	4581      	cmp	r9, r0
 800744e:	d142      	bne.n	80074d6 <_malloc_r+0xea>
 8007450:	6821      	ldr	r1, [r4, #0]
 8007452:	1a6d      	subs	r5, r5, r1
 8007454:	4629      	mov	r1, r5
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ffa6 	bl	80073a8 <sbrk_aligned>
 800745c:	3001      	adds	r0, #1
 800745e:	d03a      	beq.n	80074d6 <_malloc_r+0xea>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	442b      	add	r3, r5
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	f8d8 3000 	ldr.w	r3, [r8]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	bb62      	cbnz	r2, 80074c8 <_malloc_r+0xdc>
 800746e:	f8c8 7000 	str.w	r7, [r8]
 8007472:	e00f      	b.n	8007494 <_malloc_r+0xa8>
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	1b52      	subs	r2, r2, r5
 8007478:	d420      	bmi.n	80074bc <_malloc_r+0xd0>
 800747a:	2a0b      	cmp	r2, #11
 800747c:	d917      	bls.n	80074ae <_malloc_r+0xc2>
 800747e:	1961      	adds	r1, r4, r5
 8007480:	42a3      	cmp	r3, r4
 8007482:	6025      	str	r5, [r4, #0]
 8007484:	bf18      	it	ne
 8007486:	6059      	strne	r1, [r3, #4]
 8007488:	6863      	ldr	r3, [r4, #4]
 800748a:	bf08      	it	eq
 800748c:	f8c8 1000 	streq.w	r1, [r8]
 8007490:	5162      	str	r2, [r4, r5]
 8007492:	604b      	str	r3, [r1, #4]
 8007494:	4630      	mov	r0, r6
 8007496:	f000 f82f 	bl	80074f8 <__malloc_unlock>
 800749a:	f104 000b 	add.w	r0, r4, #11
 800749e:	1d23      	adds	r3, r4, #4
 80074a0:	f020 0007 	bic.w	r0, r0, #7
 80074a4:	1ac2      	subs	r2, r0, r3
 80074a6:	bf1c      	itt	ne
 80074a8:	1a1b      	subne	r3, r3, r0
 80074aa:	50a3      	strne	r3, [r4, r2]
 80074ac:	e7af      	b.n	800740e <_malloc_r+0x22>
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	bf0c      	ite	eq
 80074b4:	f8c8 2000 	streq.w	r2, [r8]
 80074b8:	605a      	strne	r2, [r3, #4]
 80074ba:	e7eb      	b.n	8007494 <_malloc_r+0xa8>
 80074bc:	4623      	mov	r3, r4
 80074be:	6864      	ldr	r4, [r4, #4]
 80074c0:	e7ae      	b.n	8007420 <_malloc_r+0x34>
 80074c2:	463c      	mov	r4, r7
 80074c4:	687f      	ldr	r7, [r7, #4]
 80074c6:	e7b6      	b.n	8007436 <_malloc_r+0x4a>
 80074c8:	461a      	mov	r2, r3
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	d1fb      	bne.n	80074c8 <_malloc_r+0xdc>
 80074d0:	2300      	movs	r3, #0
 80074d2:	6053      	str	r3, [r2, #4]
 80074d4:	e7de      	b.n	8007494 <_malloc_r+0xa8>
 80074d6:	230c      	movs	r3, #12
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	4630      	mov	r0, r6
 80074dc:	f000 f80c 	bl	80074f8 <__malloc_unlock>
 80074e0:	e794      	b.n	800740c <_malloc_r+0x20>
 80074e2:	6005      	str	r5, [r0, #0]
 80074e4:	e7d6      	b.n	8007494 <_malloc_r+0xa8>
 80074e6:	bf00      	nop
 80074e8:	200001e0 	.word	0x200001e0

080074ec <__malloc_lock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	@ (80074f4 <__malloc_lock+0x8>)
 80074ee:	f000 b93d 	b.w	800776c <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20000320 	.word	0x20000320

080074f8 <__malloc_unlock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	@ (8007500 <__malloc_unlock+0x8>)
 80074fa:	f000 b938 	b.w	800776e <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20000320 	.word	0x20000320

08007504 <_strtol_l.constprop.0>:
 8007504:	2b24      	cmp	r3, #36	@ 0x24
 8007506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800750a:	4686      	mov	lr, r0
 800750c:	4690      	mov	r8, r2
 800750e:	d801      	bhi.n	8007514 <_strtol_l.constprop.0+0x10>
 8007510:	2b01      	cmp	r3, #1
 8007512:	d106      	bne.n	8007522 <_strtol_l.constprop.0+0x1e>
 8007514:	f000 f900 	bl	8007718 <__errno>
 8007518:	2316      	movs	r3, #22
 800751a:	6003      	str	r3, [r0, #0]
 800751c:	2000      	movs	r0, #0
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	4834      	ldr	r0, [pc, #208]	@ (80075f4 <_strtol_l.constprop.0+0xf0>)
 8007524:	460d      	mov	r5, r1
 8007526:	462a      	mov	r2, r5
 8007528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800752c:	5d06      	ldrb	r6, [r0, r4]
 800752e:	f016 0608 	ands.w	r6, r6, #8
 8007532:	d1f8      	bne.n	8007526 <_strtol_l.constprop.0+0x22>
 8007534:	2c2d      	cmp	r4, #45	@ 0x2d
 8007536:	d12d      	bne.n	8007594 <_strtol_l.constprop.0+0x90>
 8007538:	782c      	ldrb	r4, [r5, #0]
 800753a:	2601      	movs	r6, #1
 800753c:	1c95      	adds	r5, r2, #2
 800753e:	f033 0210 	bics.w	r2, r3, #16
 8007542:	d109      	bne.n	8007558 <_strtol_l.constprop.0+0x54>
 8007544:	2c30      	cmp	r4, #48	@ 0x30
 8007546:	d12a      	bne.n	800759e <_strtol_l.constprop.0+0x9a>
 8007548:	782a      	ldrb	r2, [r5, #0]
 800754a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800754e:	2a58      	cmp	r2, #88	@ 0x58
 8007550:	d125      	bne.n	800759e <_strtol_l.constprop.0+0x9a>
 8007552:	786c      	ldrb	r4, [r5, #1]
 8007554:	2310      	movs	r3, #16
 8007556:	3502      	adds	r5, #2
 8007558:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800755c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007560:	2200      	movs	r2, #0
 8007562:	fbbc f9f3 	udiv	r9, ip, r3
 8007566:	4610      	mov	r0, r2
 8007568:	fb03 ca19 	mls	sl, r3, r9, ip
 800756c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007570:	2f09      	cmp	r7, #9
 8007572:	d81b      	bhi.n	80075ac <_strtol_l.constprop.0+0xa8>
 8007574:	463c      	mov	r4, r7
 8007576:	42a3      	cmp	r3, r4
 8007578:	dd27      	ble.n	80075ca <_strtol_l.constprop.0+0xc6>
 800757a:	1c57      	adds	r7, r2, #1
 800757c:	d007      	beq.n	800758e <_strtol_l.constprop.0+0x8a>
 800757e:	4581      	cmp	r9, r0
 8007580:	d320      	bcc.n	80075c4 <_strtol_l.constprop.0+0xc0>
 8007582:	d101      	bne.n	8007588 <_strtol_l.constprop.0+0x84>
 8007584:	45a2      	cmp	sl, r4
 8007586:	db1d      	blt.n	80075c4 <_strtol_l.constprop.0+0xc0>
 8007588:	fb00 4003 	mla	r0, r0, r3, r4
 800758c:	2201      	movs	r2, #1
 800758e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007592:	e7eb      	b.n	800756c <_strtol_l.constprop.0+0x68>
 8007594:	2c2b      	cmp	r4, #43	@ 0x2b
 8007596:	bf04      	itt	eq
 8007598:	782c      	ldrbeq	r4, [r5, #0]
 800759a:	1c95      	addeq	r5, r2, #2
 800759c:	e7cf      	b.n	800753e <_strtol_l.constprop.0+0x3a>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1da      	bne.n	8007558 <_strtol_l.constprop.0+0x54>
 80075a2:	2c30      	cmp	r4, #48	@ 0x30
 80075a4:	bf0c      	ite	eq
 80075a6:	2308      	moveq	r3, #8
 80075a8:	230a      	movne	r3, #10
 80075aa:	e7d5      	b.n	8007558 <_strtol_l.constprop.0+0x54>
 80075ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80075b0:	2f19      	cmp	r7, #25
 80075b2:	d801      	bhi.n	80075b8 <_strtol_l.constprop.0+0xb4>
 80075b4:	3c37      	subs	r4, #55	@ 0x37
 80075b6:	e7de      	b.n	8007576 <_strtol_l.constprop.0+0x72>
 80075b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80075bc:	2f19      	cmp	r7, #25
 80075be:	d804      	bhi.n	80075ca <_strtol_l.constprop.0+0xc6>
 80075c0:	3c57      	subs	r4, #87	@ 0x57
 80075c2:	e7d8      	b.n	8007576 <_strtol_l.constprop.0+0x72>
 80075c4:	f04f 32ff 	mov.w	r2, #4294967295
 80075c8:	e7e1      	b.n	800758e <_strtol_l.constprop.0+0x8a>
 80075ca:	1c53      	adds	r3, r2, #1
 80075cc:	d108      	bne.n	80075e0 <_strtol_l.constprop.0+0xdc>
 80075ce:	2322      	movs	r3, #34	@ 0x22
 80075d0:	f8ce 3000 	str.w	r3, [lr]
 80075d4:	4660      	mov	r0, ip
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	d0a0      	beq.n	800751e <_strtol_l.constprop.0+0x1a>
 80075dc:	1e69      	subs	r1, r5, #1
 80075de:	e006      	b.n	80075ee <_strtol_l.constprop.0+0xea>
 80075e0:	b106      	cbz	r6, 80075e4 <_strtol_l.constprop.0+0xe0>
 80075e2:	4240      	negs	r0, r0
 80075e4:	f1b8 0f00 	cmp.w	r8, #0
 80075e8:	d099      	beq.n	800751e <_strtol_l.constprop.0+0x1a>
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	d1f6      	bne.n	80075dc <_strtol_l.constprop.0+0xd8>
 80075ee:	f8c8 1000 	str.w	r1, [r8]
 80075f2:	e794      	b.n	800751e <_strtol_l.constprop.0+0x1a>
 80075f4:	08007963 	.word	0x08007963

080075f8 <strtol>:
 80075f8:	4613      	mov	r3, r2
 80075fa:	460a      	mov	r2, r1
 80075fc:	4601      	mov	r1, r0
 80075fe:	4802      	ldr	r0, [pc, #8]	@ (8007608 <strtol+0x10>)
 8007600:	6800      	ldr	r0, [r0, #0]
 8007602:	f7ff bf7f 	b.w	8007504 <_strtol_l.constprop.0>
 8007606:	bf00      	nop
 8007608:	2000000c 	.word	0x2000000c

0800760c <memcmp>:
 800760c:	b510      	push	{r4, lr}
 800760e:	3901      	subs	r1, #1
 8007610:	4402      	add	r2, r0
 8007612:	4290      	cmp	r0, r2
 8007614:	d101      	bne.n	800761a <memcmp+0xe>
 8007616:	2000      	movs	r0, #0
 8007618:	e005      	b.n	8007626 <memcmp+0x1a>
 800761a:	7803      	ldrb	r3, [r0, #0]
 800761c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007620:	42a3      	cmp	r3, r4
 8007622:	d001      	beq.n	8007628 <memcmp+0x1c>
 8007624:	1b18      	subs	r0, r3, r4
 8007626:	bd10      	pop	{r4, pc}
 8007628:	3001      	adds	r0, #1
 800762a:	e7f2      	b.n	8007612 <memcmp+0x6>

0800762c <memmove>:
 800762c:	4288      	cmp	r0, r1
 800762e:	b510      	push	{r4, lr}
 8007630:	eb01 0402 	add.w	r4, r1, r2
 8007634:	d902      	bls.n	800763c <memmove+0x10>
 8007636:	4284      	cmp	r4, r0
 8007638:	4623      	mov	r3, r4
 800763a:	d807      	bhi.n	800764c <memmove+0x20>
 800763c:	1e43      	subs	r3, r0, #1
 800763e:	42a1      	cmp	r1, r4
 8007640:	d008      	beq.n	8007654 <memmove+0x28>
 8007642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800764a:	e7f8      	b.n	800763e <memmove+0x12>
 800764c:	4402      	add	r2, r0
 800764e:	4601      	mov	r1, r0
 8007650:	428a      	cmp	r2, r1
 8007652:	d100      	bne.n	8007656 <memmove+0x2a>
 8007654:	bd10      	pop	{r4, pc}
 8007656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800765e:	e7f7      	b.n	8007650 <memmove+0x24>

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <_raise_r>:
 8007670:	291f      	cmp	r1, #31
 8007672:	b538      	push	{r3, r4, r5, lr}
 8007674:	4605      	mov	r5, r0
 8007676:	460c      	mov	r4, r1
 8007678:	d904      	bls.n	8007684 <_raise_r+0x14>
 800767a:	2316      	movs	r3, #22
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	f04f 30ff 	mov.w	r0, #4294967295
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007686:	b112      	cbz	r2, 800768e <_raise_r+0x1e>
 8007688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800768c:	b94b      	cbnz	r3, 80076a2 <_raise_r+0x32>
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f830 	bl	80076f4 <_getpid_r>
 8007694:	4622      	mov	r2, r4
 8007696:	4601      	mov	r1, r0
 8007698:	4628      	mov	r0, r5
 800769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800769e:	f000 b817 	b.w	80076d0 <_kill_r>
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d00a      	beq.n	80076bc <_raise_r+0x4c>
 80076a6:	1c59      	adds	r1, r3, #1
 80076a8:	d103      	bne.n	80076b2 <_raise_r+0x42>
 80076aa:	2316      	movs	r3, #22
 80076ac:	6003      	str	r3, [r0, #0]
 80076ae:	2001      	movs	r0, #1
 80076b0:	e7e7      	b.n	8007682 <_raise_r+0x12>
 80076b2:	2100      	movs	r1, #0
 80076b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076b8:	4620      	mov	r0, r4
 80076ba:	4798      	blx	r3
 80076bc:	2000      	movs	r0, #0
 80076be:	e7e0      	b.n	8007682 <_raise_r+0x12>

080076c0 <raise>:
 80076c0:	4b02      	ldr	r3, [pc, #8]	@ (80076cc <raise+0xc>)
 80076c2:	4601      	mov	r1, r0
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	f7ff bfd3 	b.w	8007670 <_raise_r>
 80076ca:	bf00      	nop
 80076cc:	2000000c 	.word	0x2000000c

080076d0 <_kill_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d07      	ldr	r5, [pc, #28]	@ (80076f0 <_kill_r+0x20>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	4611      	mov	r1, r2
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	f7fb fb49 	bl	8002d74 <_kill>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d102      	bne.n	80076ec <_kill_r+0x1c>
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	b103      	cbz	r3, 80076ec <_kill_r+0x1c>
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop
 80076f0:	2000031c 	.word	0x2000031c

080076f4 <_getpid_r>:
 80076f4:	f7fb bb36 	b.w	8002d64 <_getpid>

080076f8 <_sbrk_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d06      	ldr	r5, [pc, #24]	@ (8007714 <_sbrk_r+0x1c>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	f7fb fb52 	bl	8002dac <_sbrk>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_sbrk_r+0x1a>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_sbrk_r+0x1a>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	2000031c 	.word	0x2000031c

08007718 <__errno>:
 8007718:	4b01      	ldr	r3, [pc, #4]	@ (8007720 <__errno+0x8>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	2000000c 	.word	0x2000000c

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	4d0d      	ldr	r5, [pc, #52]	@ (800775c <__libc_init_array+0x38>)
 8007728:	4c0d      	ldr	r4, [pc, #52]	@ (8007760 <__libc_init_array+0x3c>)
 800772a:	1b64      	subs	r4, r4, r5
 800772c:	10a4      	asrs	r4, r4, #2
 800772e:	2600      	movs	r6, #0
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	4d0b      	ldr	r5, [pc, #44]	@ (8007764 <__libc_init_array+0x40>)
 8007736:	4c0c      	ldr	r4, [pc, #48]	@ (8007768 <__libc_init_array+0x44>)
 8007738:	f000 f872 	bl	8007820 <_init>
 800773c:	1b64      	subs	r4, r4, r5
 800773e:	10a4      	asrs	r4, r4, #2
 8007740:	2600      	movs	r6, #0
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f855 3b04 	ldr.w	r3, [r5], #4
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f855 3b04 	ldr.w	r3, [r5], #4
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	08007a6c 	.word	0x08007a6c
 8007760:	08007a6c 	.word	0x08007a6c
 8007764:	08007a6c 	.word	0x08007a6c
 8007768:	08007a78 	.word	0x08007a78

0800776c <__retarget_lock_acquire_recursive>:
 800776c:	4770      	bx	lr

0800776e <__retarget_lock_release_recursive>:
 800776e:	4770      	bx	lr

08007770 <memcpy>:
 8007770:	440a      	add	r2, r1
 8007772:	4291      	cmp	r1, r2
 8007774:	f100 33ff 	add.w	r3, r0, #4294967295
 8007778:	d100      	bne.n	800777c <memcpy+0xc>
 800777a:	4770      	bx	lr
 800777c:	b510      	push	{r4, lr}
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007786:	4291      	cmp	r1, r2
 8007788:	d1f9      	bne.n	800777e <memcpy+0xe>
 800778a:	bd10      	pop	{r4, pc}

0800778c <_free_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4605      	mov	r5, r0
 8007790:	2900      	cmp	r1, #0
 8007792:	d041      	beq.n	8007818 <_free_r+0x8c>
 8007794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007798:	1f0c      	subs	r4, r1, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfb8      	it	lt
 800779e:	18e4      	addlt	r4, r4, r3
 80077a0:	f7ff fea4 	bl	80074ec <__malloc_lock>
 80077a4:	4a1d      	ldr	r2, [pc, #116]	@ (800781c <_free_r+0x90>)
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	b933      	cbnz	r3, 80077b8 <_free_r+0x2c>
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	6014      	str	r4, [r2, #0]
 80077ae:	4628      	mov	r0, r5
 80077b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b4:	f7ff bea0 	b.w	80074f8 <__malloc_unlock>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d908      	bls.n	80077ce <_free_r+0x42>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	1821      	adds	r1, r4, r0
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1809      	addeq	r1, r1, r0
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	e7ed      	b.n	80077aa <_free_r+0x1e>
 80077ce:	461a      	mov	r2, r3
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b10b      	cbz	r3, 80077d8 <_free_r+0x4c>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d9fa      	bls.n	80077ce <_free_r+0x42>
 80077d8:	6811      	ldr	r1, [r2, #0]
 80077da:	1850      	adds	r0, r2, r1
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d10b      	bne.n	80077f8 <_free_r+0x6c>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	4401      	add	r1, r0
 80077e4:	1850      	adds	r0, r2, r1
 80077e6:	4283      	cmp	r3, r0
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	d1e0      	bne.n	80077ae <_free_r+0x22>
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6053      	str	r3, [r2, #4]
 80077f2:	4408      	add	r0, r1
 80077f4:	6010      	str	r0, [r2, #0]
 80077f6:	e7da      	b.n	80077ae <_free_r+0x22>
 80077f8:	d902      	bls.n	8007800 <_free_r+0x74>
 80077fa:	230c      	movs	r3, #12
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	e7d6      	b.n	80077ae <_free_r+0x22>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	1821      	adds	r1, r4, r0
 8007804:	428b      	cmp	r3, r1
 8007806:	bf04      	itt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	bf04      	itt	eq
 8007810:	1809      	addeq	r1, r1, r0
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	6054      	str	r4, [r2, #4]
 8007816:	e7ca      	b.n	80077ae <_free_r+0x22>
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	200001e0 	.word	0x200001e0

08007820 <_init>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr

0800782c <_fini>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr
