
PWM_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003300  08003300  00004300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800332c  0800332c  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  0800332c  0800332c  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800332c  0800332c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800332c  0800332c  0000432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003330  08003330  00004330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003334  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  20000010  08003344  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  08003344  00005908  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e598  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a9  00000000  00000000  000135d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00015d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  00016ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018959  00000000  00000000  0001753b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f0f  00000000  00000000  0002fe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b435  00000000  00000000  00040da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc1d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f0  00000000  00000000  000cc21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000cf80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080032e8 	.word	0x080032e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080032e8 	.word	0x080032e8

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200c      	movs	r0, #12
 8000170:	f000 feff 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000174:	200c      	movs	r0, #12
 8000176:	f000 ff18 	bl	8000faa <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <PushButtons_Init>:


// Push_Buttons Init function:
void PushButtons_Init(Leds_HandleTypeDef *hleds, GPIO_TypeDef *button_led1Port, uint16_t button_led1Pin, GPIO_TypeDef *button_led2Port, uint16_t button_led2Pin,
		GPIO_TypeDef *push_button1Port, uint16_t push_button1Pin, GPIO_TypeDef *push_button2Port, uint16_t push_button2Pin)
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	60f8      	str	r0, [r7, #12]
 8000190:	60b9      	str	r1, [r7, #8]
 8000192:	603b      	str	r3, [r7, #0]
 8000194:	4613      	mov	r3, r2
 8000196:	80fb      	strh	r3, [r7, #6]
hleds->button_led1Port = button_led1Port;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	68ba      	ldr	r2, [r7, #8]
 800019c:	601a      	str	r2, [r3, #0]
hleds->button_led1Pin = button_led1Pin;
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	88fa      	ldrh	r2, [r7, #6]
 80001a2:	809a      	strh	r2, [r3, #4]

hleds->button_led2Port = button_led2Port;
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	683a      	ldr	r2, [r7, #0]
 80001a8:	611a      	str	r2, [r3, #16]
hleds->button_led2Pin = button_led2Pin;
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	8b3a      	ldrh	r2, [r7, #24]
 80001ae:	829a      	strh	r2, [r3, #20]

hleds->push_button1Port = push_button1Port;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	69fa      	ldr	r2, [r7, #28]
 80001b4:	609a      	str	r2, [r3, #8]
hleds->push_button1Pin = push_button1Pin;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	8c3a      	ldrh	r2, [r7, #32]
 80001ba:	819a      	strh	r2, [r3, #12]

hleds->push_button2Port = push_button2Port;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80001c0:	619a      	str	r2, [r3, #24]
hleds->push_button2Pin = push_button2Pin;
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80001c6:	839a      	strh	r2, [r3, #28]
}
 80001c8:	bf00      	nop
 80001ca:	3714      	adds	r7, #20
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
	...

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	4b4c      	ldr	r3, [pc, #304]	@ (800031c <MX_GPIO_Init+0x148>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a4b      	ldr	r2, [pc, #300]	@ (800031c <MX_GPIO_Init+0x148>)
 80001ee:	f043 0310 	orr.w	r3, r3, #16
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b49      	ldr	r3, [pc, #292]	@ (800031c <MX_GPIO_Init+0x148>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f003 0310 	and.w	r3, r3, #16
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000200:	4b46      	ldr	r3, [pc, #280]	@ (800031c <MX_GPIO_Init+0x148>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a45      	ldr	r2, [pc, #276]	@ (800031c <MX_GPIO_Init+0x148>)
 8000206:	f043 0320 	orr.w	r3, r3, #32
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b43      	ldr	r3, [pc, #268]	@ (800031c <MX_GPIO_Init+0x148>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0320 	and.w	r3, r3, #32
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000218:	4b40      	ldr	r3, [pc, #256]	@ (800031c <MX_GPIO_Init+0x148>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a3f      	ldr	r2, [pc, #252]	@ (800031c <MX_GPIO_Init+0x148>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b3d      	ldr	r3, [pc, #244]	@ (800031c <MX_GPIO_Init+0x148>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0304 	and.w	r3, r3, #4
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000230:	4b3a      	ldr	r3, [pc, #232]	@ (800031c <MX_GPIO_Init+0x148>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a39      	ldr	r2, [pc, #228]	@ (800031c <MX_GPIO_Init+0x148>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b37      	ldr	r3, [pc, #220]	@ (800031c <MX_GPIO_Init+0x148>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0308 	and.w	r3, r3, #8
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON_LED1_Pin|BUTTON_LED2_Pin|ENABLE_Pin|DIRECTION_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f640 4103 	movw	r1, #3075	@ 0xc03
 800024e:	4834      	ldr	r0, [pc, #208]	@ (8000320 <MX_GPIO_Init+0x14c>)
 8000250:	f001 fab0 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2120      	movs	r1, #32
 8000258:	4832      	ldr	r0, [pc, #200]	@ (8000324 <MX_GPIO_Init+0x150>)
 800025a:	f001 faab 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800025e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000264:	4b30      	ldr	r3, [pc, #192]	@ (8000328 <MX_GPIO_Init+0x154>)
 8000266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	482b      	ldr	r0, [pc, #172]	@ (8000320 <MX_GPIO_Init+0x14c>)
 8000274:	f001 f91a 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_LED1_Pin|BUTTON_LED2_Pin|ENABLE_Pin|DIRECTION_Pin;
 8000278:	f640 4303 	movw	r3, #3075	@ 0xc03
 800027c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027e:	2301      	movs	r3, #1
 8000280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	2302      	movs	r3, #2
 8000288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	4619      	mov	r1, r3
 8000290:	4823      	ldr	r0, [pc, #140]	@ (8000320 <MX_GPIO_Init+0x14c>)
 8000292:	f001 f90b 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON1_Pin|PUSH_BUTTON2_Pin;
 8000296:	230c      	movs	r3, #12
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800029a:	4b24      	ldr	r3, [pc, #144]	@ (800032c <MX_GPIO_Init+0x158>)
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	4619      	mov	r1, r3
 80002a8:	481d      	ldr	r0, [pc, #116]	@ (8000320 <MX_GPIO_Init+0x14c>)
 80002aa:	f001 f8ff 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ae:	2320      	movs	r3, #32
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	4619      	mov	r1, r3
 80002c4:	4817      	ldr	r0, [pc, #92]	@ (8000324 <MX_GPIO_Init+0x150>)
 80002c6:	f001 f8f1 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80002ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	4810      	ldr	r0, [pc, #64]	@ (8000320 <MX_GPIO_Init+0x14c>)
 80002e0:	f001 f8e4 	bl	80014ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2100      	movs	r1, #0
 80002e8:	2008      	movs	r0, #8
 80002ea:	f000 fe42 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002ee:	2008      	movs	r0, #8
 80002f0:	f000 fe5b 	bl	8000faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2100      	movs	r1, #0
 80002f8:	2009      	movs	r0, #9
 80002fa:	f000 fe3a 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002fe:	2009      	movs	r0, #9
 8000300:	f000 fe53 	bl	8000faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	2100      	movs	r1, #0
 8000308:	2028      	movs	r0, #40	@ 0x28
 800030a:	f000 fe32 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800030e:	2028      	movs	r0, #40	@ 0x28
 8000310:	f000 fe4b 	bl	8000faa <HAL_NVIC_EnableIRQ>

}
 8000314:	bf00      	nop
 8000316:	3720      	adds	r7, #32
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40021000 	.word	0x40021000
 8000320:	40011000 	.word	0x40011000
 8000324:	40010800 	.word	0x40010800
 8000328:	10110000 	.word	0x10110000
 800032c:	10210000 	.word	0x10210000

08000330 <HAL_TIM_PWM_PulseFinishedCallback>:
extern volatile uint16_t counterAnimation;
extern uint8_t f_move;

// Callback - after data sending:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	@ (8000358 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000342:	2100      	movs	r1, #0
 8000344:	4805      	ldr	r0, [pc, #20]	@ (800035c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000346:	f002 f867 	bl	8002418 <HAL_TIM_PWM_Stop_DMA>
		flag_data_sent=1;
 800034a:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
	}
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40012c00 	.word	0x40012c00
 800035c:	200007e8 	.word	0x200007e8
 8000360:	2000002c 	.word	0x2000002c

08000364 <Set_LED>:

// Led colors settings:
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	b299      	uxth	r1, r3
 8000376:	4a10      	ldr	r2, [pc, #64]	@ (80003b8 <Set_LED+0x54>)
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	LED_Data[LEDnum][1] = Green;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	b299      	uxth	r1, r3
 8000382:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <Set_LED+0x54>)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4413      	add	r3, r2
 800038a:	460a      	mov	r2, r1
 800038c:	805a      	strh	r2, [r3, #2]
	LED_Data[LEDnum][2] = Red;
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	b299      	uxth	r1, r3
 8000392:	4a09      	ldr	r2, [pc, #36]	@ (80003b8 <Set_LED+0x54>)
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	4413      	add	r3, r2
 800039a:	460a      	mov	r2, r1
 800039c:	809a      	strh	r2, [r3, #4]
	LED_Data[LEDnum][3] = Blue;
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	b299      	uxth	r1, r3
 80003a2:	4a05      	ldr	r2, [pc, #20]	@ (80003b8 <Set_LED+0x54>)
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	460a      	mov	r2, r1
 80003ac:	80da      	strh	r2, [r3, #6]
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000030 	.word	0x20000030

080003bc <Set_Brightness>:

// (optional) Set Brightness [0 - 0%, 45 - 100%]:
#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
	...

080003d0 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

// Data sending:
void WS2812_Send (void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
 80003de:	e036      	b.n	800044e <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80003e0:	4a2e      	ldr	r2, [pc, #184]	@ (800049c <WS2812_Send+0xcc>)
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	00db      	lsls	r3, r3, #3
 80003e6:	4413      	add	r3, r2
 80003e8:	885b      	ldrh	r3, [r3, #2]
 80003ea:	041a      	lsls	r2, r3, #16
 80003ec:	492b      	ldr	r1, [pc, #172]	@ (800049c <WS2812_Send+0xcc>)
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	440b      	add	r3, r1
 80003f4:	889b      	ldrh	r3, [r3, #4]
 80003f6:	021b      	lsls	r3, r3, #8
 80003f8:	431a      	orrs	r2, r3
 80003fa:	4928      	ldr	r1, [pc, #160]	@ (800049c <WS2812_Send+0xcc>)
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	440b      	add	r3, r1
 8000402:	88db      	ldrh	r3, [r3, #6]
 8000404:	4313      	orrs	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000408:	2317      	movs	r3, #23
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e019      	b.n	8000442 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800040e:	2201      	movs	r2, #1
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4013      	ands	r3, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	d005      	beq.n	800042c <WS2812_Send+0x5c>
			{
				pwmData[indx] = 76;  //56% //2/3 of 90 (period) //56
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <WS2812_Send+0xd0>)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	214c      	movs	r1, #76	@ 0x4c
 8000426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800042a:	e004      	b.n	8000436 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 32;  //28% (period = 100) //1/3 of 90 (period) //28
 800042c:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <WS2812_Send+0xd0>)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	2120      	movs	r1, #32
 8000432:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	3b01      	subs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	dae2      	bge.n	800040e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	3301      	adds	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	2b1f      	cmp	r3, #31
 8000452:	ddc5      	ble.n	80003e0 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	e00a      	b.n	8000470 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800045a:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <WS2812_Send+0xd0>)
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	2100      	movs	r1, #0
 8000460:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	3301      	adds	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	3301      	adds	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	2b31      	cmp	r3, #49	@ 0x31
 8000474:	ddf1      	ble.n	800045a <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	b29b      	uxth	r3, r3
 800047a:	4a09      	ldr	r2, [pc, #36]	@ (80004a0 <WS2812_Send+0xd0>)
 800047c:	2100      	movs	r1, #0
 800047e:	4809      	ldr	r0, [pc, #36]	@ (80004a4 <WS2812_Send+0xd4>)
 8000480:	f001 fe28 	bl	80020d4 <HAL_TIM_PWM_Start_DMA>
	while (!flag_data_sent){};
 8000484:	bf00      	nop
 8000486:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <WS2812_Send+0xd8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0fb      	beq.n	8000486 <WS2812_Send+0xb6>
	flag_data_sent = 0;
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <WS2812_Send+0xd8>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
}
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000030 	.word	0x20000030
 80004a0:	20000130 	.word	0x20000130
 80004a4:	200007e8 	.word	0x200007e8
 80004a8:	2000002c 	.word	0x2000002c

080004ac <Reset_LEDs>:

// LED reseting:
void Reset_LEDs (void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
Set_WS2812_Button(1, 0, 0, 0);
 80004b0:	2300      	movs	r3, #0
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 f808 	bl	80004cc <Set_WS2812_Button>
Set_WS2812_Button(2, 0, 0, 0);
 80004bc:	2300      	movs	r3, #0
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 f802 	bl	80004cc <Set_WS2812_Button>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Set_WS2812_Button>:

// Set WS2812:
void Set_WS2812_Button(uint8_t button_num, int Red, int Green, int Blue)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	4603      	mov	r3, r0
 80004da:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i <16; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	e011      	b.n	8000506 <Set_WS2812_Button+0x3a>
	{
		Set_Brightness(15);
 80004e2:	200f      	movs	r0, #15
 80004e4:	f7ff ff6a 	bl	80003bc <Set_Brightness>
		int lednum = 16*(button_num - 1)+i;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	011b      	lsls	r3, r3, #4
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	4413      	add	r3, r2
 80004f2:	613b      	str	r3, [r7, #16]
		Set_LED(lednum, Red, Green, Blue);
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	68b9      	ldr	r1, [r7, #8]
 80004fa:	6938      	ldr	r0, [r7, #16]
 80004fc:	f7ff ff32 	bl	8000364 <Set_LED>
	for(int i = 0; i <16; i++)
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	3301      	adds	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	2b0f      	cmp	r3, #15
 800050a:	ddea      	ble.n	80004e2 <Set_WS2812_Button+0x16>
	}
	WS2812_Send();
 800050c:	f7ff ff60 	bl	80003d0 <WS2812_Send>

}
 8000510:	bf00      	nop
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fbef 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f85b 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f7ff fe55 	bl	80001d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f7ff fe0f 	bl	800014c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800052e:	f000 fb59 	bl	8000be4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000532:	f000 fa31 	bl	8000998 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000536:	f000 f9ad 	bl	8000894 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800053a:	f001 fd2b 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 800053e:	4603      	mov	r3, r0
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <main+0xb0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	099b      	lsrs	r3, r3, #6
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fd3c 	bl	8000fc6 <HAL_SYSTICK_Config>
  Motor_Init(&hMotor, &htim4, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin, DIRECTION_GPIO_Port, DIRECTION_Pin, BUTTON_GPIO_Port, BUTTON_Pin);
 800054e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000552:	9304      	str	r3, [sp, #16]
 8000554:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <main+0xb4>)
 8000556:	9303      	str	r3, [sp, #12]
 8000558:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <main+0xb4>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <main+0xb4>)
 800056a:	2200      	movs	r2, #0
 800056c:	4918      	ldr	r1, [pc, #96]	@ (80005d0 <main+0xb8>)
 800056e:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <main+0xbc>)
 8000570:	f000 f87c 	bl	800066c <Motor_Init>
  PushButtons_Init(&hLeds, BUTTON_LED1_GPIO_Port, BUTTON_LED1_Pin, BUTTON_LED2_GPIO_Port, BUTTON_LED2_Pin, PUSH_BUTTON1_GPIO_Port, PUSH_BUTTON1_Pin, PUSH_BUTTON2_GPIO_Port, PUSH_BUTTON2_Pin);
 8000574:	2308      	movs	r3, #8
 8000576:	9304      	str	r3, [sp, #16]
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <main+0xb4>)
 800057a:	9303      	str	r3, [sp, #12]
 800057c:	2304      	movs	r3, #4
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <main+0xb4>)
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <main+0xb4>)
 800058a:	2201      	movs	r2, #1
 800058c:	490f      	ldr	r1, [pc, #60]	@ (80005cc <main+0xb4>)
 800058e:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <main+0xc0>)
 8000590:	f7ff fdfa 	bl	8000188 <PushButtons_Init>
  Reset_LEDs();
 8000594:	f7ff ff8a 	bl	80004ac <Reset_LEDs>
  Motor_Enable(&hMotor, 1); // Turn Motor ON
 8000598:	2101      	movs	r1, #1
 800059a:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <main+0xbc>)
 800059c:	f000 f892 	bl	80006c4 <Motor_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Set_LED(0, 0, 55, 0);
 80005a0:	2300      	movs	r3, #0
 80005a2:	2237      	movs	r2, #55	@ 0x37
 80005a4:	2100      	movs	r1, #0
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff fedc 	bl	8000364 <Set_LED>
	  Set_LED(1, 0, 55, 0);
 80005ac:	2300      	movs	r3, #0
 80005ae:	2237      	movs	r2, #55	@ 0x37
 80005b0:	2100      	movs	r1, #0
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff fed6 	bl	8000364 <Set_LED>
	  Set_Brightness(45);
 80005b8:	202d      	movs	r0, #45	@ 0x2d
 80005ba:	f7ff feff 	bl	80003bc <Set_Brightness>
	  WS2812_Send();
 80005be:	f7ff ff07 	bl	80003d0 <WS2812_Send>
	  Set_LED(0, 0, 55, 0);
 80005c2:	bf00      	nop
 80005c4:	e7ec      	b.n	80005a0 <main+0x88>
 80005c6:	bf00      	nop
 80005c8:	10624dd3 	.word	0x10624dd3
 80005cc:	40011000 	.word	0x40011000
 80005d0:	20000830 	.word	0x20000830
 80005d4:	20000794 	.word	0x20000794
 80005d8:	200007c0 	.word	0x200007c0

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b090      	sub	sp, #64	@ 0x40
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2228      	movs	r2, #40	@ 0x28
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fe50 	bl	8003290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2310      	movs	r3, #16
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800060e:	2300      	movs	r3, #0
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000612:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f8f9 	bl	8001814 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000628:	f000 f819 	bl	800065e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fb66 	bl	8001d18 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000652:	f000 f804 	bl	800065e <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3740      	adds	r7, #64	@ 0x40
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000662:	b672      	cpsid	i
}
 8000664:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <Error_Handler+0x8>
	...

0800066c <Motor_Init>:

// Motor Init function:
void Motor_Init(Motor_HandleTypeDef *hmotor, TIM_HandleTypeDef *htim, uint32_t channel,
                 GPIO_TypeDef *enablePort, uint16_t enablePin,
                 GPIO_TypeDef *directionPort, uint16_t directionPin, GPIO_TypeDef *buttonPort, uint16_t buttonPin)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
    hmotor->htim = htim;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	601a      	str	r2, [r3, #0]
    hmotor->channel = channel;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	605a      	str	r2, [r3, #4]

    hmotor->enablePort = enablePort;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	609a      	str	r2, [r3, #8]
    hmotor->enablePin = enablePin;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	8b3a      	ldrh	r2, [r7, #24]
 8000690:	819a      	strh	r2, [r3, #12]

    hmotor->directionPort = directionPort;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	69fa      	ldr	r2, [r7, #28]
 8000696:	611a      	str	r2, [r3, #16]
    hmotor->directionPin = directionPin;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	8c3a      	ldrh	r2, [r7, #32]
 800069c:	829a      	strh	r2, [r3, #20]

    hmotor->buttonPort = buttonPort;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a2:	619a      	str	r2, [r3, #24]
    hmotor->buttonPin = buttonPin;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80006a8:	839a      	strh	r2, [r3, #28]

    hmotor->frequency = 0;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
    hmotor->step_angle = 1.8f;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a03      	ldr	r2, [pc, #12]	@ (80006c0 <Motor_Init+0x54>)
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	3fe66666 	.word	0x3fe66666

080006c4 <Motor_Enable>:

// Enable Microstep Driver:
void Motor_Enable(Motor_HandleTypeDef *hmotor, uint8_t enable)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(hmotor->enablePort, hmotor->enablePin, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6898      	ldr	r0, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	8999      	ldrh	r1, [r3, #12]
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf0c      	ite	eq
 80006de:	2301      	moveq	r3, #1
 80006e0:	2300      	movne	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	f001 f865 	bl	80017b4 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <NMI_Handler+0x4>

08000760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <MemManage_Handler+0x4>

08000770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <UsageFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	counterIDLE++;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <SysTick_Handler+0x28>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	3301      	adds	r3, #1
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <SysTick_Handler+0x28>)
 80007b4:	801a      	strh	r2, [r3, #0]
	counterAnimation++;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <SysTick_Handler+0x2c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	3301      	adds	r3, #1
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SysTick_Handler+0x2c>)
 80007c2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 fae2 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200007e4 	.word	0x200007e4
 80007d0:	200007e6 	.word	0x200007e6

080007d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON1_Pin);
 80007d8:	2004      	movs	r0, #4
 80007da:	f001 f803 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON2_Pin);
 80007e6:	2008      	movs	r0, #8
 80007e8:	f000 fffc 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80007f4:	4802      	ldr	r0, [pc, #8]	@ (8000800 <DMA1_Channel2_IRQHandler+0x10>)
 80007f6:	f000 fd25 	bl	8001244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000878 	.word	0x20000878

08000804 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <TIM4_IRQHandler+0x10>)
 800080a:	f001 fecb 	bl	80025a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000830 	.word	0x20000830

08000818 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800081c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000820:	f000 ffe0 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM4)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d111      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x36>
  {
	  if(direction == MOTOR_AHEAD)
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d104      	bne.n	800084c <HAL_TIM_PeriodElapsedCallback+0x24>
	  {
		  steps++;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800084a:	6013      	str	r3, [r2, #0]
	  }
	  if(direction == MOTOR_BACK)
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d104      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x36>
	  {
		  steps--;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800085c:	6013      	str	r3, [r2, #0]
	  }
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40000800 	.word	0x40000800
 800086c:	20000000 	.word	0x20000000
 8000870:	200007e0 	.word	0x200007e0

08000874 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]

}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	@ 0x48
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fce6 	bl	8003290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c4:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008c6:	4a33      	ldr	r2, [pc, #204]	@ (8000994 <MX_TIM1_Init+0x100>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ca:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 159;
 80008d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008d8:	229f      	movs	r2, #159	@ 0x9f
 80008da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ee:	4828      	ldr	r0, [pc, #160]	@ (8000990 <MX_TIM1_Init+0xfc>)
 80008f0:	f001 fba0 	bl	8002034 <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f7ff feb0 	bl	800065e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000906:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800090a:	4619      	mov	r1, r3
 800090c:	4820      	ldr	r0, [pc, #128]	@ (8000990 <MX_TIM1_Init+0xfc>)
 800090e:	f002 fb1f 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000918:	f7ff fea1 	bl	800065e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	@ 0x60
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	4813      	ldr	r0, [pc, #76]	@ (8000990 <MX_TIM1_Init+0xfc>)
 8000942:	f001 ff37 	bl	80027b4 <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800094c:	f7ff fe87 	bl	800065e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4807      	ldr	r0, [pc, #28]	@ (8000990 <MX_TIM1_Init+0xfc>)
 8000974:	f002 fb4a 	bl	800300c <HAL_TIMEx_ConfigBreakDeadTime>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800097e:	f7ff fe6e 	bl	800065e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000982:	4803      	ldr	r0, [pc, #12]	@ (8000990 <MX_TIM1_Init+0xfc>)
 8000984:	f000 f8d8 	bl	8000b38 <HAL_TIM_MspPostInit>

}
 8000988:	bf00      	nop
 800098a:	3748      	adds	r7, #72	@ 0x48
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200007e8 	.word	0x200007e8
 8000994:	40012c00 	.word	0x40012c00

08000998 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000a68 <MX_TIM4_Init+0xd0>)
 80009be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009c2:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80009c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009d0:	2263      	movs	r2, #99	@ 0x63
 80009d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009e0:	4820      	ldr	r0, [pc, #128]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 80009e2:	f001 fb27 	bl	8002034 <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009ec:	f7ff fe37 	bl	800065e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4619      	mov	r1, r3
 80009fe:	4819      	ldr	r0, [pc, #100]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a00:	f002 faa6 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a0a:	f7ff fe28 	bl	800065e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	@ 0x60
 8000a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000a12:	2332      	movs	r3, #50	@ 0x32
 8000a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a26:	f001 fec5 	bl	80027b4 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a30:	f7ff fe15 	bl	800065e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0201 	orr.w	r2, r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 0202 	orr.w	r2, r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <MX_TIM4_Init+0xcc>)
 8000a56:	f000 f86f 	bl	8000b38 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000830 	.word	0x20000830
 8000a68:	40000800 	.word	0x40000800

08000a6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2a      	ldr	r2, [pc, #168]	@ (8000b24 <HAL_TIM_PWM_MspInit+0xb8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d134      	bne.n	8000ae8 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <HAL_TIM_PWM_MspInit+0xbc>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a29      	ldr	r2, [pc, #164]	@ (8000b28 <HAL_TIM_PWM_MspInit+0xbc>)
 8000a84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <HAL_TIM_PWM_MspInit+0xbc>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000a96:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000a98:	4a25      	ldr	r2, [pc, #148]	@ (8000b30 <HAL_TIM_PWM_MspInit+0xc4>)
 8000a9a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000ab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000ab8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000abc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000aca:	4818      	ldr	r0, [pc, #96]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000acc:	f000 fa88 	bl	8000fe0 <HAL_DMA_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000ad6:	f7ff fdc2 	bl	800065e <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a13      	ldr	r2, [pc, #76]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ae0:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <HAL_TIM_PWM_MspInit+0xc0>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ae6:	e018      	b.n	8000b1a <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM4)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a11      	ldr	r2, [pc, #68]	@ (8000b34 <HAL_TIM_PWM_MspInit+0xc8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d113      	bne.n	8000b1a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <HAL_TIM_PWM_MspInit+0xbc>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <HAL_TIM_PWM_MspInit+0xbc>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_TIM_PWM_MspInit+0xbc>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201e      	movs	r0, #30
 8000b10:	f000 fa2f 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b14:	201e      	movs	r0, #30
 8000b16:	f000 fa48 	bl	8000faa <HAL_NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	20000878 	.word	0x20000878
 8000b30:	4002001c 	.word	0x4002001c
 8000b34:	40000800 	.word	0x40000800

08000b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd0 <HAL_TIM_MspPostInit+0x98>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d119      	bne.n	8000b8c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <HAL_TIM_MspPostInit+0x9c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <HAL_TIM_MspPostInit+0x9c>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <HAL_TIM_MspPostInit+0x9c>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	4814      	ldr	r0, [pc, #80]	@ (8000bd8 <HAL_TIM_MspPostInit+0xa0>)
 8000b86:	f000 fc91 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b8a:	e01c      	b.n	8000bc6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <HAL_TIM_MspPostInit+0xa4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d117      	bne.n	8000bc6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_TIM_MspPostInit+0x9c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <HAL_TIM_MspPostInit+0x9c>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_TIM_MspPostInit+0x9c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bae:	2340      	movs	r3, #64	@ 0x40
 8000bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <HAL_TIM_MspPostInit+0xa8>)
 8000bc2:	f000 fc73 	bl	80014ac <HAL_GPIO_Init>
}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40012c00 	.word	0x40012c00
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40000800 	.word	0x40000800
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f002 fa59 	bl	80030d2 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f7ff fd1a 	bl	800065e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200008bc 	.word	0x200008bc
 8000c34:	40004400 	.word	0x40004400

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <HAL_UART_MspInit+0x70>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d123      	bne.n	8000ca0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_UART_MspInit+0x74>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <HAL_UART_MspInit+0x74>)
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_UART_MspInit+0x74>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_UART_MspInit+0x74>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_UART_MspInit+0x74>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_UART_MspInit+0x74>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_UART_MspInit+0x78>)
 8000c9c:	f000 fc06 	bl	80014ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff fde8 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cba:	490c      	ldr	r1, [pc, #48]	@ (8000cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a09      	ldr	r2, [pc, #36]	@ (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd0:	4c09      	ldr	r4, [pc, #36]	@ (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f002 fadf 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fc19 	bl	8000518 <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cf0:	08003334 	.word	0x08003334
  ldr r2, =_sbss
 8000cf4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cf8:	20000908 	.word	0x20000908

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f923 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fcea 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f93b 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f903 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000004 	.word	0x20000004
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000008 	.word	0x20000008

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a03      	ldr	r2, [pc, #12]	@ (8000dac <HAL_IncTick+0x20>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000904 	.word	0x20000904

08000db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	@ (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000904 	.word	0x20000904

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4906      	ldr	r1, [pc, #24]	@ (8000e5c <__NVIC_EnableIRQ+0x34>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff90 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff2d 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff42 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff90 	bl	8000eb4 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5f 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff35 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e043      	b.n	800107e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <HAL_DMA_Init+0xa8>)
 8000ffe:	4413      	add	r3, r2
 8001000:	4a22      	ldr	r2, [pc, #136]	@ (800108c <HAL_DMA_Init+0xac>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	009a      	lsls	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <HAL_DMA_Init+0xb0>)
 8001012:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800102a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800102e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	bffdfff8 	.word	0xbffdfff8
 800108c:	cccccccd 	.word	0xcccccccd
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_DMA_Start_IT+0x20>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e04b      	b.n	800114c <HAL_DMA_Start_IT+0xb8>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d13a      	bne.n	800113e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f9af 	bl	8001450 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d008      	beq.n	800110c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 020e 	orr.w	r2, r2, #14
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00f      	b.n	800112c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0204 	bic.w	r2, r2, #4
 800111a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 020a 	orr.w	r2, r2, #10
 800112a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e005      	b.n	800114a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001146:	2302      	movs	r3, #2
 8001148:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800114a:	7dfb      	ldrb	r3, [r7, #23]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d005      	beq.n	8001178 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2204      	movs	r2, #4
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e051      	b.n	800121c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 020e 	bic.w	r2, r2, #14
 8001186:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a22      	ldr	r2, [pc, #136]	@ (8001228 <HAL_DMA_Abort_IT+0xd4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d029      	beq.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <HAL_DMA_Abort_IT+0xd8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d022      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x9e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001230 <HAL_DMA_Abort_IT+0xdc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01a      	beq.n	80011ec <HAL_DMA_Abort_IT+0x98>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <HAL_DMA_Abort_IT+0xe0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d012      	beq.n	80011e6 <HAL_DMA_Abort_IT+0x92>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <HAL_DMA_Abort_IT+0xe4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00a      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x8c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_DMA_Abort_IT+0xe8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d102      	bne.n	80011da <HAL_DMA_Abort_IT+0x86>
 80011d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011d8:	e00e      	b.n	80011f8 <HAL_DMA_Abort_IT+0xa4>
 80011da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011de:	e00b      	b.n	80011f8 <HAL_DMA_Abort_IT+0xa4>
 80011e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e4:	e008      	b.n	80011f8 <HAL_DMA_Abort_IT+0xa4>
 80011e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ea:	e005      	b.n	80011f8 <HAL_DMA_Abort_IT+0xa4>
 80011ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f0:	e002      	b.n	80011f8 <HAL_DMA_Abort_IT+0xa4>
 80011f2:	2310      	movs	r3, #16
 80011f4:	e000      	b.n	80011f8 <HAL_DMA_Abort_IT+0xa4>
 80011f6:	2301      	movs	r3, #1
 80011f8:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <HAL_DMA_Abort_IT+0xec>)
 80011fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
    } 
  }
  return status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020008 	.word	0x40020008
 800122c:	4002001c 	.word	0x4002001c
 8001230:	40020030 	.word	0x40020030
 8001234:	40020044 	.word	0x40020044
 8001238:	40020058 	.word	0x40020058
 800123c:	4002006c 	.word	0x4002006c
 8001240:	40020000 	.word	0x40020000

08001244 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	2204      	movs	r2, #4
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d04f      	beq.n	800130c <HAL_DMA_IRQHandler+0xc8>
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b00      	cmp	r3, #0
 8001274:	d04a      	beq.n	800130c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a66      	ldr	r2, [pc, #408]	@ (8001434 <HAL_DMA_IRQHandler+0x1f0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d029      	beq.n	80012f2 <HAL_DMA_IRQHandler+0xae>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a65      	ldr	r2, [pc, #404]	@ (8001438 <HAL_DMA_IRQHandler+0x1f4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d022      	beq.n	80012ee <HAL_DMA_IRQHandler+0xaa>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a63      	ldr	r2, [pc, #396]	@ (800143c <HAL_DMA_IRQHandler+0x1f8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01a      	beq.n	80012e8 <HAL_DMA_IRQHandler+0xa4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a62      	ldr	r2, [pc, #392]	@ (8001440 <HAL_DMA_IRQHandler+0x1fc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d012      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x9e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a60      	ldr	r2, [pc, #384]	@ (8001444 <HAL_DMA_IRQHandler+0x200>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00a      	beq.n	80012dc <HAL_DMA_IRQHandler+0x98>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001448 <HAL_DMA_IRQHandler+0x204>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d102      	bne.n	80012d6 <HAL_DMA_IRQHandler+0x92>
 80012d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d4:	e00e      	b.n	80012f4 <HAL_DMA_IRQHandler+0xb0>
 80012d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012da:	e00b      	b.n	80012f4 <HAL_DMA_IRQHandler+0xb0>
 80012dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80012e0:	e008      	b.n	80012f4 <HAL_DMA_IRQHandler+0xb0>
 80012e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012e6:	e005      	b.n	80012f4 <HAL_DMA_IRQHandler+0xb0>
 80012e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ec:	e002      	b.n	80012f4 <HAL_DMA_IRQHandler+0xb0>
 80012ee:	2340      	movs	r3, #64	@ 0x40
 80012f0:	e000      	b.n	80012f4 <HAL_DMA_IRQHandler+0xb0>
 80012f2:	2304      	movs	r3, #4
 80012f4:	4a55      	ldr	r2, [pc, #340]	@ (800144c <HAL_DMA_IRQHandler+0x208>)
 80012f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8094 	beq.w	800142a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800130a:	e08e      	b.n	800142a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	2202      	movs	r2, #2
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d056      	beq.n	80013ca <HAL_DMA_IRQHandler+0x186>
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d051      	beq.n	80013ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10b      	bne.n	800134c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020a 	bic.w	r2, r2, #10
 8001342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a38      	ldr	r2, [pc, #224]	@ (8001434 <HAL_DMA_IRQHandler+0x1f0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d029      	beq.n	80013aa <HAL_DMA_IRQHandler+0x166>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a37      	ldr	r2, [pc, #220]	@ (8001438 <HAL_DMA_IRQHandler+0x1f4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d022      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x162>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a35      	ldr	r2, [pc, #212]	@ (800143c <HAL_DMA_IRQHandler+0x1f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01a      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x15c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <HAL_DMA_IRQHandler+0x1fc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d012      	beq.n	800139a <HAL_DMA_IRQHandler+0x156>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <HAL_DMA_IRQHandler+0x200>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00a      	beq.n	8001394 <HAL_DMA_IRQHandler+0x150>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <HAL_DMA_IRQHandler+0x204>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d102      	bne.n	800138e <HAL_DMA_IRQHandler+0x14a>
 8001388:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800138c:	e00e      	b.n	80013ac <HAL_DMA_IRQHandler+0x168>
 800138e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001392:	e00b      	b.n	80013ac <HAL_DMA_IRQHandler+0x168>
 8001394:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001398:	e008      	b.n	80013ac <HAL_DMA_IRQHandler+0x168>
 800139a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139e:	e005      	b.n	80013ac <HAL_DMA_IRQHandler+0x168>
 80013a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a4:	e002      	b.n	80013ac <HAL_DMA_IRQHandler+0x168>
 80013a6:	2320      	movs	r3, #32
 80013a8:	e000      	b.n	80013ac <HAL_DMA_IRQHandler+0x168>
 80013aa:	2302      	movs	r3, #2
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_DMA_IRQHandler+0x208>)
 80013ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d034      	beq.n	800142a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013c8:	e02f      	b.n	800142a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	2208      	movs	r2, #8
 80013d0:	409a      	lsls	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d028      	beq.n	800142c <HAL_DMA_IRQHandler+0x1e8>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 020e 	bic.w	r2, r2, #14
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	2b00      	cmp	r3, #0
 8001420:	d004      	beq.n	800142c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
    }
  }
  return;
 800142a:	bf00      	nop
 800142c:	bf00      	nop
}
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40020008 	.word	0x40020008
 8001438:	4002001c 	.word	0x4002001c
 800143c:	40020030 	.word	0x40020030
 8001440:	40020044 	.word	0x40020044
 8001444:	40020058 	.word	0x40020058
 8001448:	4002006c 	.word	0x4002006c
 800144c:	40020000 	.word	0x40020000

08001450 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b10      	cmp	r3, #16
 800147c:	d108      	bne.n	8001490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800148e:	e007      	b.n	80014a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b08b      	sub	sp, #44	@ 0x2c
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e169      	b.n	8001794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c0:	2201      	movs	r2, #1
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 8158 	bne.w	800178e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a9a      	ldr	r2, [pc, #616]	@ (800174c <HAL_GPIO_Init+0x2a0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d05e      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 80014e8:	4a98      	ldr	r2, [pc, #608]	@ (800174c <HAL_GPIO_Init+0x2a0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d875      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 80014ee:	4a98      	ldr	r2, [pc, #608]	@ (8001750 <HAL_GPIO_Init+0x2a4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d058      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 80014f4:	4a96      	ldr	r2, [pc, #600]	@ (8001750 <HAL_GPIO_Init+0x2a4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d86f      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 80014fa:	4a96      	ldr	r2, [pc, #600]	@ (8001754 <HAL_GPIO_Init+0x2a8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d052      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 8001500:	4a94      	ldr	r2, [pc, #592]	@ (8001754 <HAL_GPIO_Init+0x2a8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d869      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 8001506:	4a94      	ldr	r2, [pc, #592]	@ (8001758 <HAL_GPIO_Init+0x2ac>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d04c      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 800150c:	4a92      	ldr	r2, [pc, #584]	@ (8001758 <HAL_GPIO_Init+0x2ac>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d863      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 8001512:	4a92      	ldr	r2, [pc, #584]	@ (800175c <HAL_GPIO_Init+0x2b0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d046      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 8001518:	4a90      	ldr	r2, [pc, #576]	@ (800175c <HAL_GPIO_Init+0x2b0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d85d      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d82a      	bhi.n	8001578 <HAL_GPIO_Init+0xcc>
 8001522:	2b12      	cmp	r3, #18
 8001524:	d859      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <HAL_GPIO_Init+0x80>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	080015a7 	.word	0x080015a7
 8001530:	08001581 	.word	0x08001581
 8001534:	08001593 	.word	0x08001593
 8001538:	080015d5 	.word	0x080015d5
 800153c:	080015db 	.word	0x080015db
 8001540:	080015db 	.word	0x080015db
 8001544:	080015db 	.word	0x080015db
 8001548:	080015db 	.word	0x080015db
 800154c:	080015db 	.word	0x080015db
 8001550:	080015db 	.word	0x080015db
 8001554:	080015db 	.word	0x080015db
 8001558:	080015db 	.word	0x080015db
 800155c:	080015db 	.word	0x080015db
 8001560:	080015db 	.word	0x080015db
 8001564:	080015db 	.word	0x080015db
 8001568:	080015db 	.word	0x080015db
 800156c:	080015db 	.word	0x080015db
 8001570:	08001589 	.word	0x08001589
 8001574:	0800159d 	.word	0x0800159d
 8001578:	4a79      	ldr	r2, [pc, #484]	@ (8001760 <HAL_GPIO_Init+0x2b4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800157e:	e02c      	b.n	80015da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e029      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e024      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	3308      	adds	r3, #8
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e01f      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	330c      	adds	r3, #12
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e01a      	b.n	80015dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ae:	2304      	movs	r3, #4
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e013      	b.n	80015dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	611a      	str	r2, [r3, #16]
          break;
 80015c6:	e009      	b.n	80015dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	615a      	str	r2, [r3, #20]
          break;
 80015d2:	e003      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x130>
          break;
 80015da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2bff      	cmp	r3, #255	@ 0xff
 80015e0:	d801      	bhi.n	80015e6 <HAL_GPIO_Init+0x13a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	e001      	b.n	80015ea <HAL_GPIO_Init+0x13e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	d802      	bhi.n	80015f8 <HAL_GPIO_Init+0x14c>
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x152>
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	3b08      	subs	r3, #8
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	210f      	movs	r1, #15
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	401a      	ands	r2, r3
 8001610:	6a39      	ldr	r1, [r7, #32]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80b1 	beq.w	800178e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162c:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <HAL_GPIO_Init+0x2b8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_GPIO_Init+0x2b8>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_GPIO_Init+0x2b8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001644:	4a48      	ldr	r2, [pc, #288]	@ (8001768 <HAL_GPIO_Init+0x2bc>)
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a40      	ldr	r2, [pc, #256]	@ (800176c <HAL_GPIO_Init+0x2c0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d013      	beq.n	8001698 <HAL_GPIO_Init+0x1ec>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3f      	ldr	r2, [pc, #252]	@ (8001770 <HAL_GPIO_Init+0x2c4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00d      	beq.n	8001694 <HAL_GPIO_Init+0x1e8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3e      	ldr	r2, [pc, #248]	@ (8001774 <HAL_GPIO_Init+0x2c8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d007      	beq.n	8001690 <HAL_GPIO_Init+0x1e4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3d      	ldr	r2, [pc, #244]	@ (8001778 <HAL_GPIO_Init+0x2cc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d101      	bne.n	800168c <HAL_GPIO_Init+0x1e0>
 8001688:	2303      	movs	r3, #3
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 800168c:	2304      	movs	r3, #4
 800168e:	e004      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001690:	2302      	movs	r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001698:	2300      	movs	r3, #0
 800169a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016aa:	492f      	ldr	r1, [pc, #188]	@ (8001768 <HAL_GPIO_Init+0x2bc>)
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	492c      	ldr	r1, [pc, #176]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	4928      	ldr	r1, [pc, #160]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4922      	ldr	r1, [pc, #136]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	491e      	ldr	r1, [pc, #120]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001704:	4013      	ands	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4918      	ldr	r1, [pc, #96]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4914      	ldr	r1, [pc, #80]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 800172c:	4013      	ands	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d021      	beq.n	8001780 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	490e      	ldr	r1, [pc, #56]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e021      	b.n	800178e <HAL_GPIO_Init+0x2e2>
 800174a:	bf00      	nop
 800174c:	10320000 	.word	0x10320000
 8001750:	10310000 	.word	0x10310000
 8001754:	10220000 	.word	0x10220000
 8001758:	10210000 	.word	0x10210000
 800175c:	10120000 	.word	0x10120000
 8001760:	10110000 	.word	0x10110000
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40011000 	.word	0x40011000
 8001778:	40011400 	.word	0x40011400
 800177c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	43db      	mvns	r3, r3
 8001788:	4909      	ldr	r1, [pc, #36]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 800178a:	4013      	ands	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	3301      	adds	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f ae8e 	bne.w	80014c0 <HAL_GPIO_Init+0x14>
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	372c      	adds	r7, #44	@ 0x2c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d0:	e003      	b.n	80017da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	041a      	lsls	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	611a      	str	r2, [r3, #16]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f836 	bl	8000874 <HAL_GPIO_EXTI_Callback>
  }
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e272      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001834:	4b92      	ldr	r3, [pc, #584]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b04      	cmp	r3, #4
 800183e:	d00c      	beq.n	800185a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001840:	4b8f      	ldr	r3, [pc, #572]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d112      	bne.n	8001872 <HAL_RCC_OscConfig+0x5e>
 800184c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001858:	d10b      	bne.n	8001872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185a:	4b89      	ldr	r3, [pc, #548]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d06c      	beq.n	8001940 <HAL_RCC_OscConfig+0x12c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d168      	bne.n	8001940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e24c      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x76>
 800187c:	4b80      	ldr	r3, [pc, #512]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a7f      	ldr	r2, [pc, #508]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e02e      	b.n	80018e8 <HAL_RCC_OscConfig+0xd4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x98>
 8001892:	4b7b      	ldr	r3, [pc, #492]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a7a      	ldr	r2, [pc, #488]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b78      	ldr	r3, [pc, #480]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a77      	ldr	r2, [pc, #476]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e01d      	b.n	80018e8 <HAL_RCC_OscConfig+0xd4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0xbc>
 80018b6:	4b72      	ldr	r3, [pc, #456]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a71      	ldr	r2, [pc, #452]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xd4>
 80018d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b68      	ldr	r3, [pc, #416]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a67      	ldr	r2, [pc, #412]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa5e 	bl	8000db0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fa5a 	bl	8000db0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	@ 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e200      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xe4>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fa4a 	bl	8000db0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fa46 	bl	8000db0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	@ 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1ec      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x10c>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195a:	4b49      	ldr	r3, [pc, #292]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x18c>
 8001966:	4b46      	ldr	r3, [pc, #280]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x176>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1c0      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4939      	ldr	r1, [pc, #228]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b36      	ldr	r3, [pc, #216]	@ (8001a84 <HAL_RCC_OscConfig+0x270>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f9ff 	bl	8000db0 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f9fb 	bl	8000db0 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1a1      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4927      	ldr	r1, [pc, #156]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <HAL_RCC_OscConfig+0x270>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f9de 	bl	8000db0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff f9da 	bl	8000db0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e180      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d03a      	beq.n	8001a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d019      	beq.n	8001a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff f9be 	bl	8000db0 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff f9ba 	bl	8000db0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e160      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f000 face 	bl	8001ff8 <RCC_Delay>
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_RCC_OscConfig+0x274>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff f9a4 	bl	8000db0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6a:	e00f      	b.n	8001a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f9a0 	bl	8000db0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d908      	bls.n	8001a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e146      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	42420000 	.word	0x42420000
 8001a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b92      	ldr	r3, [pc, #584]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e9      	bne.n	8001a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a6 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b88      	ldr	r3, [pc, #544]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a87      	ldr	r2, [pc, #540]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b85      	ldr	r3, [pc, #532]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b82      	ldr	r3, [pc, #520]	@ (8001cdc <HAL_RCC_OscConfig+0x4c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b7f      	ldr	r3, [pc, #508]	@ (8001cdc <HAL_RCC_OscConfig+0x4c8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cdc <HAL_RCC_OscConfig+0x4c8>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff f961 	bl	8000db0 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff f95d 	bl	8000db0 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b64      	cmp	r3, #100	@ 0x64
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e103      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b75      	ldr	r3, [pc, #468]	@ (8001cdc <HAL_RCC_OscConfig+0x4c8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x312>
 8001b18:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	e02d      	b.n	8001b82 <HAL_RCC_OscConfig+0x36e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x334>
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a69      	ldr	r2, [pc, #420]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	4b67      	ldr	r3, [pc, #412]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a66      	ldr	r2, [pc, #408]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 0304 	bic.w	r3, r3, #4
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	e01c      	b.n	8001b82 <HAL_RCC_OscConfig+0x36e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x356>
 8001b50:	4b61      	ldr	r3, [pc, #388]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a60      	ldr	r2, [pc, #384]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e00b      	b.n	8001b82 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b58      	ldr	r3, [pc, #352]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a57      	ldr	r2, [pc, #348]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d015      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f911 	bl	8000db0 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7ff f90d 	bl	8000db0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e0b1      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ee      	beq.n	8001b92 <HAL_RCC_OscConfig+0x37e>
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f8fb 	bl	8000db0 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f8f7 	bl	8000db0 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e09b      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	4b40      	ldr	r3, [pc, #256]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ee      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8087 	beq.w	8001d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d061      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d146      	bne.n	8001c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c10:	4b33      	ldr	r3, [pc, #204]	@ (8001ce0 <HAL_RCC_OscConfig+0x4cc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f8cb 	bl	8000db0 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f8c7 	bl	8000db0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e06d      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c46:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4921      	ldr	r1, [pc, #132]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a19      	ldr	r1, [r3, #32]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	491b      	ldr	r1, [pc, #108]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff f89b 	bl	8000db0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f897 	bl	8000db0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e03d      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x46a>
 8001c9c:	e035      	b.n	8001d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <HAL_RCC_OscConfig+0x4cc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f884 	bl	8000db0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff f880 	bl	8000db0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e026      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x498>
 8001cca:	e01e      	b.n	8001d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e019      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_RCC_OscConfig+0x500>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0d0      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b67      	ldr	r3, [pc, #412]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4965      	ldr	r1, [pc, #404]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d040      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e073      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06b      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4936      	ldr	r1, [pc, #216]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7fe ffd2 	bl	8000db0 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe ffce 	bl	8000db0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e053      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d210      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0207 	bic.w	r2, r3, #7
 8001e4e:	4922      	ldr	r1, [pc, #136]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ff30 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003300 	.word	0x08003300
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	20000008 	.word	0x20000008

08001eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x30>
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x36>
 8001f1a:	e027      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1e:	613b      	str	r3, [r7, #16]
      break;
 8001f20:	e027      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d010      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0c5b      	lsrs	r3, r3, #17
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e004      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	613b      	str	r3, [r7, #16]
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6e:	613b      	str	r3, [r7, #16]
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	693b      	ldr	r3, [r7, #16]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	007a1200 	.word	0x007a1200
 8001f88:	08003318 	.word	0x08003318
 8001f8c:	08003328 	.word	0x08003328
 8001f90:	003d0900 	.word	0x003d0900

08001f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f7ff fff2 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4903      	ldr	r1, [pc, #12]	@ (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08003310 	.word	0x08003310

08001fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0adb      	lsrs	r3, r3, #11
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	@ (8001ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003310 	.word	0x08003310

08001ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <RCC_Delay+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <RCC_Delay+0x38>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002014:	bf00      	nop
  }
  while (Delay --);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <RCC_Delay+0x1c>
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000004 	.word	0x20000004
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fd06 	bl	8000a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fd5e 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_TIM_PWM_Start_DMA+0x2c>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e022      	b.n	8002146 <HAL_TIM_PWM_Start_DMA+0x72>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d109      	bne.n	800211a <HAL_TIM_PWM_Start_DMA+0x46>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	e015      	b.n	8002146 <HAL_TIM_PWM_Start_DMA+0x72>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d109      	bne.n	8002134 <HAL_TIM_PWM_Start_DMA+0x60>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	e008      	b.n	8002146 <HAL_TIM_PWM_Start_DMA+0x72>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	e153      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_TIM_PWM_Start_DMA+0x94>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e022      	b.n	80021ae <HAL_TIM_PWM_Start_DMA+0xda>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b04      	cmp	r3, #4
 800216c:	d109      	bne.n	8002182 <HAL_TIM_PWM_Start_DMA+0xae>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e015      	b.n	80021ae <HAL_TIM_PWM_Start_DMA+0xda>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d109      	bne.n	800219c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e008      	b.n	80021ae <HAL_TIM_PWM_Start_DMA+0xda>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d024      	beq.n	80021fc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_TIM_PWM_Start_DMA+0xea>
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e119      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d0:	e016      	b.n	8002200 <HAL_TIM_PWM_Start_DMA+0x12c>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e0:	e00e      	b.n	8002200 <HAL_TIM_PWM_Start_DMA+0x12c>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f0:	e006      	b.n	8002200 <HAL_TIM_PWM_Start_DMA+0x12c>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021fa:	e001      	b.n	8002200 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0fa      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	f200 80ae 	bhi.w	8002364 <HAL_TIM_PWM_Start_DMA+0x290>
 8002208:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002245 	.word	0x08002245
 8002214:	08002365 	.word	0x08002365
 8002218:	08002365 	.word	0x08002365
 800221c:	08002365 	.word	0x08002365
 8002220:	0800228d 	.word	0x0800228d
 8002224:	08002365 	.word	0x08002365
 8002228:	08002365 	.word	0x08002365
 800222c:	08002365 	.word	0x08002365
 8002230:	080022d5 	.word	0x080022d5
 8002234:	08002365 	.word	0x08002365
 8002238:	08002365 	.word	0x08002365
 800223c:	08002365 	.word	0x08002365
 8002240:	0800231d 	.word	0x0800231d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	4a6d      	ldr	r2, [pc, #436]	@ (8002400 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	4a6c      	ldr	r2, [pc, #432]	@ (8002404 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002252:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	4a6b      	ldr	r2, [pc, #428]	@ (8002408 <HAL_TIM_PWM_Start_DMA+0x334>)
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3334      	adds	r3, #52	@ 0x34
 8002268:	461a      	mov	r2, r3
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	f7fe ff12 	bl	8001094 <HAL_DMA_Start_IT>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0bd      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002288:	60da      	str	r2, [r3, #12]
      break;
 800228a:	e06e      	b.n	800236a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002290:	4a5b      	ldr	r2, [pc, #364]	@ (8002400 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	4a5a      	ldr	r2, [pc, #360]	@ (8002404 <HAL_TIM_PWM_Start_DMA+0x330>)
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	4a59      	ldr	r2, [pc, #356]	@ (8002408 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3338      	adds	r3, #56	@ 0x38
 80022b0:	461a      	mov	r2, r3
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	f7fe feee 	bl	8001094 <HAL_DMA_Start_IT>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e099      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022d0:	60da      	str	r2, [r3, #12]
      break;
 80022d2:	e04a      	b.n	800236a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	4a49      	ldr	r2, [pc, #292]	@ (8002400 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	4a48      	ldr	r2, [pc, #288]	@ (8002404 <HAL_TIM_PWM_Start_DMA+0x330>)
 80022e2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	4a47      	ldr	r2, [pc, #284]	@ (8002408 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	333c      	adds	r3, #60	@ 0x3c
 80022f8:	461a      	mov	r2, r3
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	f7fe feca 	bl	8001094 <HAL_DMA_Start_IT>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e075      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002318:	60da      	str	r2, [r3, #12]
      break;
 800231a:	e026      	b.n	800236a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	4a37      	ldr	r2, [pc, #220]	@ (8002400 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	4a36      	ldr	r2, [pc, #216]	@ (8002404 <HAL_TIM_PWM_Start_DMA+0x330>)
 800232a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3340      	adds	r3, #64	@ 0x40
 8002340:	461a      	mov	r2, r3
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	f7fe fea6 	bl	8001094 <HAL_DMA_Start_IT>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e051      	b.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002360:	60da      	str	r2, [r3, #12]
      break;
 8002362:	e002      	b.n	800236a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	75fb      	strb	r3, [r7, #23]
      break;
 8002368:	bf00      	nop
  }

  if (status == HAL_OK)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d141      	bne.n	80023f4 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2201      	movs	r2, #1
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fdc5 	bl	8002f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a22      	ldr	r2, [pc, #136]	@ (800240c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d107      	bne.n	8002398 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002396:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1b      	ldr	r2, [pc, #108]	@ (800240c <HAL_TIM_PWM_Start_DMA+0x338>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023aa:	d009      	beq.n	80023c0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a17      	ldr	r2, [pc, #92]	@ (8002410 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <HAL_TIM_PWM_Start_DMA+0x340>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d010      	beq.n	80023f4 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e2:	e007      	b.n	80023f4 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08002a25 	.word	0x08002a25
 8002404:	08002acd 	.word	0x08002acd
 8002408:	08002993 	.word	0x08002993
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800

08002418 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b0c      	cmp	r3, #12
 800242a:	d855      	bhi.n	80024d8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800242c:	a201      	add	r2, pc, #4	@ (adr r2, 8002434 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002469 	.word	0x08002469
 8002438:	080024d9 	.word	0x080024d9
 800243c:	080024d9 	.word	0x080024d9
 8002440:	080024d9 	.word	0x080024d9
 8002444:	08002485 	.word	0x08002485
 8002448:	080024d9 	.word	0x080024d9
 800244c:	080024d9 	.word	0x080024d9
 8002450:	080024d9 	.word	0x080024d9
 8002454:	080024a1 	.word	0x080024a1
 8002458:	080024d9 	.word	0x080024d9
 800245c:	080024d9 	.word	0x080024d9
 8002460:	080024d9 	.word	0x080024d9
 8002464:	080024bd 	.word	0x080024bd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002476:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fe69 	bl	8001154 <HAL_DMA_Abort_IT>
      break;
 8002482:	e02c      	b.n	80024de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002492:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fe5b 	bl	8001154 <HAL_DMA_Abort_IT>
      break;
 800249e:	e01e      	b.n	80024de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fe4d 	bl	8001154 <HAL_DMA_Abort_IT>
      break;
 80024ba:	e010      	b.n	80024de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fe3f 	bl	8001154 <HAL_DMA_Abort_IT>
      break;
 80024d6:	e002      	b.n	80024de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d157      	bne.n	8002594 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd0b 	bl	8002f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2a      	ldr	r2, [pc, #168]	@ (80025a0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d117      	bne.n	800252c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a1a      	ldr	r2, [r3, #32]
 8002502:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_TIM_PWM_Stop_DMA+0x114>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	f240 4344 	movw	r3, #1092	@ 0x444
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <HAL_TIM_PWM_Stop_DMA+0x114>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_TIM_PWM_Stop_DMA+0x144>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	f240 4344 	movw	r3, #1092	@ 0x444
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_TIM_PWM_Stop_DMA+0x144>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <HAL_TIM_PWM_Stop_DMA+0x154>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800256a:	e013      	b.n	8002594 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d104      	bne.n	800257c <HAL_TIM_PWM_Stop_DMA+0x164>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257a:	e00b      	b.n	8002594 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d104      	bne.n	800258c <HAL_TIM_PWM_Stop_DMA+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800258a:	e003      	b.n	8002594 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40012c00 	.word	0x40012c00

080025a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0202 	mvn.w	r2, #2
 80025d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9af 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9a2 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fd fe9b 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b04      	cmp	r3, #4
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0204 	mvn.w	r2, #4
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f985 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f978 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fd fe71 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b08      	cmp	r3, #8
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0208 	mvn.w	r2, #8
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2204      	movs	r2, #4
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f95b 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f94e 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fd fe47 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d122      	bne.n	80026fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d11b      	bne.n	80026fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0210 	mvn.w	r2, #16
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2208      	movs	r2, #8
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f931 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f924 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fd fe1d 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0201 	mvn.w	r2, #1
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe f880 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002732:	2b80      	cmp	r3, #128	@ 0x80
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002740:	2b80      	cmp	r3, #128	@ 0x80
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fcb6 	bl	80030c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275e:	2b40      	cmp	r3, #64	@ 0x40
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8f7 	bl	800296e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b20      	cmp	r3, #32
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b20      	cmp	r3, #32
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0220 	mvn.w	r2, #32
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fc81 	bl	80030ae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0ae      	b.n	8002930 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	f200 809f 	bhi.w	8002920 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027e2:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	0800281d 	.word	0x0800281d
 80027ec:	08002921 	.word	0x08002921
 80027f0:	08002921 	.word	0x08002921
 80027f4:	08002921 	.word	0x08002921
 80027f8:	0800285d 	.word	0x0800285d
 80027fc:	08002921 	.word	0x08002921
 8002800:	08002921 	.word	0x08002921
 8002804:	08002921 	.word	0x08002921
 8002808:	0800289f 	.word	0x0800289f
 800280c:	08002921 	.word	0x08002921
 8002810:	08002921 	.word	0x08002921
 8002814:	08002921 	.word	0x08002921
 8002818:	080028df 	.word	0x080028df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f9e8 	bl	8002bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	619a      	str	r2, [r3, #24]
      break;
 800285a:	e064      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa2e 	bl	8002cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6999      	ldr	r1, [r3, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]
      break;
 800289c:	e043      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fa77 	bl	8002d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0208 	orr.w	r2, r2, #8
 80028b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0204 	bic.w	r2, r2, #4
 80028c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	61da      	str	r2, [r3, #28]
      break;
 80028dc:	e023      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fac1 	bl	8002e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69d9      	ldr	r1, [r3, #28]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	61da      	str	r2, [r3, #28]
      break;
 800291e:	e002      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
      break;
 8002924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d107      	bne.n	80029ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b8:	e02a      	b.n	8002a10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2202      	movs	r2, #2
 80029c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d2:	e01d      	b.n	8002a10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d107      	bne.n	80029ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2204      	movs	r2, #4
 80029e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ec:	e010      	b.n	8002a10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2208      	movs	r2, #8
 80029fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a06:	e003      	b.n	8002a10 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff ffb5 	bl	8002980 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10b      	bne.n	8002a54 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d136      	bne.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a52:	e031      	b.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10b      	bne.n	8002a76 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d125      	bne.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a74:	e020      	b.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d10b      	bne.n	8002a98 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2204      	movs	r2, #4
 8002a84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d114      	bne.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a96:	e00f      	b.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10a      	bne.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d103      	bne.n	8002ab8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7fd fc39 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d103      	bne.n	8002aec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	771a      	strb	r2, [r3, #28]
 8002aea:	e019      	b.n	8002b20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d103      	bne.n	8002afe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	771a      	strb	r2, [r3, #28]
 8002afc:	e010      	b.n	8002b20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d103      	bne.n	8002b10 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	771a      	strb	r2, [r3, #28]
 8002b0e:	e007      	b.n	8002b20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d102      	bne.n	8002b20 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff ff1b 	bl	800295c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a29      	ldr	r2, [pc, #164]	@ (8002bec <TIM_Base_SetConfig+0xb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a26      	ldr	r2, [pc, #152]	@ (8002bf0 <TIM_Base_SetConfig+0xbc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1c      	ldr	r2, [pc, #112]	@ (8002bec <TIM_Base_SetConfig+0xb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <TIM_Base_SetConfig+0xbc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a07      	ldr	r2, [pc, #28]	@ (8002bec <TIM_Base_SetConfig+0xb8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f023 0201 	bic.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 0302 	bic.w	r3, r3, #2
 8002c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc0 <TIM_OC1_SetConfig+0xc8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10c      	bne.n	8002c6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 0308 	bic.w	r3, r3, #8
 8002c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <TIM_OC1_SetConfig+0xc8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f023 0210 	bic.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0320 	bic.w	r3, r3, #32
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d94 <TIM_OC2_SetConfig+0xd0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10d      	bne.n	8002d40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <TIM_OC2_SetConfig+0xd0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d113      	bne.n	8002d70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	621a      	str	r2, [r3, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	40012c00 	.word	0x40012c00

08002d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e68 <TIM_OC3_SetConfig+0xd0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10d      	bne.n	8002e12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <TIM_OC3_SetConfig+0xd0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d113      	bne.n	8002e42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40012c00 	.word	0x40012c00

08002e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	031b      	lsls	r3, r3, #12
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <TIM_OC4_SetConfig+0x98>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d109      	bne.n	8002ee0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00

08002f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e046      	b.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a16      	ldr	r2, [pc, #88]	@ (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb4:	d009      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a10      	ldr	r2, [pc, #64]	@ (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800

0800300c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003024:	2302      	movs	r3, #2
 8003026:	e03d      	b.n	80030a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e042      	b.n	800316a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fd fd9d 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	@ 0x24
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003114:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f82c 	bl	8003174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800312a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800313a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800314a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031ae:	f023 030c 	bic.w	r3, r3, #12
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003288 <UART_SetConfig+0x114>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7fe fef8 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	e002      	b.n	80031ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7fe fee0 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4a22      	ldr	r2, [pc, #136]	@ (800328c <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	0119      	lsls	r1, r3, #4
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003220:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <UART_SetConfig+0x118>)
 8003222:	fba3 0302 	umull	r0, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2064      	movs	r0, #100	@ 0x64
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	3332      	adds	r3, #50	@ 0x32
 8003234:	4a15      	ldr	r2, [pc, #84]	@ (800328c <UART_SetConfig+0x118>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003240:	4419      	add	r1, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <UART_SetConfig+0x118>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	@ 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	@ 0x32
 800326c:	4a07      	ldr	r2, [pc, #28]	@ (800328c <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	440a      	add	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013800 	.word	0x40013800
 800328c:	51eb851f 	.word	0x51eb851f

08003290 <memset>:
 8003290:	4603      	mov	r3, r0
 8003292:	4402      	add	r2, r0
 8003294:	4293      	cmp	r3, r2
 8003296:	d100      	bne.n	800329a <memset+0xa>
 8003298:	4770      	bx	lr
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	e7f9      	b.n	8003294 <memset+0x4>

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	2600      	movs	r6, #0
 80032a4:	4d0c      	ldr	r5, [pc, #48]	@ (80032d8 <__libc_init_array+0x38>)
 80032a6:	4c0d      	ldr	r4, [pc, #52]	@ (80032dc <__libc_init_array+0x3c>)
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	f000 f81a 	bl	80032e8 <_init>
 80032b4:	2600      	movs	r6, #0
 80032b6:	4d0a      	ldr	r5, [pc, #40]	@ (80032e0 <__libc_init_array+0x40>)
 80032b8:	4c0a      	ldr	r4, [pc, #40]	@ (80032e4 <__libc_init_array+0x44>)
 80032ba:	1b64      	subs	r4, r4, r5
 80032bc:	10a4      	asrs	r4, r4, #2
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	0800332c 	.word	0x0800332c
 80032dc:	0800332c 	.word	0x0800332c
 80032e0:	0800332c 	.word	0x0800332c
 80032e4:	08003330 	.word	0x08003330

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr
