
keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800684c  0800684c  0000784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b0  080068b0  00008128  2**0
                  CONTENTS
  4 .ARM          00000008  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b8  080068b8  00008128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b8  080068b8  000078b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  080068c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  20000128  080069e8  00008128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  080069e8  00008b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9fd  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002924  00000000  00000000  00014b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00017480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082c  00000000  00000000  00017fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f0  00000000  00000000  000187cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f364  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086269  00000000  00000000  0003f520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf4  00000000  00000000  000c57cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c83c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000128 	.word	0x20000128
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006834 	.word	0x08006834

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000012c 	.word	0x2000012c
 80001d0:	08006834 	.word	0x08006834

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 f961 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f827 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f891 	bl	80005f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d6:	f005 fced 	bl	8005eb4 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  send_keyboard_report(0, 0x39, 0, 0, 0, 0, 0);
 80004da:	2300      	movs	r3, #0
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	2300      	movs	r3, #0
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	2300      	movs	r3, #0
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2300      	movs	r3, #0
 80004e8:	2200      	movs	r2, #0
 80004ea:	2139      	movs	r1, #57	@ 0x39
 80004ec:	2000      	movs	r0, #0
 80004ee:	f005 fd39 	bl	8005f64 <send_keyboard_report>
	  HAL_Delay(2000);
 80004f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004f6:	f000 f9bd 	bl	8000874 <HAL_Delay>
	  send_keyboard_report(0, 0, 0, 0, 0, 0, 0);
 80004fa:	2300      	movs	r3, #0
 80004fc:	9302      	str	r3, [sp, #8]
 80004fe:	2300      	movs	r3, #0
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2300      	movs	r3, #0
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2000      	movs	r0, #0
 800050e:	f005 fd29 	bl	8005f64 <send_keyboard_report>
	  HAL_Delay(1000);
 8000512:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000516:	f000 f9ad 	bl	8000874 <HAL_Delay>
  {
 800051a:	bf00      	nop
 800051c:	e7dd      	b.n	80004da <main+0x16>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	@ 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	@ 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 f954 	bl	80067dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	4a28      	ldr	r2, [pc, #160]	@ (80005f0 <SystemClock_Config+0xd0>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	@ 0x40
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056c:	4a21      	ldr	r2, [pc, #132]	@ (80005f4 <SystemClock_Config+0xd4>)
 800056e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000594:	2319      	movs	r3, #25
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fe54 	bl	8002258 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b6:	f000 f847 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f8b6 	bl	8002748 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e2:	f000 f831 	bl	8000648 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	@ 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0f      	ldr	r2, [pc, #60]	@ (8000644 <MX_GPIO_Init+0x4c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <MX_GPIO_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <MX_GPIO_Init+0x4c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_GPIO_Init+0x4c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <Error_Handler+0x8>

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000662:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <HAL_MspInit+0x4c>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000668:	6453      	str	r3, [r2, #68]	@ 0x44
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <HAL_MspInit+0x4c>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067e:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <HAL_MspInit+0x4c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000684:	6413      	str	r3, [r2, #64]	@ 0x40
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_MspInit+0x4c>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <NMI_Handler+0x4>

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <MemManage_Handler+0x4>

080006bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <UsageFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 f89b 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000708:	4802      	ldr	r0, [pc, #8]	@ (8000714 <OTG_FS_IRQHandler+0x10>)
 800070a:	f000 fcb1 	bl	8001070 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000628 	.word	0x20000628

08000718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <SystemInit+0x20>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000722:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <SystemInit+0x20>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800073c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000774 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000740:	f7ff ffea 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	@ (800077c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	@ (8000788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f006 f83f 	bl	80067ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800076e:	f7ff fea9 	bl	80004c4 <main>
  bx  lr    
 8000772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000774:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8000780:	080068c0 	.word	0x080068c0
  ldr r2, =_sbss
 8000784:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8000788:	20000b28 	.word	0x20000b28

0800078c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC_IRQHandler>
	...

08000790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <HAL_Init+0x40>)
 800079a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_Init+0x40>)
 80007a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_Init+0x40>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <HAL_Init+0x40>)
 80007b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f94f 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff ff46 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023c00 	.word	0x40023c00

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f967 	bl	8000ac6 <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f000 f92f 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	20000144 	.word	0x20000144

0800085c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000144 	.word	0x20000144

08000874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff ffee 	bl	800085c <HAL_GetTick>
 8000880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_Delay+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800089a:	bf00      	nop
 800089c:	f7ff ffde 	bl	800085c <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db0b      	blt.n	800094a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 021f 	and.w	r2, r3, #31
 8000938:	4907      	ldr	r1, [pc, #28]	@ (8000958 <__NVIC_EnableIRQ+0x38>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	095b      	lsrs	r3, r3, #5
 8000940:	2001      	movs	r0, #1
 8000942:	fa00 f202 	lsl.w	r2, r0, r2
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	@ (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	@ (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	@ 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	@ 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff29 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff3e 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff31 	bl	8000920 <__NVIC_EnableIRQ>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffa2 	bl	8000a18 <SysTick_Config>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	e159      	b.n	8000db0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000afc:	2201      	movs	r2, #1
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f040 8148 	bne.w	8000daa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d005      	beq.n	8000b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d130      	bne.n	8000b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b68:	2201      	movs	r2, #1
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	f003 0201 	and.w	r2, r3, #1
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d017      	beq.n	8000bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d123      	bne.n	8000c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	08da      	lsrs	r2, r3, #3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3208      	adds	r2, #8
 8000be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	f003 0307 	and.w	r3, r3, #7
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	08da      	lsrs	r2, r3, #3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3208      	adds	r2, #8
 8000c1e:	69b9      	ldr	r1, [r7, #24]
 8000c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0203 	and.w	r2, r3, #3
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 80a2 	beq.w	8000daa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b57      	ldr	r3, [pc, #348]	@ (8000dc8 <HAL_GPIO_Init+0x2e8>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	4a56      	ldr	r2, [pc, #344]	@ (8000dc8 <HAL_GPIO_Init+0x2e8>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c76:	4b54      	ldr	r3, [pc, #336]	@ (8000dc8 <HAL_GPIO_Init+0x2e8>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c82:	4a52      	ldr	r2, [pc, #328]	@ (8000dcc <HAL_GPIO_Init+0x2ec>)
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a49      	ldr	r2, [pc, #292]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d019      	beq.n	8000ce2 <HAL_GPIO_Init+0x202>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a48      	ldr	r2, [pc, #288]	@ (8000dd4 <HAL_GPIO_Init+0x2f4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0x1fe>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a47      	ldr	r2, [pc, #284]	@ (8000dd8 <HAL_GPIO_Init+0x2f8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00d      	beq.n	8000cda <HAL_GPIO_Init+0x1fa>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a46      	ldr	r2, [pc, #280]	@ (8000ddc <HAL_GPIO_Init+0x2fc>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d007      	beq.n	8000cd6 <HAL_GPIO_Init+0x1f6>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a45      	ldr	r2, [pc, #276]	@ (8000de0 <HAL_GPIO_Init+0x300>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_GPIO_Init+0x1f2>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e008      	b.n	8000ce4 <HAL_GPIO_Init+0x204>
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x204>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e004      	b.n	8000ce4 <HAL_GPIO_Init+0x204>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_Init+0x204>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_Init+0x204>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	f002 0203 	and.w	r2, r2, #3
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	4093      	lsls	r3, r2
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf4:	4935      	ldr	r1, [pc, #212]	@ (8000dcc <HAL_GPIO_Init+0x2ec>)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b38      	ldr	r3, [pc, #224]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d26:	4a2f      	ldr	r2, [pc, #188]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d50:	4a24      	ldr	r2, [pc, #144]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000da4:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3301      	adds	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	f67f aea2 	bls.w	8000afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40013c00 	.word	0x40013c00

08000de8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e101      	b.n	8000ffe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d106      	bne.n	8000e1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f005 f9e9 	bl	80061ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e28:	d102      	bne.n	8000e30 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 ff56 	bl	8002ce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7c1a      	ldrb	r2, [r3, #16]
 8000e42:	f88d 2000 	strb.w	r2, [sp]
 8000e46:	3304      	adds	r3, #4
 8000e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e4a:	f001 fe35 	bl	8002ab8 <USB_CoreInit>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d005      	beq.n	8000e60 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e0ce      	b.n	8000ffe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 ff4e 	bl	8002d08 <USB_SetCurrentMode>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2202      	movs	r2, #2
 8000e76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0bf      	b.n	8000ffe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e04a      	b.n	8000f1a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	3315      	adds	r3, #21
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	3314      	adds	r3, #20
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	b298      	uxth	r0, r3
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	332e      	adds	r3, #46	@ 0x2e
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3318      	adds	r3, #24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	331c      	adds	r3, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	440b      	add	r3, r1
 8000efa:	3320      	adds	r3, #32
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3324      	adds	r3, #36	@ 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	3301      	adds	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	791b      	ldrb	r3, [r3, #4]
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3af      	bcc.n	8000e84 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e044      	b.n	8000fb4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	791b      	ldrb	r3, [r3, #4]
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3b5      	bcc.n	8000f2a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7c1a      	ldrb	r2, [r3, #16]
 8000fc6:	f88d 2000 	strb.w	r2, [sp]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fce:	f001 fee7 	bl	8002da0 <USB_DevInit>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e00c      	b.n	8000ffe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 ff2b 	bl	8003e52 <USB_DevDisconnect>

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_PCD_Start+0x1c>
 800101e:	2302      	movs	r3, #2
 8001020:	e022      	b.n	8001068 <HAL_PCD_Start+0x62>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001042:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fe38 	bl	8002cc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fed9 	bl	8003e10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08d      	sub	sp, #52	@ 0x34
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff97 	bl	8003fba <USB_GetMode>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 848c 	bne.w	80019ac <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fefb 	bl	8003e94 <USB_ReadInterrupts>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 8482 	beq.w	80019aa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fee8 	bl	8003e94 <USB_ReadInterrupts>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d107      	bne.n	80010de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f002 0202 	and.w	r2, r2, #2
 80010dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fed6 	bl	8003e94 <USB_ReadInterrupts>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	d161      	bne.n	80011b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0210 	bic.w	r2, r2, #16
 8001100:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	f003 020f 	and.w	r2, r3, #15
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	3304      	adds	r3, #4
 8001120:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	0c5b      	lsrs	r3, r3, #17
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	2b02      	cmp	r3, #2
 800112c:	d124      	bne.n	8001178 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d035      	beq.n	80011a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001148:	b29b      	uxth	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	6a38      	ldr	r0, [r7, #32]
 800114e:	f002 fd0d 	bl	8003b6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115e:	441a      	add	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001170:	441a      	add	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	e016      	b.n	80011a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	0c5b      	lsrs	r3, r3, #17
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	2b06      	cmp	r3, #6
 8001182:	d110      	bne.n	80011a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800118a:	2208      	movs	r2, #8
 800118c:	4619      	mov	r1, r3
 800118e:	6a38      	ldr	r0, [r7, #32]
 8001190:	f002 fcec 	bl	8003b6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a0:	441a      	add	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0210 	orr.w	r2, r2, #16
 80011b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fe6a 	bl	8003e94 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011ca:	f040 80a7 	bne.w	800131c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fe6f 	bl	8003eba <USB_ReadDevAllOutEpInterrupt>
 80011dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80011de:	e099      	b.n	8001314 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 808e 	beq.w	8001308 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fe93 	bl	8003f22 <USB_ReadDevOutEPInterrupt>
 80011fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	015a      	lsls	r2, r3, #5
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001214:	461a      	mov	r2, r3
 8001216:	2301      	movs	r3, #1
 8001218:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800121a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fe89 	bl	8001f34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	015a      	lsls	r2, r3, #5
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	4413      	add	r3, r2
 8001234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001238:	461a      	mov	r2, r3
 800123a:	2308      	movs	r3, #8
 800123c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800123e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 ff5f 	bl	8002104 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800125c:	461a      	mov	r2, r3
 800125e:	2310      	movs	r3, #16
 8001260:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d030      	beq.n	80012ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001274:	2b80      	cmp	r3, #128	@ 0x80
 8001276:	d109      	bne.n	800128c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800128c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128e:	4613      	mov	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	3304      	adds	r3, #4
 80012a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	78db      	ldrb	r3, [r3, #3]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2200      	movs	r2, #0
 80012ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f005 f894 	bl	80063e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012c8:	461a      	mov	r2, r3
 80012ca:	2302      	movs	r3, #2
 80012cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	015a      	lsls	r2, r3, #5
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012e4:	461a      	mov	r2, r3
 80012e6:	2320      	movs	r3, #32
 80012e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	015a      	lsls	r2, r3, #5
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001300:	461a      	mov	r2, r3
 8001302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001306:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	3301      	adds	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	085b      	lsrs	r3, r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	f47f af62 	bne.w	80011e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fdb7 	bl	8003e94 <USB_ReadInterrupts>
 8001326:	4603      	mov	r3, r0
 8001328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800132c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001330:	f040 80db 	bne.w	80014ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fdd8 	bl	8003eee <USB_ReadDevAllInEpInterrupt>
 800133e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001344:	e0cd      	b.n	80014e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80c2 	beq.w	80014d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fdfe 	bl	8003f5e <USB_ReadDevInEPInterrupt>
 8001362:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d057      	beq.n	800141e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	2201      	movs	r2, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	69f9      	ldr	r1, [r7, #28]
 800138a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800138e:	4013      	ands	r3, r2
 8001390:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	015a      	lsls	r2, r3, #5
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800139e:	461a      	mov	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d132      	bne.n	8001412 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	3320      	adds	r3, #32
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c2:	4613      	mov	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4403      	add	r3, r0
 80013cc:	331c      	adds	r3, #28
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4419      	add	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4403      	add	r3, r0
 80013e0:	3320      	adds	r3, #32
 80013e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d113      	bne.n	8001412 <HAL_PCD_IRQHandler+0x3a2>
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3324      	adds	r3, #36	@ 0x24
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800140a:	461a      	mov	r2, r3
 800140c:	2101      	movs	r1, #1
 800140e:	f002 fe05 	bl	800401c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f004 ff68 	bl	80062ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001434:	461a      	mov	r2, r3
 8001436:	2308      	movs	r3, #8
 8001438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001450:	461a      	mov	r2, r3
 8001452:	2310      	movs	r3, #16
 8001454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800146c:	461a      	mov	r2, r3
 800146e:	2340      	movs	r3, #64	@ 0x40
 8001470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d023      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800147c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800147e:	6a38      	ldr	r0, [r7, #32]
 8001480:	f001 fdf2 	bl	8003068 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	3310      	adds	r3, #16
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	3304      	adds	r3, #4
 8001496:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2200      	movs	r2, #0
 80014a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f004 ffab 	bl	8006408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014be:	461a      	mov	r2, r3
 80014c0:	2302      	movs	r3, #2
 80014c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fca3 	bl	8001e1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	3301      	adds	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f47f af2e 	bne.w	8001346 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fcd0 	bl	8003e94 <USB_ReadInterrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014fe:	d122      	bne.n	8001546 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fe89 	bl	8002240 <HAL_PCDEx_LPM_Callback>
 800152e:	e002      	b.n	8001536 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f004 ff49 	bl	80063c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fca2 	bl	8003e94 <USB_ReadInterrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800155a:	d112      	bne.n	8001582 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d102      	bne.n	8001572 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f004 ff05 	bl	800637c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001580:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fc84 	bl	8003e94 <USB_ReadInterrupts>
 800158c:	4603      	mov	r3, r0
 800158e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001596:	f040 80b7 	bne.w	8001708 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2110      	movs	r1, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fd57 	bl	8003068 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015be:	e046      	b.n	800164e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80015d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015e4:	0151      	lsls	r1, r2, #5
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	440a      	add	r2, r1
 80015ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80015ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001600:	461a      	mov	r2, r3
 8001602:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001606:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
 8001610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001618:	0151      	lsls	r1, r2, #5
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	440a      	add	r2, r1
 800161e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001626:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001638:	0151      	lsls	r1, r2, #5
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	440a      	add	r2, r1
 800163e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001642:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001646:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	3301      	adds	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001656:	4293      	cmp	r3, r2
 8001658:	d3b2      	bcc.n	80015c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001668:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800166c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7bdb      	ldrb	r3, [r3, #15]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d016      	beq.n	80016a4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800167c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001686:	f043 030b 	orr.w	r3, r3, #11
 800168a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800169c:	f043 030b 	orr.w	r3, r3, #11
 80016a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a2:	e015      	b.n	80016d0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016b6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80016ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016ca:	f043 030b 	orr.w	r3, r3, #11
 80016ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80016e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016f2:	461a      	mov	r2, r3
 80016f4:	f002 fc92 	bl	800401c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fbc1 	bl	8003e94 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800171c:	d123      	bne.n	8001766 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fc57 	bl	8003fd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f001 fd14 	bl	800315a <USB_GetDevSpeed>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681c      	ldr	r4, [r3, #0]
 800173e:	f001 f9af 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8001742:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001748:	461a      	mov	r2, r3
 800174a:	4620      	mov	r0, r4
 800174c:	f001 fa18 	bl	8002b80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f004 fdf4 	bl	800633e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001764:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fb92 	bl	8003e94 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b08      	cmp	r3, #8
 8001778:	d10a      	bne.n	8001790 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f004 fdd1 	bl	8006322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f002 0208 	and.w	r2, r2, #8
 800178e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fb7d 	bl	8003e94 <USB_ReadInterrupts>
 800179a:	4603      	mov	r3, r0
 800179c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a0:	2b80      	cmp	r3, #128	@ 0x80
 80017a2:	d123      	bne.n	80017ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017b0:	2301      	movs	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	e014      	b.n	80017e0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 faf0 	bl	8001dba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	461a      	mov	r2, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d3e4      	bcc.n	80017b6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fb4f 	bl	8003e94 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001800:	d13c      	bne.n	800187c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	e02b      	b.n	8001860 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3318      	adds	r3, #24
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d115      	bne.n	800185a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800182e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001830:	2b00      	cmp	r3, #0
 8001832:	da12      	bge.n	800185a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3317      	adds	r3, #23
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fab0 	bl	8001dba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	3301      	adds	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	791b      	ldrb	r3, [r3, #4]
 8001864:	461a      	mov	r2, r3
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	4293      	cmp	r3, r2
 800186a:	d3cd      	bcc.n	8001808 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800187a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fb07 	bl	8003e94 <USB_ReadInterrupts>
 8001886:	4603      	mov	r3, r0
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001890:	d156      	bne.n	8001940 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
 8001896:	e045      	b.n	8001924 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d12e      	bne.n	800191e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da2b      	bge.n	800191e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80018d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d121      	bne.n	800191e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10a      	bne.n	800191e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191a:	6053      	str	r3, [r2, #4]
            break;
 800191c:	e008      	b.n	8001930 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	3301      	adds	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	461a      	mov	r2, r3
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	4293      	cmp	r3, r2
 800192e:	d3b3      	bcc.n	8001898 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800193e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f002 faa5 	bl	8003e94 <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001954:	d10a      	bne.n	800196c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f004 fd68 	bl	800642c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fa8f 	bl	8003e94 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b04      	cmp	r3, #4
 800197e:	d115      	bne.n	80019ac <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f004 fd58 	bl	8006448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	e000      	b.n	80019ac <HAL_PCD_IRQHandler+0x93c>
      return;
 80019aa:	bf00      	nop
    }
  }
}
 80019ac:	3734      	adds	r7, #52	@ 0x34
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}

080019b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_PCD_SetAddress+0x1a>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e012      	b.n	80019f2 <HAL_PCD_SetAddress+0x40>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 f9ee 	bl	8003dc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	4608      	mov	r0, r1
 8001a04:	4611      	mov	r1, r2
 8001a06:	461a      	mov	r2, r3
 8001a08:	4603      	mov	r3, r0
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	803b      	strh	r3, [r7, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da0f      	bge.n	8001a40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 020f 	and.w	r2, r3, #15
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	3310      	adds	r3, #16
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	705a      	strb	r2, [r3, #1]
 8001a3e:	e00f      	b.n	8001a60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a8a:	78bb      	ldrb	r3, [r7, #2]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d102      	bne.n	8001a96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_EP_Open+0xaa>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e00e      	b.n	8001ac2 <HAL_PCD_EP_Open+0xc8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fb76 	bl	80031a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da0f      	bge.n	8001afe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 020f 	and.w	r2, r3, #15
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3310      	adds	r3, #16
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	705a      	strb	r2, [r3, #1]
 8001afc:	e00f      	b.n	8001b1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	f003 020f 	and.w	r2, r3, #15
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_EP_Close+0x6e>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e00e      	b.n	8001b56 <HAL_PCD_EP_Close+0x8c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fbb4 	bl	80032b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	799b      	ldrb	r3, [r3, #6]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	799b      	ldrb	r3, [r3, #6]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6979      	ldr	r1, [r7, #20]
 8001bc6:	f001 fc51 	bl	800346c <USB_EPStartXfer>

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	460b      	mov	r3, r1
 8001be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3310      	adds	r3, #16
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2201      	movs	r2, #1
 8001c12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	799b      	ldrb	r3, [r3, #6]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d102      	bne.n	8001c2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	799b      	ldrb	r3, [r3, #6]
 8001c36:	461a      	mov	r2, r3
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	f001 fc17 	bl	800346c <USB_EPStartXfer>

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	7912      	ldrb	r2, [r2, #4]
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e04f      	b.n	8001d06 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da0f      	bge.n	8001c8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 020f 	and.w	r2, r3, #15
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3310      	adds	r3, #16
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	705a      	strb	r2, [r3, #1]
 8001c8c:	e00d      	b.n	8001caa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_PCD_EP_SetStall+0x82>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e01d      	b.n	8001d06 <HAL_PCD_EP_SetStall+0xbe>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 ff9f 	bl	8003c1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7999      	ldrb	r1, [r3, #6]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f002 f990 	bl	800401c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	7912      	ldrb	r2, [r2, #4]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e042      	b.n	8001db2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da0f      	bge.n	8001d54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 020f 	and.w	r2, r3, #15
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	3310      	adds	r3, #16
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
 8001d52:	e00f      	b.n	8001d74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_PCD_EP_ClrStall+0x86>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e00e      	b.n	8001db2 <HAL_PCD_EP_ClrStall+0xa4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 ffa8 	bl	8003cf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da0c      	bge.n	8001de8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	3310      	adds	r3, #16
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e00c      	b.n	8001e02 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fdc7 	bl	800399c <USB_EPStopXfer>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e12:	7afb      	ldrb	r3, [r7, #11]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3310      	adds	r3, #16
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d901      	bls.n	8001e54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e06b      	b.n	8001f2c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d902      	bls.n	8001e70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3303      	adds	r3, #3
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e78:	e02a      	b.n	8001ed0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f001 fe1c 	bl	8003af0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	441a      	add	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d809      	bhi.n	8001efa <PCD_WriteEmptyTxFifo+0xde>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d203      	bcs.n	8001efa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1bf      	bne.n	8001e7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d811      	bhi.n	8001f2a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	6939      	ldr	r1, [r7, #16]
 8001f22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f26:	4013      	ands	r3, r2
 8001f28:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	333c      	adds	r3, #60	@ 0x3c
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	799b      	ldrb	r3, [r3, #6]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d17b      	bne.n	8002062 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	4a61      	ldr	r2, [pc, #388]	@ (80020fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	f240 80b9 	bls.w	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80b3 	beq.w	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f9c:	6093      	str	r3, [r2, #8]
 8001f9e:	e0a7      	b.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2320      	movs	r3, #32
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	e098      	b.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 8093 	bne.w	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80020fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d90f      	bls.n	8001ff2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fee:	6093      	str	r3, [r2, #8]
 8001ff0:	e07e      	b.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a1a      	ldr	r2, [r3, #32]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	0159      	lsls	r1, r3, #5
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	440b      	add	r3, r1
 8002014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d114      	bne.n	8002054 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800203c:	461a      	mov	r2, r3
 800203e:	2101      	movs	r1, #1
 8002040:	f001 ffec 	bl	800401c <USB_EP0_OutStart>
 8002044:	e006      	b.n	8002054 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	441a      	add	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f004 f92c 	bl	80062b8 <HAL_PCD_DataOutStageCallback>
 8002060:	e046      	b.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d124      	bne.n	80020b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002080:	461a      	mov	r2, r3
 8002082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002086:	6093      	str	r3, [r2, #8]
 8002088:	e032      	b.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020a0:	461a      	mov	r2, r3
 80020a2:	2320      	movs	r3, #32
 80020a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f004 f903 	bl	80062b8 <HAL_PCD_DataOutStageCallback>
 80020b2:	e01d      	b.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020dc:	461a      	mov	r2, r3
 80020de:	2100      	movs	r1, #0
 80020e0:	f001 ff9c 	bl	800401c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f004 f8e4 	bl	80062b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	4f54300a 	.word	0x4f54300a
 8002100:	4f54310a 	.word	0x4f54310a

08002104 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	333c      	adds	r3, #60	@ 0x3c
 800211c:	3304      	adds	r3, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a15      	ldr	r2, [pc, #84]	@ (800218c <PCD_EP_OutSetupPacket_int+0x88>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d90e      	bls.n	8002158 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002150:	461a      	mov	r2, r3
 8002152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002156:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f004 f89b 	bl	8006294 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <PCD_EP_OutSetupPacket_int+0x88>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d90c      	bls.n	8002180 <PCD_EP_OutSetupPacket_int+0x7c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	799b      	ldrb	r3, [r3, #6]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d108      	bne.n	8002180 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002178:	461a      	mov	r2, r3
 800217a:	2101      	movs	r1, #1
 800217c:	f001 ff4e 	bl	800401c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	4f54300a 	.word	0x4f54300a

08002190 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
 800219c:	4613      	mov	r3, r2
 800219e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d107      	bne.n	80021be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021ae:	883b      	ldrh	r3, [r7, #0]
 80021b0:	0419      	lsls	r1, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80021bc:	e028      	b.n	8002210 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4413      	add	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e00d      	b.n	80021ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	3340      	adds	r3, #64	@ 0x40
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	3301      	adds	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d3ec      	bcc.n	80021d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021f8:	883b      	ldrh	r3, [r7, #0]
 80021fa:	0418      	lsls	r0, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	3b01      	subs	r3, #1
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	4302      	orrs	r2, r0
 8002208:	3340      	adds	r3, #64	@ 0x40
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e267      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d075      	beq.n	8002362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002276:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d00c      	beq.n	800229c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b85      	ldr	r3, [pc, #532]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d112      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b82      	ldr	r3, [pc, #520]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d05b      	beq.n	8002360 <HAL_RCC_OscConfig+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d157      	bne.n	8002360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e242      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x74>
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6f      	ldr	r2, [pc, #444]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022f0:	4b69      	ldr	r3, [pc, #420]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a68      	ldr	r2, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe faa4 	bl	800085c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe faa0 	bl	800085c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e207      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xc0>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fa90 	bl	800085c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fa8c 	bl	800085c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1f3      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0xe8>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236e:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b44      	ldr	r3, [pc, #272]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c7      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b34      	ldr	r3, [pc, #208]	@ (800249c <HAL_RCC_OscConfig+0x244>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fa45 	bl	800085c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fa41 	bl	800085c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a8      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4925      	ldr	r1, [pc, #148]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCC_OscConfig+0x244>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fa24 	bl	800085c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe fa20 	bl	800085c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e187      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d036      	beq.n	80024b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_RCC_OscConfig+0x248>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fa04 	bl	800085c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002458:	f7fe fa00 	bl	800085c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e167      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x200>
 8002476:	e01b      	b.n	80024b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_OscConfig+0x248>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe f9ed 	bl	800085c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	e00e      	b.n	80024a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe f9e9 	bl	800085c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d907      	bls.n	80024a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e150      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	42470000 	.word	0x42470000
 80024a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ea      	bne.n	8002486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8097 	beq.w	80025ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b81      	ldr	r3, [pc, #516]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b7d      	ldr	r3, [pc, #500]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	4a7c      	ldr	r2, [pc, #496]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024de:	4b7a      	ldr	r3, [pc, #488]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b77      	ldr	r3, [pc, #476]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b74      	ldr	r3, [pc, #464]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a73      	ldr	r2, [pc, #460]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe f9a9 	bl	800085c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe f9a5 	bl	800085c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e10c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x2ea>
 8002534:	4b64      	ldr	r3, [pc, #400]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a63      	ldr	r2, [pc, #396]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x30c>
 800254a:	4b5f      	ldr	r3, [pc, #380]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a5e      	ldr	r2, [pc, #376]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
 8002556:	4b5c      	ldr	r3, [pc, #368]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a5b      	ldr	r2, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002564:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a57      	ldr	r2, [pc, #348]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a54      	ldr	r2, [pc, #336]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe f96a 	bl	800085c <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe f966 	bl	800085c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0cb      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	4b49      	ldr	r3, [pc, #292]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <HAL_RCC_OscConfig+0x334>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe f954 	bl	800085c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe f950 	bl	800085c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0b5      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	4b3e      	ldr	r3, [pc, #248]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b39      	ldr	r3, [pc, #228]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	4a38      	ldr	r2, [pc, #224]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a1 	beq.w	8002738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f6:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d05c      	beq.n	80026bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d141      	bne.n	800268e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <HAL_RCC_OscConfig+0x478>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe f924 	bl	800085c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe f920 	bl	800085c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e087      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	491b      	ldr	r1, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe f8f9 	bl	800085c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe f8f5 	bl	800085c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e05c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x416>
 800268c:	e054      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe f8e2 	bl	800085c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe f8de 	bl	800085c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e045      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
 80026ba:	e03d      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e038      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x4ec>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d028      	beq.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d121      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d11a      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800270a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cc      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b68      	ldr	r3, [pc, #416]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d90c      	bls.n	8002784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e067      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4934      	ldr	r1, [pc, #208]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe f810 	bl	800085c <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe f80c 	bl	800085c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b25      	ldr	r3, [pc, #148]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd ff70 	bl	80007d4 <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	080068a0 	.word	0x080068a0
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b090      	sub	sp, #64	@ 0x40
 800291a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292c:	4b59      	ldr	r3, [pc, #356]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d00d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x40>
 8002938:	2b08      	cmp	r3, #8
 800293a:	f200 80a1 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3a>
 8002946:	e09b      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800294c:	e09b      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294e:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002950:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002952:	e098      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002954:	4b4f      	ldr	r3, [pc, #316]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d028      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	627a      	str	r2, [r7, #36]	@ 0x24
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800297c:	2100      	movs	r1, #0
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002980:	fb03 f201 	mul.w	r2, r3, r1
 8002984:	2300      	movs	r3, #0
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	4413      	add	r3, r2
 800298c:	4a43      	ldr	r2, [pc, #268]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800298e:	fba0 1202 	umull	r1, r2, r0, r2
 8002992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002994:	460a      	mov	r2, r1
 8002996:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	2200      	movs	r2, #0
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	61fa      	str	r2, [r7, #28]
 80029a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ae:	f7fd fc11 	bl	80001d4 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4613      	mov	r3, r2
 80029b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ba:	e053      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029bc:	4b35      	ldr	r3, [pc, #212]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	2200      	movs	r2, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	617a      	str	r2, [r7, #20]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ce:	f04f 0b00 	mov.w	fp, #0
 80029d2:	4652      	mov	r2, sl
 80029d4:	465b      	mov	r3, fp
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e4:	0150      	lsls	r0, r2, #5
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	ebb2 080a 	subs.w	r8, r2, sl
 80029ee:	eb63 090b 	sbc.w	r9, r3, fp
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a06:	ebb2 0408 	subs.w	r4, r2, r8
 8002a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	00eb      	lsls	r3, r5, #3
 8002a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	4614      	mov	r4, r2
 8002a20:	461d      	mov	r5, r3
 8002a22:	eb14 030a 	adds.w	r3, r4, sl
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	eb45 030b 	adc.w	r3, r5, fp
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	028b      	lsls	r3, r1, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a44:	4621      	mov	r1, r4
 8002a46:	028a      	lsls	r2, r1, #10
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	60fa      	str	r2, [r7, #12]
 8002a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a58:	f7fd fbbc 	bl	80001d4 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3740      	adds	r7, #64	@ 0x40
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	017d7840 	.word	0x017d7840

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ab8:	b084      	sub	sp, #16
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	f107 001c 	add.w	r0, r7, #28
 8002ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d123      	bne.n	8002b1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002afa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f001 fae2 	bl	80040d8 <USB_CoreReset>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e01b      	b.n	8002b52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f001 fad6 	bl	80040d8 <USB_CoreReset>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b44:	e005      	b.n	8002b52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b52:	7fbb      	ldrb	r3, [r7, #30]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10b      	bne.n	8002b70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f043 0206 	orr.w	r2, r3, #6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b7c:	b004      	add	sp, #16
 8002b7e:	4770      	bx	lr

08002b80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d165      	bne.n	8002c60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4a41      	ldr	r2, [pc, #260]	@ (8002c9c <USB_SetTurnaroundTime+0x11c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d906      	bls.n	8002baa <USB_SetTurnaroundTime+0x2a>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ca0 <USB_SetTurnaroundTime+0x120>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d202      	bcs.n	8002baa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e062      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4a3c      	ldr	r2, [pc, #240]	@ (8002ca0 <USB_SetTurnaroundTime+0x120>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d306      	bcc.n	8002bc0 <USB_SetTurnaroundTime+0x40>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca4 <USB_SetTurnaroundTime+0x124>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d202      	bcs.n	8002bc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bba:	230e      	movs	r3, #14
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e057      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4a38      	ldr	r2, [pc, #224]	@ (8002ca4 <USB_SetTurnaroundTime+0x124>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d306      	bcc.n	8002bd6 <USB_SetTurnaroundTime+0x56>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4a37      	ldr	r2, [pc, #220]	@ (8002ca8 <USB_SetTurnaroundTime+0x128>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d202      	bcs.n	8002bd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002bd0:	230d      	movs	r3, #13
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e04c      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a33      	ldr	r2, [pc, #204]	@ (8002ca8 <USB_SetTurnaroundTime+0x128>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d306      	bcc.n	8002bec <USB_SetTurnaroundTime+0x6c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4a32      	ldr	r2, [pc, #200]	@ (8002cac <USB_SetTurnaroundTime+0x12c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d802      	bhi.n	8002bec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002be6:	230c      	movs	r3, #12
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e041      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	@ (8002cac <USB_SetTurnaroundTime+0x12c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d906      	bls.n	8002c02 <USB_SetTurnaroundTime+0x82>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb0 <USB_SetTurnaroundTime+0x130>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d802      	bhi.n	8002c02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e036      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb0 <USB_SetTurnaroundTime+0x130>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d906      	bls.n	8002c18 <USB_SetTurnaroundTime+0x98>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	@ (8002cb4 <USB_SetTurnaroundTime+0x134>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d802      	bhi.n	8002c18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c12:	230a      	movs	r3, #10
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e02b      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4a26      	ldr	r2, [pc, #152]	@ (8002cb4 <USB_SetTurnaroundTime+0x134>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d906      	bls.n	8002c2e <USB_SetTurnaroundTime+0xae>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4a25      	ldr	r2, [pc, #148]	@ (8002cb8 <USB_SetTurnaroundTime+0x138>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d202      	bcs.n	8002c2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c28:	2309      	movs	r3, #9
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e020      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <USB_SetTurnaroundTime+0x138>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d306      	bcc.n	8002c44 <USB_SetTurnaroundTime+0xc4>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <USB_SetTurnaroundTime+0x13c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d802      	bhi.n	8002c44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e015      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <USB_SetTurnaroundTime+0x13c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d906      	bls.n	8002c5a <USB_SetTurnaroundTime+0xda>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc0 <USB_SetTurnaroundTime+0x140>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d202      	bcs.n	8002c5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c54:	2307      	movs	r3, #7
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e00a      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e007      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c66:	2309      	movs	r3, #9
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e001      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	00d8acbf 	.word	0x00d8acbf
 8002ca0:	00e4e1c0 	.word	0x00e4e1c0
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	01067380 	.word	0x01067380
 8002cac:	011a499f 	.word	0x011a499f
 8002cb0:	01312cff 	.word	0x01312cff
 8002cb4:	014ca43f 	.word	0x014ca43f
 8002cb8:	016e3600 	.word	0x016e3600
 8002cbc:	01a6ab1f 	.word	0x01a6ab1f
 8002cc0:	01e84800 	.word	0x01e84800

08002cc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d115      	bne.n	8002d56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002d36:	200a      	movs	r0, #10
 8002d38:	f7fd fd9c 	bl	8000874 <HAL_Delay>
      ms += 10U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	330a      	adds	r3, #10
 8002d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f001 f939 	bl	8003fba <USB_GetMode>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d01e      	beq.n	8002d8c <USB_SetCurrentMode+0x84>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d52:	d9f0      	bls.n	8002d36 <USB_SetCurrentMode+0x2e>
 8002d54:	e01a      	b.n	8002d8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d115      	bne.n	8002d88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002d68:	200a      	movs	r0, #10
 8002d6a:	f7fd fd83 	bl	8000874 <HAL_Delay>
      ms += 10U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	330a      	adds	r3, #10
 8002d72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f001 f920 	bl	8003fba <USB_GetMode>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <USB_SetCurrentMode+0x84>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d84:	d9f0      	bls.n	8002d68 <USB_SetCurrentMode+0x60>
 8002d86:	e001      	b.n	8002d8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e005      	b.n	8002d98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002d90:	d101      	bne.n	8002d96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002da0:	b084      	sub	sp, #16
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e009      	b.n	8002dd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	3340      	adds	r3, #64	@ 0x40
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b0e      	cmp	r3, #14
 8002dd8:	d9f2      	bls.n	8002dc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002dda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11c      	bne.n	8002e1c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e1a:	e00b      	b.n	8002e34 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10d      	bne.n	8002e64 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e50:	2100      	movs	r1, #0
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f968 	bl	8003128 <USB_SetDevSpeed>
 8002e58:	e008      	b.n	8002e6c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f963 	bl	8003128 <USB_SetDevSpeed>
 8002e62:	e003      	b.n	8002e6c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e64:	2103      	movs	r1, #3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f95e 	bl	8003128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8fa 	bl	8003068 <USB_FlushTxFifo>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f924 	bl	80030cc <USB_FlushRxFifo>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e94:	461a      	mov	r2, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eac:	461a      	mov	r2, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e043      	b.n	8002f40 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ece:	d118      	bne.n	8002f02 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e013      	b.n	8002f14 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e008      	b.n	8002f14 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2300      	movs	r3, #0
 8002f12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f20:	461a      	mov	r2, r3
 8002f22:	2300      	movs	r3, #0
 8002f24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f32:	461a      	mov	r2, r3
 8002f34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f44:	461a      	mov	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d3b5      	bcc.n	8002eb8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e043      	b.n	8002fda <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f68:	d118      	bne.n	8002f9c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e013      	b.n	8002fae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e008      	b.n	8002fae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2300      	movs	r3, #0
 8002fac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002fde:	461a      	mov	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d3b5      	bcc.n	8002f52 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003006:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003008:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <USB_DevInit+0x2c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003028:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f043 0208 	orr.w	r2, r3, #8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800303c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003060:	b004      	add	sp, #16
 8003062:	4770      	bx	lr
 8003064:	803c3800 	.word	0x803c3800

08003068 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3301      	adds	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003082:	d901      	bls.n	8003088 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e01b      	b.n	80030c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	daf2      	bge.n	8003076 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	019b      	lsls	r3, r3, #6
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030ac:	d901      	bls.n	80030b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e006      	b.n	80030c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d0f0      	beq.n	80030a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030e4:	d901      	bls.n	80030ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e018      	b.n	800311c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	daf2      	bge.n	80030d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2210      	movs	r2, #16
 80030fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003108:	d901      	bls.n	800310e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e006      	b.n	800311c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d0f0      	beq.n	80030fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800315a:	b480      	push	{r7}
 800315c:	b087      	sub	sp, #28
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0306 	and.w	r3, r3, #6
 8003172:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
 800317e:	e00a      	b.n	8003196 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d002      	beq.n	800318c <USB_GetDevSpeed+0x32>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d102      	bne.n	8003192 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800318c:	2302      	movs	r3, #2
 800318e:	75fb      	strb	r3, [r7, #23]
 8003190:	e001      	b.n	8003196 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003192:	230f      	movs	r3, #15
 8003194:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d13a      	bne.n	8003236 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031de:	4313      	orrs	r3, r2
 80031e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d155      	bne.n	80032a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	791b      	ldrb	r3, [r3, #4]
 8003212:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003214:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	059b      	lsls	r3, r3, #22
 800321a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800321c:	4313      	orrs	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	0151      	lsls	r1, r2, #5
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	440a      	add	r2, r1
 8003226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e036      	b.n	80032a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003254:	4313      	orrs	r3, r2
 8003256:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11a      	bne.n	80032a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	791b      	ldrb	r3, [r3, #4]
 8003288:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800328a:	430b      	orrs	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	0151      	lsls	r1, r2, #5
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	440a      	add	r2, r1
 8003296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d161      	bne.n	8003394 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032e6:	d11f      	bne.n	8003328 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	0151      	lsls	r1, r2, #5
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	440a      	add	r2, r1
 80032fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003302:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003306:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	0151      	lsls	r1, r2, #5
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	440a      	add	r2, r1
 800331e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003322:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800332e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003348:	4013      	ands	r3, r2
 800334a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800336c:	4013      	ands	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	0159      	lsls	r1, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	440b      	add	r3, r1
 8003386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800338a:	4619      	mov	r1, r3
 800338c:	4b35      	ldr	r3, [pc, #212]	@ (8003464 <USB_DeactivateEndpoint+0x1b0>)
 800338e:	4013      	ands	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
 8003392:	e060      	b.n	8003456 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033aa:	d11f      	bne.n	80033ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	0151      	lsls	r1, r2, #5
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	440a      	add	r2, r1
 80033e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	43db      	mvns	r3, r3
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800340c:	4013      	ands	r3, r2
 800340e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	43db      	mvns	r3, r3
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003430:	4013      	ands	r3, r2
 8003432:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	0159      	lsls	r1, r3, #5
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	440b      	add	r3, r1
 800344a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344e:	4619      	mov	r1, r3
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <USB_DeactivateEndpoint+0x1b4>)
 8003452:	4013      	ands	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	ec337800 	.word	0xec337800
 8003468:	eff37800 	.word	0xeff37800

0800346c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b01      	cmp	r3, #1
 800348a:	f040 817a 	bne.w	8003782 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d132      	bne.n	80034fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80034b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80034b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	0151      	lsls	r1, r2, #5
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	440a      	add	r2, r1
 80034f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034f4:	0cdb      	lsrs	r3, r3, #19
 80034f6:	04db      	lsls	r3, r3, #19
 80034f8:	6113      	str	r3, [r2, #16]
 80034fa:	e092      	b.n	8003622 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	0151      	lsls	r1, r2, #5
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	440a      	add	r2, r1
 8003512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003516:	0cdb      	lsrs	r3, r3, #19
 8003518:	04db      	lsls	r3, r3, #19
 800351a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003536:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800353a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800353e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11a      	bne.n	800357c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d903      	bls.n	800355a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	0151      	lsls	r1, r2, #5
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	440a      	add	r2, r1
 8003570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003574:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003578:	6113      	str	r3, [r2, #16]
 800357a:	e01b      	b.n	80035b4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003588:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	440b      	add	r3, r1
 8003594:	1e59      	subs	r1, r3, #1
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	fbb1 f3f3 	udiv	r3, r1, r3
 800359e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035a0:	4ba2      	ldr	r3, [pc, #648]	@ (800382c <USB_EPStartXfer+0x3c0>)
 80035a2:	400b      	ands	r3, r1
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	0148      	lsls	r0, r1, #5
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	4401      	add	r1, r0
 80035ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80035b0:	4313      	orrs	r3, r2
 80035b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ca:	69b9      	ldr	r1, [r7, #24]
 80035cc:	0148      	lsls	r0, r1, #5
 80035ce:	69f9      	ldr	r1, [r7, #28]
 80035d0:	4401      	add	r1, r0
 80035d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d11f      	bne.n	8003622 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003600:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800361c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003620:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d14b      	bne.n	80036c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	791b      	ldrb	r3, [r3, #4]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d128      	bne.n	800369e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d110      	bne.n	800367e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003676:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e00f      	b.n	800369e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	0151      	lsls	r1, r2, #5
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	440a      	add	r2, r1
 8003694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e165      	b.n	800398c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	0151      	lsls	r1, r2, #5
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	440a      	add	r2, r1
 80036d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80036de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	791b      	ldrb	r3, [r3, #4]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d015      	beq.n	8003714 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 814d 	beq.w	800398c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	69f9      	ldr	r1, [r7, #28]
 800370a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800370e:	4313      	orrs	r3, r2
 8003710:	634b      	str	r3, [r1, #52]	@ 0x34
 8003712:	e13b      	b.n	800398c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	440a      	add	r2, r1
 800373a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800373e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e00f      	b.n	8003766 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003764:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	68d9      	ldr	r1, [r3, #12]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	b298      	uxth	r0, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f9b8 	bl	8003af0 <USB_WritePacket>
 8003780:	e104      	b.n	800398c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	0151      	lsls	r1, r2, #5
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	440a      	add	r2, r1
 8003798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800379c:	0cdb      	lsrs	r3, r3, #19
 800379e:	04db      	lsls	r3, r3, #19
 80037a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037c4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d131      	bne.n	8003830 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	0148      	lsls	r0, r1, #5
 80037fe:	69f9      	ldr	r1, [r7, #28]
 8003800:	4401      	add	r1, r0
 8003802:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003824:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003828:	6113      	str	r3, [r2, #16]
 800382a:	e061      	b.n	80038f0 <USB_EPStartXfer+0x484>
 800382c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d123      	bne.n	8003880 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	0148      	lsls	r0, r1, #5
 8003852:	69f9      	ldr	r1, [r7, #28]
 8003854:	4401      	add	r1, r0
 8003856:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800385a:	4313      	orrs	r3, r2
 800385c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	0151      	lsls	r1, r2, #5
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	440a      	add	r2, r1
 8003874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003878:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800387c:	6113      	str	r3, [r2, #16]
 800387e:	e037      	b.n	80038f0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4413      	add	r3, r2
 800388a:	1e5a      	subs	r2, r3, #1
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	8afa      	ldrh	r2, [r7, #22]
 800389c:	fb03 f202 	mul.w	r2, r3, r2
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	8afb      	ldrh	r3, [r7, #22]
 80038b4:	04d9      	lsls	r1, r3, #19
 80038b6:	4b38      	ldr	r3, [pc, #224]	@ (8003998 <USB_EPStartXfer+0x52c>)
 80038b8:	400b      	ands	r3, r1
 80038ba:	69b9      	ldr	r1, [r7, #24]
 80038bc:	0148      	lsls	r0, r1, #5
 80038be:	69f9      	ldr	r1, [r7, #28]
 80038c0:	4401      	add	r1, r0
 80038c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038c6:	4313      	orrs	r3, r2
 80038c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	0148      	lsls	r0, r1, #5
 80038e4:	69f9      	ldr	r1, [r7, #28]
 80038e6:	4401      	add	r1, r0
 80038e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10d      	bne.n	8003912 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	68d9      	ldr	r1, [r3, #12]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390e:	460a      	mov	r2, r1
 8003910:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d128      	bne.n	800396c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d110      	bne.n	800394c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	440a      	add	r2, r1
 8003940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003944:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00f      	b.n	800396c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	440a      	add	r2, r1
 8003982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003986:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800398a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	1ff80000 	.word	0x1ff80000

0800399c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d14a      	bne.n	8003a50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039d2:	f040 8086 	bne.w	8003ae2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d902      	bls.n	8003a34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
          break;
 8003a32:	e056      	b.n	8003ae2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a4c:	d0e7      	beq.n	8003a1e <USB_EPStopXfer+0x82>
 8003a4e:	e048      	b.n	8003ae2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a68:	d13b      	bne.n	8003ae2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	0151      	lsls	r1, r2, #5
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	440a      	add	r2, r1
 8003a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	0151      	lsls	r1, r2, #5
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ab0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d902      	bls.n	8003ac8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ac6:	e00c      	b.n	8003ae2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ae0:	d0e7      	beq.n	8003ab2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	@ 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	460b      	mov	r3, r1
 8003b00:	71fb      	strb	r3, [r7, #7]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d123      	bne.n	8003b5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b16:	88bb      	ldrh	r3, [r7, #4]
 8003b18:	3303      	adds	r3, #3
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e018      	b.n	8003b56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	031a      	lsls	r2, r3, #12
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b30:	461a      	mov	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3e2      	bcc.n	8003b24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3724      	adds	r7, #36	@ 0x24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b08b      	sub	sp, #44	@ 0x2c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	e014      	b.n	8003bc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	3301      	adds	r3, #1
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	623b      	str	r3, [r7, #32]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3e6      	bcc.n	8003b98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003bca:	8bfb      	ldrh	r3, [r7, #30]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01e      	beq.n	8003c0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	701a      	strb	r2, [r3, #0]
      i++;
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	3301      	adds	r3, #1
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003c02:	8bfb      	ldrh	r3, [r7, #30]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c08:	8bfb      	ldrh	r3, [r7, #30]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1ea      	bne.n	8003be4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	372c      	adds	r7, #44	@ 0x2c
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d12c      	bne.n	8003c92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	db12      	blt.n	8003c70 <USB_EPSetStall+0x54>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00f      	beq.n	8003c70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e02b      	b.n	8003cea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	db12      	blt.n	8003cca <USB_EPSetStall+0xae>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00f      	beq.n	8003cca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ce4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d128      	bne.n	8003d66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	791b      	ldrb	r3, [r3, #4]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d003      	beq.n	8003d44 <USB_EPClearStall+0x4c>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d138      	bne.n	8003db6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e027      	b.n	8003db6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	791b      	ldrb	r3, [r3, #4]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d003      	beq.n	8003d96 <USB_EPClearStall+0x9e>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	791b      	ldrb	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d10f      	bne.n	8003db6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	0151      	lsls	r1, r2, #5
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	440a      	add	r2, r1
 8003dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003de6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e3e:	f023 0302 	bic.w	r3, r3, #2
 8003e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	b29b      	uxth	r3, r3
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f50:	68bb      	ldr	r3, [r7, #8]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fac:	68bb      	ldr	r3, [r7, #8]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ff4:	f023 0307 	bic.w	r3, r3, #7
 8003ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	460b      	mov	r3, r1
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	333c      	adds	r3, #60	@ 0x3c
 8004032:	3304      	adds	r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4a26      	ldr	r2, [pc, #152]	@ (80040d4 <USB_EP0_OutStart+0xb8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d90a      	bls.n	8004056 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800404c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004050:	d101      	bne.n	8004056 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e037      	b.n	80040c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004084:	f043 0318 	orr.w	r3, r3, #24
 8004088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004098:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800409c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10f      	bne.n	80040c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80040c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	4f54300a 	.word	0x4f54300a

080040d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040f0:	d901      	bls.n	80040f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e01b      	b.n	800412e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	daf2      	bge.n	80040e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800411a:	d901      	bls.n	8004120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e006      	b.n	800412e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d0f0      	beq.n	800410e <USB_CoreReset+0x36>

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004148:	2018      	movs	r0, #24
 800414a:	f002 fb03 	bl	8006754 <USBD_static_malloc>
 800414e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	32b0      	adds	r2, #176	@ 0xb0
 8004160:	2100      	movs	r1, #0
 8004162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004166:	2302      	movs	r3, #2
 8004168:	e08a      	b.n	8004280 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	32b0      	adds	r2, #176	@ 0xb0
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	32b0      	adds	r2, #176	@ 0xb0
 8004184:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7c1b      	ldrb	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11b      	bne.n	80041ce <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004196:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <USBD_CUSTOM_HID_Init+0x14c>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3326      	adds	r3, #38	@ 0x26
 80041ac:	2205      	movs	r2, #5
 80041ae:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80041b0:	4b36      	ldr	r3, [pc, #216]	@ (800428c <USBD_CUSTOM_HID_Init+0x150>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80041c8:	2205      	movs	r2, #5
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	e01a      	b.n	8004204 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80041ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <USBD_CUSTOM_HID_Init+0x14c>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3326      	adds	r3, #38	@ 0x26
 80041e4:	2205      	movs	r2, #5
 80041e6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80041e8:	4b28      	ldr	r3, [pc, #160]	@ (800428c <USBD_CUSTOM_HID_Init+0x150>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004200:	2205      	movs	r2, #5
 8004202:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004204:	4b20      	ldr	r3, [pc, #128]	@ (8004288 <USBD_CUSTOM_HID_Init+0x14c>)
 8004206:	7819      	ldrb	r1, [r3, #0]
 8004208:	2302      	movs	r3, #2
 800420a:	2203      	movs	r2, #3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f002 f990 	bl	8006532 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <USBD_CUSTOM_HID_Init+0x14c>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f003 020f 	and.w	r2, r3, #15
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3324      	adds	r3, #36	@ 0x24
 8004228:	2201      	movs	r2, #1
 800422a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800422c:	4b17      	ldr	r3, [pc, #92]	@ (800428c <USBD_CUSTOM_HID_Init+0x150>)
 800422e:	7819      	ldrb	r1, [r3, #0]
 8004230:	2302      	movs	r3, #2
 8004232:	2203      	movs	r2, #3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f002 f97c 	bl	8006532 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <USBD_CUSTOM_HID_Init+0x150>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f003 020f 	and.w	r2, r3, #15
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004252:	2201      	movs	r2, #1
 8004254:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	33b0      	adds	r3, #176	@ 0xb0
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <USBD_CUSTOM_HID_Init+0x150>)
 8004272:	7819      	ldrb	r1, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	2302      	movs	r3, #2
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f002 fa49 	bl	8006710 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000086 	.word	0x20000086
 800428c:	20000087 	.word	0x20000087

08004290 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800429c:	4b37      	ldr	r3, [pc, #220]	@ (800437c <USBD_CUSTOM_HID_DeInit+0xec>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f002 f96b 	bl	800657e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80042a8:	4b34      	ldr	r3, [pc, #208]	@ (800437c <USBD_CUSTOM_HID_DeInit+0xec>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3324      	adds	r3, #36	@ 0x24
 80042be:	2200      	movs	r2, #0
 80042c0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80042c2:	4b2e      	ldr	r3, [pc, #184]	@ (800437c <USBD_CUSTOM_HID_DeInit+0xec>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3326      	adds	r3, #38	@ 0x26
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80042dc:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f002 f94b 	bl	800657e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80042e8:	4b25      	ldr	r3, [pc, #148]	@ (8004380 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f003 020f 	and.w	r2, r3, #15
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800431c:	2200      	movs	r2, #0
 800431e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	32b0      	adds	r2, #176	@ 0xb0
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01f      	beq.n	8004372 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	33b0      	adds	r3, #176	@ 0xb0
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	32b0      	adds	r2, #176	@ 0xb0
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	4618      	mov	r0, r3
 8004356:	f002 fa0b 	bl	8006770 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	32b0      	adds	r2, #176	@ 0xb0
 8004364:	2100      	movs	r1, #0
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000086 	.word	0x20000086
 8004380:	20000087 	.word	0x20000087

08004384 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	32b0      	adds	r2, #176	@ 0xb0
 8004398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0f8      	b.n	80045aa <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d056      	beq.n	8004472 <USBD_CUSTOM_HID_Setup+0xee>
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	f040 80e8 	bne.w	800459a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	3b02      	subs	r3, #2
 80043d0:	2b09      	cmp	r3, #9
 80043d2:	d846      	bhi.n	8004462 <USBD_CUSTOM_HID_Setup+0xde>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <USBD_CUSTOM_HID_Setup+0x58>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004435 	.word	0x08004435
 80043e0:	08004413 	.word	0x08004413
 80043e4:	08004463 	.word	0x08004463
 80043e8:	08004463 	.word	0x08004463
 80043ec:	08004463 	.word	0x08004463
 80043f0:	08004463 	.word	0x08004463
 80043f4:	08004463 	.word	0x08004463
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004423 	.word	0x08004423
 8004400:	08004405 	.word	0x08004405
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	885b      	ldrh	r3, [r3, #2]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]
          break;
 8004410:	e02e      	b.n	8004470 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3304      	adds	r3, #4
 8004416:	2201      	movs	r2, #1
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 fcca 	bl	8005db4 <USBD_CtlSendData>
          break;
 8004420:	e026      	b.n	8004470 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	885b      	ldrh	r3, [r3, #2]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	b29b      	uxth	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
          break;
 8004432:	e01d      	b.n	8004470 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3308      	adds	r3, #8
 8004438:	2201      	movs	r2, #1
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 fcb9 	bl	8005db4 <USBD_CtlSendData>
          break;
 8004442:	e015      	b.n	8004470 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2201      	movs	r2, #1
 8004448:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800444a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	88db      	ldrh	r3, [r3, #6]
 8004450:	2b02      	cmp	r3, #2
 8004452:	bf28      	it	cs
 8004454:	2302      	movcs	r3, #2
 8004456:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004458:	461a      	mov	r2, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f001 fcd6 	bl	8005e0c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004460:	e006      	b.n	8004470 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 fc34 	bl	8005cd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800446a:	2303      	movs	r3, #3
 800446c:	75fb      	strb	r3, [r7, #23]
          break;
 800446e:	bf00      	nop
      }
      break;
 8004470:	e09a      	b.n	80045a8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	2b0b      	cmp	r3, #11
 8004478:	f200 8086 	bhi.w	8004588 <USBD_CUSTOM_HID_Setup+0x204>
 800447c:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <USBD_CUSTOM_HID_Setup+0x100>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b5 	.word	0x080044b5
 8004488:	08004597 	.word	0x08004597
 800448c:	08004589 	.word	0x08004589
 8004490:	08004589 	.word	0x08004589
 8004494:	08004589 	.word	0x08004589
 8004498:	08004589 	.word	0x08004589
 800449c:	080044df 	.word	0x080044df
 80044a0:	08004589 	.word	0x08004589
 80044a4:	08004589 	.word	0x08004589
 80044a8:	08004589 	.word	0x08004589
 80044ac:	08004537 	.word	0x08004537
 80044b0:	08004561 	.word	0x08004561
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d107      	bne.n	80044d0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80044c0:	f107 030e 	add.w	r3, r7, #14
 80044c4:	2202      	movs	r2, #2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f001 fc73 	bl	8005db4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044ce:	e063      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f001 fbfd 	bl	8005cd2 <USBD_CtlError>
            ret = USBD_FAIL;
 80044d8:	2303      	movs	r3, #3
 80044da:	75fb      	strb	r3, [r7, #23]
          break;
 80044dc:	e05c      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	885b      	ldrh	r3, [r3, #2]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b22      	cmp	r3, #34	@ 0x22
 80044e8:	d110      	bne.n	800450c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	88db      	ldrh	r3, [r3, #6]
 80044ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80044f0:	bf28      	it	cs
 80044f2:	233f      	movcs	r3, #63	@ 0x3f
 80044f4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	33b0      	adds	r3, #176	@ 0xb0
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e00d      	b.n	8004528 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	885b      	ldrh	r3, [r3, #2]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b21      	cmp	r3, #33	@ 0x21
 8004516:	d107      	bne.n	8004528 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004518:	4b26      	ldr	r3, [pc, #152]	@ (80045b4 <USBD_CUSTOM_HID_Setup+0x230>)
 800451a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	88db      	ldrh	r3, [r3, #6]
 8004520:	2b09      	cmp	r3, #9
 8004522:	bf28      	it	cs
 8004524:	2309      	movcs	r3, #9
 8004526:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004528:	8bfb      	ldrh	r3, [r7, #30]
 800452a:	461a      	mov	r2, r3
 800452c:	69b9      	ldr	r1, [r7, #24]
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 fc40 	bl	8005db4 <USBD_CtlSendData>
          break;
 8004534:	e030      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	330c      	adds	r3, #12
 8004546:	2201      	movs	r2, #1
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fc32 	bl	8005db4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004550:	e022      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 fbbc 	bl	8005cd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800455a:	2303      	movs	r3, #3
 800455c:	75fb      	strb	r3, [r7, #23]
          break;
 800455e:	e01b      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b03      	cmp	r3, #3
 800456a:	d106      	bne.n	800457a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	885b      	ldrh	r3, [r3, #2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004578:	e00e      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f001 fba8 	bl	8005cd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004582:	2303      	movs	r3, #3
 8004584:	75fb      	strb	r3, [r7, #23]
          break;
 8004586:	e007      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f001 fba1 	bl	8005cd2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004590:	2303      	movs	r3, #3
 8004592:	75fb      	strb	r3, [r7, #23]
          break;
 8004594:	e000      	b.n	8004598 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8004596:	bf00      	nop
      }
      break;
 8004598:	e006      	b.n	80045a8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f001 fb98 	bl	8005cd2 <USBD_CtlError>
      ret = USBD_FAIL;
 80045a2:	2303      	movs	r3, #3
 80045a4:	75fb      	strb	r3, [r7, #23]
      break;
 80045a6:	bf00      	nop
  }
  return (uint8_t)ret;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000070 	.word	0x20000070

080045b8 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	32b0      	adds	r2, #176	@ 0xb0
 80045d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80045dc:	2303      	movs	r3, #3
 80045de:	e017      	b.n	8004610 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d110      	bne.n	800460e <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	7d1b      	ldrb	r3, [r3, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2201      	movs	r2, #1
 80045f8:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80045fa:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <USBD_CUSTOM_HID_SendReport+0x60>)
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f002 f863 	bl	80066ce <USBD_LL_Transmit>
 8004608:	e001      	b.n	800460e <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000086 	.word	0x20000086

0800461c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004624:	2181      	movs	r1, #129	@ 0x81
 8004626:	4815      	ldr	r0, [pc, #84]	@ (800467c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004628:	f000 fd1d 	bl	8005066 <USBD_GetEpDesc>
 800462c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800462e:	2101      	movs	r1, #1
 8004630:	4812      	ldr	r0, [pc, #72]	@ (800467c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004632:	f000 fd18 	bl	8005066 <USBD_GetEpDesc>
 8004636:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f042 0202 	orr.w	r2, r2, #2
 8004646:	711a      	strb	r2, [r3, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2205      	movs	r2, #5
 8004650:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	f042 0202 	orr.w	r2, r2, #2
 8004660:	711a      	strb	r2, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2205      	movs	r2, #5
 800466a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2229      	movs	r2, #41	@ 0x29
 8004670:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004672:	4b02      	ldr	r3, [pc, #8]	@ (800467c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000044 	.word	0x20000044

08004680 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004688:	2181      	movs	r1, #129	@ 0x81
 800468a:	4815      	ldr	r0, [pc, #84]	@ (80046e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800468c:	f000 fceb 	bl	8005066 <USBD_GetEpDesc>
 8004690:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004692:	2101      	movs	r1, #1
 8004694:	4812      	ldr	r0, [pc, #72]	@ (80046e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004696:	f000 fce6 	bl	8005066 <USBD_GetEpDesc>
 800469a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f042 0202 	orr.w	r2, r2, #2
 80046aa:	711a      	strb	r2, [r3, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2205      	movs	r2, #5
 80046b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	f042 0202 	orr.w	r2, r2, #2
 80046c4:	711a      	strb	r2, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2205      	movs	r2, #5
 80046ce:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2229      	movs	r2, #41	@ 0x29
 80046d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80046d6:	4b02      	ldr	r3, [pc, #8]	@ (80046e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000044 	.word	0x20000044

080046e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80046ec:	2181      	movs	r1, #129	@ 0x81
 80046ee:	4815      	ldr	r0, [pc, #84]	@ (8004744 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80046f0:	f000 fcb9 	bl	8005066 <USBD_GetEpDesc>
 80046f4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80046f6:	2101      	movs	r1, #1
 80046f8:	4812      	ldr	r0, [pc, #72]	@ (8004744 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80046fa:	f000 fcb4 	bl	8005066 <USBD_GetEpDesc>
 80046fe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f042 0202 	orr.w	r2, r2, #2
 800470e:	711a      	strb	r2, [r3, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2205      	movs	r2, #5
 8004718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	f042 0202 	orr.w	r2, r2, #2
 8004728:	711a      	strb	r2, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2205      	movs	r2, #5
 8004732:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2229      	movs	r2, #41	@ 0x29
 8004738:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800473a:	4b02      	ldr	r3, [pc, #8]	@ (8004744 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000044 	.word	0x20000044

08004748 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	32b0      	adds	r2, #176	@ 0xb0
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	2200      	movs	r2, #0
 8004764:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	32b0      	adds	r2, #176	@ 0xb0
 800478a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004792:	2303      	movs	r3, #3
 8004794:	e017      	b.n	80047c6 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	32b0      	adds	r2, #176	@ 0xb0
 80047a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	33b0      	adds	r3, #176	@ 0xb0
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	7810      	ldrb	r0, [r2, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	7852      	ldrb	r2, [r2, #1]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	32b0      	adds	r2, #176	@ 0xb0
 80047e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e00f      	b.n	800480e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	32b0      	adds	r2, #176	@ 0xb0
 80047f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8004800:	7819      	ldrb	r1, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	2302      	movs	r3, #2
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 ff82 	bl	8006710 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000087 	.word	0x20000087

0800481c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	32b0      	adds	r2, #176	@ 0xb0
 800482e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004832:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800483a:	2303      	movs	r3, #3
 800483c:	e016      	b.n	800486c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d111      	bne.n	800486a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	33b0      	adds	r3, #176	@ 0xb0
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	7810      	ldrb	r0, [r2, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	7852      	ldrb	r2, [r2, #1]
 8004860:	4611      	mov	r1, r2
 8004862:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	220a      	movs	r2, #10
 8004880:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004882:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	2000007c 	.word	0x2000007c

08004894 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e009      	b.n	80048bc <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	33b0      	adds	r3, #176	@ 0xb0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048dc:	2303      	movs	r3, #3
 80048de:	e01f      	b.n	8004920 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	79fa      	ldrb	r2, [r7, #7]
 8004912:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f001 fda5 	bl	8006464 <USBD_LL_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800493c:	2303      	movs	r3, #3
 800493e:	e025      	b.n	800498c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	32ae      	adds	r2, #174	@ 0xae
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00f      	beq.n	800497c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	32ae      	adds	r2, #174	@ 0xae
 8004966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	f107 020e 	add.w	r2, r7, #14
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
 8004974:	4602      	mov	r2, r0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fdad 	bl	80064fc <USBD_LL_Start>
 80049a2:	4603      	mov	r3, r0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d009      	beq.n	80049f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	4611      	mov	r1, r2
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	4611      	mov	r1, r2
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004a20:	2303      	movs	r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 f90c 	bl	8005c5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d01a      	beq.n	8004aa0 <USBD_LL_SetupStage+0x72>
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d822      	bhi.n	8004ab4 <USBD_LL_SetupStage+0x86>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <USBD_LL_SetupStage+0x4a>
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d00a      	beq.n	8004a8c <USBD_LL_SetupStage+0x5e>
 8004a76:	e01d      	b.n	8004ab4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fb63 	bl	800514c <USBD_StdDevReq>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8a:	e020      	b.n	8004ace <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fbcb 	bl	8005230 <USBD_StdItfReq>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9e:	e016      	b.n	8004ace <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fc2d 	bl	8005308 <USBD_StdEPReq>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab2:	e00c      	b.n	8004ace <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004aba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f001 fd7a 	bl	80065bc <USBD_LL_StallEP>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	bf00      	nop
  }

  return ret;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d16e      	bne.n	8004bce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004af6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	f040 8098 	bne.w	8004c34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d913      	bls.n	8004b38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bf28      	it	cs
 8004b2a:	4613      	movcs	r3, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f001 f988 	bl	8005e46 <USBD_CtlContinueRx>
 8004b36:	e07d      	b.n	8004c34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d014      	beq.n	8004b70 <USBD_LL_DataOutStage+0x98>
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d81d      	bhi.n	8004b86 <USBD_LL_DataOutStage+0xae>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <USBD_LL_DataOutStage+0x7c>
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d003      	beq.n	8004b5a <USBD_LL_DataOutStage+0x82>
 8004b52:	e018      	b.n	8004b86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	75bb      	strb	r3, [r7, #22]
            break;
 8004b58:	e018      	b.n	8004b8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	4619      	mov	r1, r3
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fa64 	bl	8005032 <USBD_CoreFindIF>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75bb      	strb	r3, [r7, #22]
            break;
 8004b6e:	e00d      	b.n	8004b8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa66 	bl	800504c <USBD_CoreFindEP>
 8004b80:	4603      	mov	r3, r0
 8004b82:	75bb      	strb	r3, [r7, #22]
            break;
 8004b84:	e002      	b.n	8004b8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75bb      	strb	r3, [r7, #22]
            break;
 8004b8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b8c:	7dbb      	ldrb	r3, [r7, #22]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d113      	bne.n	8004bc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b9e:	7dba      	ldrb	r2, [r7, #22]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	32ae      	adds	r2, #174	@ 0xae
 8004ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004bae:	7dba      	ldrb	r2, [r7, #22]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004bb6:	7dba      	ldrb	r2, [r7, #22]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	32ae      	adds	r2, #174	@ 0xae
 8004bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f001 f94e 	bl	8005e68 <USBD_CtlSendStatus>
 8004bcc:	e032      	b.n	8004c34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004bce:	7afb      	ldrb	r3, [r7, #11]
 8004bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa37 	bl	800504c <USBD_CoreFindEP>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004be2:	7dbb      	ldrb	r3, [r7, #22]
 8004be4:	2bff      	cmp	r3, #255	@ 0xff
 8004be6:	d025      	beq.n	8004c34 <USBD_LL_DataOutStage+0x15c>
 8004be8:	7dbb      	ldrb	r3, [r7, #22]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d122      	bne.n	8004c34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d117      	bne.n	8004c2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bfa:	7dba      	ldrb	r2, [r7, #22]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	32ae      	adds	r2, #174	@ 0xae
 8004c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00f      	beq.n	8004c2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004c0a:	7dba      	ldrb	r2, [r7, #22]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004c12:	7dba      	ldrb	r2, [r7, #22]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	32ae      	adds	r2, #174	@ 0xae
 8004c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	7afa      	ldrb	r2, [r7, #11]
 8004c20:	4611      	mov	r1, r2
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	4798      	blx	r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	e000      	b.n	8004c36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b086      	sub	sp, #24
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	460b      	mov	r3, r1
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c4c:	7afb      	ldrb	r3, [r7, #11]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d16f      	bne.n	8004d32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3314      	adds	r3, #20
 8004c56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d15a      	bne.n	8004d18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d914      	bls.n	8004c98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	1ad2      	subs	r2, r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f001 f8b0 	bl	8005dea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2100      	movs	r1, #0
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f001 fd3d 	bl	8006710 <USBD_LL_PrepareReceive>
 8004c96:	e03f      	b.n	8004d18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d11c      	bne.n	8004cde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d316      	bcc.n	8004cde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20f      	bcs.n	8004cde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f001 f891 	bl	8005dea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f001 fd1a 	bl	8006710 <USBD_LL_PrepareReceive>
 8004cdc:	e01c      	b.n	8004d18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d10f      	bne.n	8004d0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d0a:	2180      	movs	r1, #128	@ 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f001 fc55 	bl	80065bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f001 f8bb 	bl	8005e8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03a      	beq.n	8004d98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff fe42 	bl	80049ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004d30:	e032      	b.n	8004d98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004d32:	7afb      	ldrb	r3, [r7, #11]
 8004d34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f985 	bl	800504c <USBD_CoreFindEP>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2bff      	cmp	r3, #255	@ 0xff
 8004d4a:	d025      	beq.n	8004d98 <USBD_LL_DataInStage+0x15a>
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d122      	bne.n	8004d98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d11c      	bne.n	8004d98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d5e:	7dfa      	ldrb	r2, [r7, #23]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	32ae      	adds	r2, #174	@ 0xae
 8004d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d014      	beq.n	8004d98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004d6e:	7dfa      	ldrb	r2, [r7, #23]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d76:	7dfa      	ldrb	r2, [r7, #23]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	32ae      	adds	r2, #174	@ 0xae
 8004d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	7afa      	ldrb	r2, [r7, #11]
 8004d84:	4611      	mov	r1, r2
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	4798      	blx	r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d94:	7dbb      	ldrb	r3, [r7, #22]
 8004d96:	e000      	b.n	8004d9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d014      	beq.n	8004e08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00e      	beq.n	8004e08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6852      	ldr	r2, [r2, #4]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	4611      	mov	r1, r2
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004e04:	2303      	movs	r3, #3
 8004e06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e08:	2340      	movs	r3, #64	@ 0x40
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 fb8f 	bl	8006532 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2240      	movs	r2, #64	@ 0x40
 8004e20:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e24:	2340      	movs	r3, #64	@ 0x40
 8004e26:	2200      	movs	r2, #0
 8004e28:	2180      	movs	r1, #128	@ 0x80
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 fb81 	bl	8006532 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2240      	movs	r2, #64	@ 0x40
 8004e3a:	621a      	str	r2, [r3, #32]

  return ret;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d006      	beq.n	8004e88 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d106      	bne.n	8004ec0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d110      	bne.n	8004f04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	32ae      	adds	r2, #174	@ 0xae
 8004f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e01c      	b.n	8004f6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d115      	bne.n	8004f68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	32ae      	adds	r2, #174	@ 0xae
 8004f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	32ae      	adds	r2, #174	@ 0xae
 8004f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	4611      	mov	r1, r2
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	32ae      	adds	r2, #174	@ 0xae
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e01c      	b.n	8004fce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d115      	bne.n	8004fcc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	32ae      	adds	r2, #174	@ 0xae
 8004faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	32ae      	adds	r2, #174	@ 0xae
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00e      	beq.n	8005028 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6852      	ldr	r2, [r2, #4]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	4611      	mov	r1, r2
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005024:	2303      	movs	r3, #3
 8005026:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800503e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005058:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	885b      	ldrh	r3, [r3, #2]
 8005082:	b29b      	uxth	r3, r3
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	4293      	cmp	r3, r2
 800508a:	d91f      	bls.n	80050cc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005092:	e013      	b.n	80050bc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005094:	f107 030a 	add.w	r3, r7, #10
 8005098:	4619      	mov	r1, r3
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f000 f81b 	bl	80050d6 <USBD_GetNextDesc>
 80050a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	785b      	ldrb	r3, [r3, #1]
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d108      	bne.n	80050bc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	789b      	ldrb	r3, [r3, #2]
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d008      	beq.n	80050ca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	885b      	ldrh	r3, [r3, #2]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	897b      	ldrh	r3, [r7, #10]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d8e5      	bhi.n	8005094 <USBD_GetEpDesc+0x2e>
 80050c8:	e000      	b.n	80050cc <USBD_GetEpDesc+0x66>
          break;
 80050ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80050cc:	693b      	ldr	r3, [r7, #16]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	7812      	ldrb	r2, [r2, #0]
 80050ec:	4413      	add	r3, r2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005100:	68fb      	ldr	r3, [r7, #12]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	3301      	adds	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800512c:	8a3b      	ldrh	r3, [r7, #16]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	b21a      	sxth	r2, r3
 8005132:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005136:	4313      	orrs	r3, r2
 8005138:	b21b      	sxth	r3, r3
 800513a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800513c:	89fb      	ldrh	r3, [r7, #14]
}
 800513e:	4618      	mov	r0, r3
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005162:	2b40      	cmp	r3, #64	@ 0x40
 8005164:	d005      	beq.n	8005172 <USBD_StdDevReq+0x26>
 8005166:	2b40      	cmp	r3, #64	@ 0x40
 8005168:	d857      	bhi.n	800521a <USBD_StdDevReq+0xce>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00f      	beq.n	800518e <USBD_StdDevReq+0x42>
 800516e:	2b20      	cmp	r3, #32
 8005170:	d153      	bne.n	800521a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	32ae      	adds	r2, #174	@ 0xae
 800517c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
 8005188:	4603      	mov	r3, r0
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e04a      	b.n	8005224 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b09      	cmp	r3, #9
 8005194:	d83b      	bhi.n	800520e <USBD_StdDevReq+0xc2>
 8005196:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <USBD_StdDevReq+0x50>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	08005205 	.word	0x08005205
 80051a4:	0800520f 	.word	0x0800520f
 80051a8:	080051fb 	.word	0x080051fb
 80051ac:	0800520f 	.word	0x0800520f
 80051b0:	080051cf 	.word	0x080051cf
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	0800520f 	.word	0x0800520f
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051d9 	.word	0x080051d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa3c 	bl	8005644 <USBD_GetDescriptor>
          break;
 80051cc:	e024      	b.n	8005218 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fba1 	bl	8005918 <USBD_SetAddress>
          break;
 80051d6:	e01f      	b.n	8005218 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fbe0 	bl	80059a0 <USBD_SetConfig>
 80051e0:	4603      	mov	r3, r0
 80051e2:	73fb      	strb	r3, [r7, #15]
          break;
 80051e4:	e018      	b.n	8005218 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fc83 	bl	8005af4 <USBD_GetConfig>
          break;
 80051ee:	e013      	b.n	8005218 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fcb4 	bl	8005b60 <USBD_GetStatus>
          break;
 80051f8:	e00e      	b.n	8005218 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fce3 	bl	8005bc8 <USBD_SetFeature>
          break;
 8005202:	e009      	b.n	8005218 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fd07 	bl	8005c1a <USBD_ClrFeature>
          break;
 800520c:	e004      	b.n	8005218 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fd5e 	bl	8005cd2 <USBD_CtlError>
          break;
 8005216:	bf00      	nop
      }
      break;
 8005218:	e004      	b.n	8005224 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fd58 	bl	8005cd2 <USBD_CtlError>
      break;
 8005222:	bf00      	nop
  }

  return ret;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop

08005230 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005246:	2b40      	cmp	r3, #64	@ 0x40
 8005248:	d005      	beq.n	8005256 <USBD_StdItfReq+0x26>
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d852      	bhi.n	80052f4 <USBD_StdItfReq+0xc4>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <USBD_StdItfReq+0x26>
 8005252:	2b20      	cmp	r3, #32
 8005254:	d14e      	bne.n	80052f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800525c:	b2db      	uxtb	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	2b02      	cmp	r3, #2
 8005262:	d840      	bhi.n	80052e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	889b      	ldrh	r3, [r3, #4]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d836      	bhi.n	80052dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	889b      	ldrh	r3, [r3, #4]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fedb 	bl	8005032 <USBD_CoreFindIF>
 800527c:	4603      	mov	r3, r0
 800527e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	2bff      	cmp	r3, #255	@ 0xff
 8005284:	d01d      	beq.n	80052c2 <USBD_StdItfReq+0x92>
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11a      	bne.n	80052c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800528c:	7bba      	ldrb	r2, [r7, #14]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	32ae      	adds	r2, #174	@ 0xae
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00f      	beq.n	80052bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800529c:	7bba      	ldrb	r2, [r7, #14]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80052a4:	7bba      	ldrb	r2, [r7, #14]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	32ae      	adds	r2, #174	@ 0xae
 80052aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052ba:	e004      	b.n	80052c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052c0:	e001      	b.n	80052c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80052c2:	2303      	movs	r3, #3
 80052c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	88db      	ldrh	r3, [r3, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d110      	bne.n	80052f0 <USBD_StdItfReq+0xc0>
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fdc7 	bl	8005e68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80052da:	e009      	b.n	80052f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fcf7 	bl	8005cd2 <USBD_CtlError>
          break;
 80052e4:	e004      	b.n	80052f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fcf2 	bl	8005cd2 <USBD_CtlError>
          break;
 80052ee:	e000      	b.n	80052f2 <USBD_StdItfReq+0xc2>
          break;
 80052f0:	bf00      	nop
      }
      break;
 80052f2:	e004      	b.n	80052fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fceb 	bl	8005cd2 <USBD_CtlError>
      break;
 80052fc:	bf00      	nop
  }

  return ret;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	889b      	ldrh	r3, [r3, #4]
 800531a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d007      	beq.n	8005338 <USBD_StdEPReq+0x30>
 8005328:	2b40      	cmp	r3, #64	@ 0x40
 800532a:	f200 817f 	bhi.w	800562c <USBD_StdEPReq+0x324>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02a      	beq.n	8005388 <USBD_StdEPReq+0x80>
 8005332:	2b20      	cmp	r3, #32
 8005334:	f040 817a 	bne.w	800562c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005338:	7bbb      	ldrb	r3, [r7, #14]
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fe85 	bl	800504c <USBD_CoreFindEP>
 8005342:	4603      	mov	r3, r0
 8005344:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005346:	7b7b      	ldrb	r3, [r7, #13]
 8005348:	2bff      	cmp	r3, #255	@ 0xff
 800534a:	f000 8174 	beq.w	8005636 <USBD_StdEPReq+0x32e>
 800534e:	7b7b      	ldrb	r3, [r7, #13]
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 8170 	bne.w	8005636 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005356:	7b7a      	ldrb	r2, [r7, #13]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800535e:	7b7a      	ldrb	r2, [r7, #13]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	32ae      	adds	r2, #174	@ 0xae
 8005364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8163 	beq.w	8005636 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005370:	7b7a      	ldrb	r2, [r7, #13]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	32ae      	adds	r2, #174	@ 0xae
 8005376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005386:	e156      	b.n	8005636 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d008      	beq.n	80053a2 <USBD_StdEPReq+0x9a>
 8005390:	2b03      	cmp	r3, #3
 8005392:	f300 8145 	bgt.w	8005620 <USBD_StdEPReq+0x318>
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 809b 	beq.w	80054d2 <USBD_StdEPReq+0x1ca>
 800539c:	2b01      	cmp	r3, #1
 800539e:	d03c      	beq.n	800541a <USBD_StdEPReq+0x112>
 80053a0:	e13e      	b.n	8005620 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d002      	beq.n	80053b4 <USBD_StdEPReq+0xac>
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d016      	beq.n	80053e0 <USBD_StdEPReq+0xd8>
 80053b2:	e02c      	b.n	800540e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053b4:	7bbb      	ldrb	r3, [r7, #14]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <USBD_StdEPReq+0xce>
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	2b80      	cmp	r3, #128	@ 0x80
 80053be:	d00a      	beq.n	80053d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 f8f9 	bl	80065bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 f8f5 	bl	80065bc <USBD_LL_StallEP>
 80053d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053d4:	e020      	b.n	8005418 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fc7a 	bl	8005cd2 <USBD_CtlError>
              break;
 80053de:	e01b      	b.n	8005418 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	885b      	ldrh	r3, [r3, #2]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10e      	bne.n	8005406 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053e8:	7bbb      	ldrb	r3, [r7, #14]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <USBD_StdEPReq+0xfe>
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	2b80      	cmp	r3, #128	@ 0x80
 80053f2:	d008      	beq.n	8005406 <USBD_StdEPReq+0xfe>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	88db      	ldrh	r3, [r3, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053fc:	7bbb      	ldrb	r3, [r7, #14]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 f8db 	bl	80065bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fd2e 	bl	8005e68 <USBD_CtlSendStatus>

              break;
 800540c:	e004      	b.n	8005418 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fc5e 	bl	8005cd2 <USBD_CtlError>
              break;
 8005416:	bf00      	nop
          }
          break;
 8005418:	e107      	b.n	800562a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d002      	beq.n	800542c <USBD_StdEPReq+0x124>
 8005426:	2b03      	cmp	r3, #3
 8005428:	d016      	beq.n	8005458 <USBD_StdEPReq+0x150>
 800542a:	e04b      	b.n	80054c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <USBD_StdEPReq+0x146>
 8005432:	7bbb      	ldrb	r3, [r7, #14]
 8005434:	2b80      	cmp	r3, #128	@ 0x80
 8005436:	d00a      	beq.n	800544e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005438:	7bbb      	ldrb	r3, [r7, #14]
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 f8bd 	bl	80065bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005442:	2180      	movs	r1, #128	@ 0x80
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 f8b9 	bl	80065bc <USBD_LL_StallEP>
 800544a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800544c:	e040      	b.n	80054d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fc3e 	bl	8005cd2 <USBD_CtlError>
              break;
 8005456:	e03b      	b.n	80054d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	885b      	ldrh	r3, [r3, #2]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d136      	bne.n	80054ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 f8c3 	bl	80065fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fcf7 	bl	8005e68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800547a:	7bbb      	ldrb	r3, [r7, #14]
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fde4 	bl	800504c <USBD_CoreFindEP>
 8005484:	4603      	mov	r3, r0
 8005486:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005488:	7b7b      	ldrb	r3, [r7, #13]
 800548a:	2bff      	cmp	r3, #255	@ 0xff
 800548c:	d01f      	beq.n	80054ce <USBD_StdEPReq+0x1c6>
 800548e:	7b7b      	ldrb	r3, [r7, #13]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11c      	bne.n	80054ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005494:	7b7a      	ldrb	r2, [r7, #13]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800549c:	7b7a      	ldrb	r2, [r7, #13]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	32ae      	adds	r2, #174	@ 0xae
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80054ac:	7b7a      	ldrb	r2, [r7, #13]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	32ae      	adds	r2, #174	@ 0xae
 80054b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80054c2:	e004      	b.n	80054ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fc03 	bl	8005cd2 <USBD_CtlError>
              break;
 80054cc:	e000      	b.n	80054d0 <USBD_StdEPReq+0x1c8>
              break;
 80054ce:	bf00      	nop
          }
          break;
 80054d0:	e0ab      	b.n	800562a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d002      	beq.n	80054e4 <USBD_StdEPReq+0x1dc>
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d032      	beq.n	8005548 <USBD_StdEPReq+0x240>
 80054e2:	e097      	b.n	8005614 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <USBD_StdEPReq+0x1f2>
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	2b80      	cmp	r3, #128	@ 0x80
 80054ee:	d004      	beq.n	80054fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fbed 	bl	8005cd2 <USBD_CtlError>
                break;
 80054f8:	e091      	b.n	800561e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	da0b      	bge.n	800551a <USBD_StdEPReq+0x212>
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	3310      	adds	r3, #16
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	3304      	adds	r3, #4
 8005518:	e00b      	b.n	8005532 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	3304      	adds	r3, #4
 8005532:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2202      	movs	r2, #2
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fc37 	bl	8005db4 <USBD_CtlSendData>
              break;
 8005546:	e06a      	b.n	800561e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800554c:	2b00      	cmp	r3, #0
 800554e:	da11      	bge.n	8005574 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	f003 020f 	and.w	r2, r3, #15
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	3324      	adds	r3, #36	@ 0x24
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d117      	bne.n	800559a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fbb0 	bl	8005cd2 <USBD_CtlError>
                  break;
 8005572:	e054      	b.n	800561e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	f003 020f 	and.w	r2, r3, #15
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fb9d 	bl	8005cd2 <USBD_CtlError>
                  break;
 8005598:	e041      	b.n	800561e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800559a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da0b      	bge.n	80055ba <USBD_StdEPReq+0x2b2>
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	3310      	adds	r3, #16
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	3304      	adds	r3, #4
 80055b8:	e00b      	b.n	80055d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <USBD_StdEPReq+0x2d8>
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	2b80      	cmp	r3, #128	@ 0x80
 80055de:	d103      	bne.n	80055e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e00e      	b.n	8005606 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 f823 	bl	8006638 <USBD_LL_IsStallEP>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e002      	b.n	8005606 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2202      	movs	r2, #2
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fbd1 	bl	8005db4 <USBD_CtlSendData>
              break;
 8005612:	e004      	b.n	800561e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fb5b 	bl	8005cd2 <USBD_CtlError>
              break;
 800561c:	bf00      	nop
          }
          break;
 800561e:	e004      	b.n	800562a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb55 	bl	8005cd2 <USBD_CtlError>
          break;
 8005628:	bf00      	nop
      }
      break;
 800562a:	e005      	b.n	8005638 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fb4f 	bl	8005cd2 <USBD_CtlError>
      break;
 8005634:	e000      	b.n	8005638 <USBD_StdEPReq+0x330>
      break;
 8005636:	bf00      	nop
  }

  return ret;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	885b      	ldrh	r3, [r3, #2]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	2b06      	cmp	r3, #6
 8005666:	f200 8128 	bhi.w	80058ba <USBD_GetDescriptor+0x276>
 800566a:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <USBD_GetDescriptor+0x2c>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	0800568d 	.word	0x0800568d
 8005674:	080056a5 	.word	0x080056a5
 8005678:	080056e5 	.word	0x080056e5
 800567c:	080058bb 	.word	0x080058bb
 8005680:	080058bb 	.word	0x080058bb
 8005684:	0800585b 	.word	0x0800585b
 8005688:	08005887 	.word	0x08005887
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	7c12      	ldrb	r2, [r2, #16]
 8005698:	f107 0108 	add.w	r1, r7, #8
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
 80056a0:	60f8      	str	r0, [r7, #12]
      break;
 80056a2:	e112      	b.n	80058ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7c1b      	ldrb	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	f107 0208 	add.w	r2, r7, #8
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
 80056bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80056c6:	e100      	b.n	80058ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	f107 0208 	add.w	r2, r7, #8
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
 80056d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	2202      	movs	r2, #2
 80056e0:	701a      	strb	r2, [r3, #0]
      break;
 80056e2:	e0f2      	b.n	80058ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	885b      	ldrh	r3, [r3, #2]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	f200 80ac 	bhi.w	8005848 <USBD_GetDescriptor+0x204>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <USBD_GetDescriptor+0xb4>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005711 	.word	0x08005711
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005779 	.word	0x08005779
 8005704:	080057ad 	.word	0x080057ad
 8005708:	080057e1 	.word	0x080057e1
 800570c:	08005815 	.word	0x08005815
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	7c12      	ldrb	r2, [r2, #16]
 8005728:	f107 0108 	add.w	r1, r7, #8
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005732:	e091      	b.n	8005858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 facb 	bl	8005cd2 <USBD_CtlError>
            err++;
 800573c:	7afb      	ldrb	r3, [r7, #11]
 800573e:	3301      	adds	r3, #1
 8005740:	72fb      	strb	r3, [r7, #11]
          break;
 8005742:	e089      	b.n	8005858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	7c12      	ldrb	r2, [r2, #16]
 800575c:	f107 0108 	add.w	r1, r7, #8
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005766:	e077      	b.n	8005858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fab1 	bl	8005cd2 <USBD_CtlError>
            err++;
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	3301      	adds	r3, #1
 8005774:	72fb      	strb	r3, [r7, #11]
          break;
 8005776:	e06f      	b.n	8005858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	7c12      	ldrb	r2, [r2, #16]
 8005790:	f107 0108 	add.w	r1, r7, #8
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
 8005798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800579a:	e05d      	b.n	8005858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa97 	bl	8005cd2 <USBD_CtlError>
            err++;
 80057a4:	7afb      	ldrb	r3, [r7, #11]
 80057a6:	3301      	adds	r3, #1
 80057a8:	72fb      	strb	r3, [r7, #11]
          break;
 80057aa:	e055      	b.n	8005858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	7c12      	ldrb	r2, [r2, #16]
 80057c4:	f107 0108 	add.w	r1, r7, #8
 80057c8:	4610      	mov	r0, r2
 80057ca:	4798      	blx	r3
 80057cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ce:	e043      	b.n	8005858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa7d 	bl	8005cd2 <USBD_CtlError>
            err++;
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	3301      	adds	r3, #1
 80057dc:	72fb      	strb	r3, [r7, #11]
          break;
 80057de:	e03b      	b.n	8005858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	7c12      	ldrb	r2, [r2, #16]
 80057f8:	f107 0108 	add.w	r1, r7, #8
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
 8005800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005802:	e029      	b.n	8005858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa63 	bl	8005cd2 <USBD_CtlError>
            err++;
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	3301      	adds	r3, #1
 8005810:	72fb      	strb	r3, [r7, #11]
          break;
 8005812:	e021      	b.n	8005858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	7c12      	ldrb	r2, [r2, #16]
 800582c:	f107 0108 	add.w	r1, r7, #8
 8005830:	4610      	mov	r0, r2
 8005832:	4798      	blx	r3
 8005834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005836:	e00f      	b.n	8005858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa49 	bl	8005cd2 <USBD_CtlError>
            err++;
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	3301      	adds	r3, #1
 8005844:	72fb      	strb	r3, [r7, #11]
          break;
 8005846:	e007      	b.n	8005858 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa41 	bl	8005cd2 <USBD_CtlError>
          err++;
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	3301      	adds	r3, #1
 8005854:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005856:	bf00      	nop
      }
      break;
 8005858:	e037      	b.n	80058ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7c1b      	ldrb	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d109      	bne.n	8005876 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586a:	f107 0208 	add.w	r2, r7, #8
 800586e:	4610      	mov	r0, r2
 8005870:	4798      	blx	r3
 8005872:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005874:	e029      	b.n	80058ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fa2a 	bl	8005cd2 <USBD_CtlError>
        err++;
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	3301      	adds	r3, #1
 8005882:	72fb      	strb	r3, [r7, #11]
      break;
 8005884:	e021      	b.n	80058ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7c1b      	ldrb	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	f107 0208 	add.w	r2, r7, #8
 800589a:	4610      	mov	r0, r2
 800589c:	4798      	blx	r3
 800589e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	2207      	movs	r2, #7
 80058a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058a8:	e00f      	b.n	80058ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa10 	bl	8005cd2 <USBD_CtlError>
        err++;
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	3301      	adds	r3, #1
 80058b6:	72fb      	strb	r3, [r7, #11]
      break;
 80058b8:	e007      	b.n	80058ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa08 	bl	8005cd2 <USBD_CtlError>
      err++;
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	3301      	adds	r3, #1
 80058c6:	72fb      	strb	r3, [r7, #11]
      break;
 80058c8:	bf00      	nop
  }

  if (err != 0U)
 80058ca:	7afb      	ldrb	r3, [r7, #11]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d11e      	bne.n	800590e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	88db      	ldrh	r3, [r3, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d016      	beq.n	8005906 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80058d8:	893b      	ldrh	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	88da      	ldrh	r2, [r3, #6]
 80058e2:	893b      	ldrh	r3, [r7, #8]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf28      	it	cs
 80058e8:	4613      	movcs	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058ee:	893b      	ldrh	r3, [r7, #8]
 80058f0:	461a      	mov	r2, r3
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fa5d 	bl	8005db4 <USBD_CtlSendData>
 80058fa:	e009      	b.n	8005910 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9e7 	bl	8005cd2 <USBD_CtlError>
 8005904:	e004      	b.n	8005910 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 faae 	bl	8005e68 <USBD_CtlSendStatus>
 800590c:	e000      	b.n	8005910 <USBD_GetDescriptor+0x2cc>
    return;
 800590e:	bf00      	nop
  }
}
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop

08005918 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	889b      	ldrh	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d131      	bne.n	800598e <USBD_SetAddress+0x76>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	88db      	ldrh	r3, [r3, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d12d      	bne.n	800598e <USBD_SetAddress+0x76>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	885b      	ldrh	r3, [r3, #2]
 8005936:	2b7f      	cmp	r3, #127	@ 0x7f
 8005938:	d829      	bhi.n	800598e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	885b      	ldrh	r3, [r3, #2]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005944:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d104      	bne.n	800595c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f9bc 	bl	8005cd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595a:	e01d      	b.n	8005998 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7bfa      	ldrb	r2, [r7, #15]
 8005960:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fe91 	bl	8006690 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa7a 	bl	8005e68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005982:	e009      	b.n	8005998 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598c:	e004      	b.n	8005998 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f99e 	bl	8005cd2 <USBD_CtlError>
  }
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	885b      	ldrh	r3, [r3, #2]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	4b4e      	ldr	r3, [pc, #312]	@ (8005af0 <USBD_SetConfig+0x150>)
 80059b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059b8:	4b4d      	ldr	r3, [pc, #308]	@ (8005af0 <USBD_SetConfig+0x150>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d905      	bls.n	80059cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f985 	bl	8005cd2 <USBD_CtlError>
    return USBD_FAIL;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e08c      	b.n	8005ae6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d002      	beq.n	80059de <USBD_SetConfig+0x3e>
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d029      	beq.n	8005a30 <USBD_SetConfig+0x90>
 80059dc:	e075      	b.n	8005aca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80059de:	4b44      	ldr	r3, [pc, #272]	@ (8005af0 <USBD_SetConfig+0x150>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d020      	beq.n	8005a28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80059e6:	4b42      	ldr	r3, [pc, #264]	@ (8005af0 <USBD_SetConfig+0x150>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059f0:	4b3f      	ldr	r3, [pc, #252]	@ (8005af0 <USBD_SetConfig+0x150>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe ffe3 	bl	80049c2 <USBD_SetClassConfig>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f962 	bl	8005cd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a16:	e065      	b.n	8005ae4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa25 	bl	8005e68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2203      	movs	r2, #3
 8005a22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a26:	e05d      	b.n	8005ae4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa1d 	bl	8005e68 <USBD_CtlSendStatus>
      break;
 8005a2e:	e059      	b.n	8005ae4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a30:	4b2f      	ldr	r3, [pc, #188]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d112      	bne.n	8005a5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005a40:	4b2b      	ldr	r3, [pc, #172]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a4a:	4b29      	ldr	r3, [pc, #164]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fe ffd2 	bl	80049fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa06 	bl	8005e68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a5c:	e042      	b.n	8005ae4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a5e:	4b24      	ldr	r3, [pc, #144]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d02a      	beq.n	8005ac2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fe ffc0 	bl	80049fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a84:	4b1a      	ldr	r3, [pc, #104]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fe ff99 	bl	80049c2 <USBD_SetClassConfig>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00f      	beq.n	8005aba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f918 	bl	8005cd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fe ffa5 	bl	80049fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005ab8:	e014      	b.n	8005ae4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9d4 	bl	8005e68 <USBD_CtlSendStatus>
      break;
 8005ac0:	e010      	b.n	8005ae4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9d0 	bl	8005e68 <USBD_CtlSendStatus>
      break;
 8005ac8:	e00c      	b.n	8005ae4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f900 	bl	8005cd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ad2:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <USBD_SetConfig+0x150>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fe ff8e 	bl	80049fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae2:	bf00      	nop
  }

  return ret;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000148 	.word	0x20000148

08005af4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	88db      	ldrh	r3, [r3, #6]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d004      	beq.n	8005b10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8e2 	bl	8005cd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b0e:	e023      	b.n	8005b58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	dc02      	bgt.n	8005b22 <USBD_GetConfig+0x2e>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc03      	bgt.n	8005b28 <USBD_GetConfig+0x34>
 8005b20:	e015      	b.n	8005b4e <USBD_GetConfig+0x5a>
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d00b      	beq.n	8005b3e <USBD_GetConfig+0x4a>
 8005b26:	e012      	b.n	8005b4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3308      	adds	r3, #8
 8005b32:	2201      	movs	r2, #1
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f93c 	bl	8005db4 <USBD_CtlSendData>
        break;
 8005b3c:	e00c      	b.n	8005b58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2201      	movs	r2, #1
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f934 	bl	8005db4 <USBD_CtlSendData>
        break;
 8005b4c:	e004      	b.n	8005b58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8be 	bl	8005cd2 <USBD_CtlError>
        break;
 8005b56:	bf00      	nop
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d81e      	bhi.n	8005bb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	88db      	ldrh	r3, [r3, #6]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d004      	beq.n	8005b8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8a5 	bl	8005cd2 <USBD_CtlError>
        break;
 8005b88:	e01a      	b.n	8005bc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f043 0202 	orr.w	r2, r3, #2
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	2202      	movs	r2, #2
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f900 	bl	8005db4 <USBD_CtlSendData>
      break;
 8005bb4:	e004      	b.n	8005bc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f88a 	bl	8005cd2 <USBD_CtlError>
      break;
 8005bbe:	bf00      	nop
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	885b      	ldrh	r3, [r3, #2]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d107      	bne.n	8005bea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f940 	bl	8005e68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005be8:	e013      	b.n	8005c12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	885b      	ldrh	r3, [r3, #2]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d10b      	bne.n	8005c0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	889b      	ldrh	r3, [r3, #4]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f930 	bl	8005e68 <USBD_CtlSendStatus>
}
 8005c08:	e003      	b.n	8005c12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f860 	bl	8005cd2 <USBD_CtlError>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d80b      	bhi.n	8005c4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	885b      	ldrh	r3, [r3, #2]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d10c      	bne.n	8005c54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f910 	bl	8005e68 <USBD_CtlSendStatus>
      }
      break;
 8005c48:	e004      	b.n	8005c54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f840 	bl	8005cd2 <USBD_CtlError>
      break;
 8005c52:	e000      	b.n	8005c56 <USBD_ClrFeature+0x3c>
      break;
 8005c54:	bf00      	nop
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fa40 	bl	800510e <SWAPBYTE>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff fa33 	bl	800510e <SWAPBYTE>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff fa26 	bl	800510e <SWAPBYTE>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	80da      	strh	r2, [r3, #6]
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cdc:	2180      	movs	r1, #128	@ 0x80
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fc6c 	bl	80065bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fc68 	bl	80065bc <USBD_LL_StallEP>
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d036      	beq.n	8005d78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005d0e:	6938      	ldr	r0, [r7, #16]
 8005d10:	f000 f836 	bl	8005d80 <USBD_GetLen>
 8005d14:	4603      	mov	r3, r0
 8005d16:	3301      	adds	r3, #1
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	4413      	add	r3, r2
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	3301      	adds	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4413      	add	r3, r2
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	3301      	adds	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d44:	e013      	b.n	8005d6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3301      	adds	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
    idx++;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4413      	add	r3, r2
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e7      	bne.n	8005d46 <USBD_GetString+0x52>
 8005d76:	e000      	b.n	8005d7a <USBD_GetString+0x86>
    return;
 8005d78:	bf00      	nop
  }
}
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d90:	e005      	b.n	8005d9e <USBD_GetLen+0x1e>
  {
    len++;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	3301      	adds	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f5      	bne.n	8005d92 <USBD_GetLen+0x12>
  }

  return len;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fc77 	bl	80066ce <USBD_LL_Transmit>

  return USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fc66 	bl	80066ce <USBD_LL_Transmit>

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	2100      	movs	r1, #0
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fc6a 	bl	8006710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	2100      	movs	r1, #0
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fc59 	bl	8006710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fc25 	bl	80066ce <USBD_LL_Transmit>

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2205      	movs	r2, #5
 8005e9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fc33 	bl	8006710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4912      	ldr	r1, [pc, #72]	@ (8005f04 <MX_USB_DEVICE_Init+0x50>)
 8005ebc:	4812      	ldr	r0, [pc, #72]	@ (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ebe:	f7fe fd03 	bl	80048c8 <USBD_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ec8:	f7fa fbbe 	bl	8000648 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005ecc:	490f      	ldr	r1, [pc, #60]	@ (8005f0c <MX_USB_DEVICE_Init+0x58>)
 8005ece:	480e      	ldr	r0, [pc, #56]	@ (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ed0:	f7fe fd2a 	bl	8004928 <USBD_RegisterClass>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005eda:	f7fa fbb5 	bl	8000648 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005ede:	490c      	ldr	r1, [pc, #48]	@ (8005f10 <MX_USB_DEVICE_Init+0x5c>)
 8005ee0:	4809      	ldr	r0, [pc, #36]	@ (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ee2:	f7fe fcd7 	bl	8004894 <USBD_CUSTOM_HID_RegisterInterface>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005eec:	f7fa fbac 	bl	8000648 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ef0:	4805      	ldr	r0, [pc, #20]	@ (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ef2:	f7fe fd4f 	bl	8004994 <USBD_Start>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005efc:	f7fa fba4 	bl	8000648 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f00:	bf00      	nop
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200000d8 	.word	0x200000d8
 8005f08:	2000014c 	.word	0x2000014c
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	200000c8 	.word	0x200000c8

08005f14 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005f28:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	71fb      	strb	r3, [r7, #7]
 8005f40:	4613      	mov	r3, r2
 8005f42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8005f44:	4806      	ldr	r0, [pc, #24]	@ (8005f60 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8005f46:	f7fe fc43 	bl	80047d0 <USBD_CUSTOM_HID_ReceivePacket>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
 8005f54:	e000      	b.n	8005f58 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8005f56:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	2000014c 	.word	0x2000014c

08005f64 <send_keyboard_report>:
*/
/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t send_keyboard_report(uint8_t modifier, uint8_t key1, uint8_t key2, uint8_t key3, uint8_t key4, uint8_t key5, uint8_t key6) {
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	461a      	mov	r2, r3
 8005f72:	4623      	mov	r3, r4
 8005f74:	71fb      	strb	r3, [r7, #7]
 8005f76:	4603      	mov	r3, r0
 8005f78:	71bb      	strb	r3, [r7, #6]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	717b      	strb	r3, [r7, #5]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	713b      	strb	r3, [r7, #4]
    uint8_t report[8] = {0};
 8005f82:	2300      	movs	r3, #0
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

    report[0] = modifier;  // Modifier keys (Ctrl, Shift, etc.)
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	723b      	strb	r3, [r7, #8]
    report[1] = 0;         // Reserved byte
 8005f8e:	2300      	movs	r3, #0
 8005f90:	727b      	strb	r3, [r7, #9]
    report[2] = key1;      // Key 1
 8005f92:	79bb      	ldrb	r3, [r7, #6]
 8005f94:	72bb      	strb	r3, [r7, #10]
    report[3] = key2;      // Key 2
 8005f96:	797b      	ldrb	r3, [r7, #5]
 8005f98:	72fb      	strb	r3, [r7, #11]
    report[4] = key3;      // Key 3
 8005f9a:	793b      	ldrb	r3, [r7, #4]
 8005f9c:	733b      	strb	r3, [r7, #12]
    report[5] = key4;      // Key 4
 8005f9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fa2:	737b      	strb	r3, [r7, #13]
    report[6] = key5;      // Key 5
 8005fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fa8:	73bb      	strb	r3, [r7, #14]
    report[7] = key6;      // Key 6
 8005faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fae:	73fb      	strb	r3, [r7, #15]

    return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, sizeof(report));
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4803      	ldr	r0, [pc, #12]	@ (8005fc8 <send_keyboard_report+0x64>)
 8005fba:	f7fe fafd 	bl	80045b8 <USBD_CUSTOM_HID_SendReport>
 8005fbe:	4603      	mov	r3, r0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd90      	pop	{r4, r7, pc}
 8005fc8:	2000014c 	.word	0x2000014c

08005fcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2212      	movs	r2, #18
 8005fdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005fde:	4b03      	ldr	r3, [pc, #12]	@ (8005fec <USBD_FS_DeviceDescriptor+0x20>)
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	200000f4 	.word	0x200000f4

08005ff0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2204      	movs	r2, #4
 8006000:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006002:	4b03      	ldr	r3, [pc, #12]	@ (8006010 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	20000108 	.word	0x20000108

08006014 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4907      	ldr	r1, [pc, #28]	@ (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
 800602a:	4808      	ldr	r0, [pc, #32]	@ (800604c <USBD_FS_ProductStrDescriptor+0x38>)
 800602c:	f7ff fe62 	bl	8005cf4 <USBD_GetString>
 8006030:	e004      	b.n	800603c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4904      	ldr	r1, [pc, #16]	@ (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
 8006036:	4805      	ldr	r0, [pc, #20]	@ (800604c <USBD_FS_ProductStrDescriptor+0x38>)
 8006038:	f7ff fe5c 	bl	8005cf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800603c:	4b02      	ldr	r3, [pc, #8]	@ (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000428 	.word	0x20000428
 800604c:	0800684c 	.word	0x0800684c

08006050 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	4904      	ldr	r1, [pc, #16]	@ (8006070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006060:	4804      	ldr	r0, [pc, #16]	@ (8006074 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006062:	f7ff fe47 	bl	8005cf4 <USBD_GetString>
  return USBD_StrDesc;
 8006066:	4b02      	ldr	r3, [pc, #8]	@ (8006070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000428 	.word	0x20000428
 8006074:	08006860 	.word	0x08006860

08006078 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	221a      	movs	r2, #26
 8006088:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800608a:	f000 f843 	bl	8006114 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800608e:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	2000010c 	.word	0x2000010c

0800609c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	4907      	ldr	r1, [pc, #28]	@ (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060b2:	4808      	ldr	r0, [pc, #32]	@ (80060d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80060b4:	f7ff fe1e 	bl	8005cf4 <USBD_GetString>
 80060b8:	e004      	b.n	80060c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4904      	ldr	r1, [pc, #16]	@ (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060be:	4805      	ldr	r0, [pc, #20]	@ (80060d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80060c0:	f7ff fe18 	bl	8005cf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c4:	4b02      	ldr	r3, [pc, #8]	@ (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000428 	.word	0x20000428
 80060d4:	08006874 	.word	0x08006874

080060d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d105      	bne.n	80060f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	4907      	ldr	r1, [pc, #28]	@ (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060ee:	4808      	ldr	r0, [pc, #32]	@ (8006110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060f0:	f7ff fe00 	bl	8005cf4 <USBD_GetString>
 80060f4:	e004      	b.n	8006100 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	4904      	ldr	r1, [pc, #16]	@ (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060fa:	4805      	ldr	r0, [pc, #20]	@ (8006110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060fc:	f7ff fdfa 	bl	8005cf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006100:	4b02      	ldr	r3, [pc, #8]	@ (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000428 	.word	0x20000428
 8006110:	08006888 	.word	0x08006888

08006114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800611a:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <Get_SerialNum+0x44>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006120:	4b0e      	ldr	r3, [pc, #56]	@ (800615c <Get_SerialNum+0x48>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006126:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <Get_SerialNum+0x4c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800613a:	2208      	movs	r2, #8
 800613c:	4909      	ldr	r1, [pc, #36]	@ (8006164 <Get_SerialNum+0x50>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f814 	bl	800616c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006144:	2204      	movs	r2, #4
 8006146:	4908      	ldr	r1, [pc, #32]	@ (8006168 <Get_SerialNum+0x54>)
 8006148:	68b8      	ldr	r0, [r7, #8]
 800614a:	f000 f80f 	bl	800616c <IntToUnicode>
  }
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	1fff7a10 	.word	0x1fff7a10
 800615c:	1fff7a14 	.word	0x1fff7a14
 8006160:	1fff7a18 	.word	0x1fff7a18
 8006164:	2000010e 	.word	0x2000010e
 8006168:	2000011e 	.word	0x2000011e

0800616c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
 8006182:	e027      	b.n	80061d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	2b09      	cmp	r3, #9
 800618a:	d80b      	bhi.n	80061a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4619      	mov	r1, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	440b      	add	r3, r1
 800619c:	3230      	adds	r2, #48	@ 0x30
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e00a      	b.n	80061ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0f1b      	lsrs	r3, r3, #28
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4619      	mov	r1, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	440b      	add	r3, r1
 80061b4:	3237      	adds	r2, #55	@ 0x37
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	3301      	adds	r3, #1
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	3301      	adds	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
 80061d4:	7dfa      	ldrb	r2, [r7, #23]
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d3d3      	bcc.n	8006184 <IntToUnicode+0x18>
  }
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 0314 	add.w	r3, r7, #20
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800620c:	d13a      	bne.n	8006284 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	4b1e      	ldr	r3, [pc, #120]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	4a1d      	ldr	r2, [pc, #116]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	6313      	str	r3, [r2, #48]	@ 0x30
 800621e:	4b1b      	ldr	r3, [pc, #108]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800622a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800622e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006230:	2302      	movs	r3, #2
 8006232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006238:	2303      	movs	r3, #3
 800623a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800623c:	230a      	movs	r3, #10
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	4619      	mov	r1, r3
 8006246:	4812      	ldr	r0, [pc, #72]	@ (8006290 <HAL_PCD_MspInit+0xa4>)
 8006248:	f7fa fc4a 	bl	8000ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800624c:	4b0f      	ldr	r3, [pc, #60]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 800624e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006250:	4a0e      	ldr	r2, [pc, #56]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 8006252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006256:	6353      	str	r3, [r2, #52]	@ 0x34
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 800625e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006260:	4a0a      	ldr	r2, [pc, #40]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 8006262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006266:	6453      	str	r3, [r2, #68]	@ 0x44
 8006268:	4b08      	ldr	r3, [pc, #32]	@ (800628c <HAL_PCD_MspInit+0xa0>)
 800626a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006274:	2200      	movs	r2, #0
 8006276:	2100      	movs	r1, #0
 8006278:	2043      	movs	r0, #67	@ 0x43
 800627a:	f7fa fbfa 	bl	8000a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800627e:	2043      	movs	r0, #67	@ 0x43
 8006280:	f7fa fc13 	bl	8000aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006284:	bf00      	nop
 8006286:	3728      	adds	r7, #40	@ 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	40020000 	.word	0x40020000

08006294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f7fe fbbf 	bl	8004a2e <USBD_LL_SetupStage>
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f7fe fbf9 	bl	8004ad8 <USBD_LL_DataOutStage>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	3320      	adds	r3, #32
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	4619      	mov	r1, r3
 8006316:	f7fe fc92 	bl	8004c3e <USBD_LL_DataInStage>
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fdcc 	bl	8004ece <USBD_LL_SOF>
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	79db      	ldrb	r3, [r3, #7]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d001      	beq.n	8006356 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006352:	f7fa f979 	bl	8000648 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800635c:	7bfa      	ldrb	r2, [r7, #15]
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe fd70 	bl	8004e46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fd18 	bl	8004da2 <USBD_LL_Reset>
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fd6b 	bl	8004e66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7adb      	ldrb	r3, [r3, #11]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063b0:	4b04      	ldr	r3, [pc, #16]	@ (80063c4 <HAL_PCD_SuspendCallback+0x48>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	4a03      	ldr	r2, [pc, #12]	@ (80063c4 <HAL_PCD_SuspendCallback+0x48>)
 80063b6:	f043 0306 	orr.w	r3, r3, #6
 80063ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fd61 	bl	8004e9e <USBD_LL_Resume>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fdb9 	bl	8004f72 <USBD_LL_IsoOUTIncomplete>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fd75 	bl	8004f0e <USBD_LL_IsoINIncomplete>
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fdcb 	bl	8004fd6 <USBD_LL_DevConnected>
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fdc8 	bl	8004fec <USBD_LL_DevDisconnected>
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d13c      	bne.n	80064ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006474:	4a20      	ldr	r2, [pc, #128]	@ (80064f8 <USBD_LL_Init+0x94>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1e      	ldr	r2, [pc, #120]	@ (80064f8 <USBD_LL_Init+0x94>)
 8006480:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <USBD_LL_Init+0x94>)
 8006486:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800648a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800648c:	4b1a      	ldr	r3, [pc, #104]	@ (80064f8 <USBD_LL_Init+0x94>)
 800648e:	2204      	movs	r2, #4
 8006490:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006492:	4b19      	ldr	r3, [pc, #100]	@ (80064f8 <USBD_LL_Init+0x94>)
 8006494:	2202      	movs	r2, #2
 8006496:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006498:	4b17      	ldr	r3, [pc, #92]	@ (80064f8 <USBD_LL_Init+0x94>)
 800649a:	2200      	movs	r2, #0
 800649c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800649e:	4b16      	ldr	r3, [pc, #88]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064a0:	2202      	movs	r2, #2
 80064a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064a4:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064aa:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064b0:	4b11      	ldr	r3, [pc, #68]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80064b6:	4b10      	ldr	r3, [pc, #64]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064bc:	4b0e      	ldr	r3, [pc, #56]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064be:	2200      	movs	r2, #0
 80064c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064c2:	480d      	ldr	r0, [pc, #52]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064c4:	f7fa fc90 	bl	8000de8 <HAL_PCD_Init>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80064ce:	f7fa f8bb 	bl	8000648 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064d2:	2180      	movs	r1, #128	@ 0x80
 80064d4:	4808      	ldr	r0, [pc, #32]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064d6:	f7fb fea2 	bl	800221e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80064da:	2240      	movs	r2, #64	@ 0x40
 80064dc:	2100      	movs	r1, #0
 80064de:	4806      	ldr	r0, [pc, #24]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064e0:	f7fb fe56 	bl	8002190 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80064e4:	2280      	movs	r2, #128	@ 0x80
 80064e6:	2101      	movs	r1, #1
 80064e8:	4803      	ldr	r0, [pc, #12]	@ (80064f8 <USBD_LL_Init+0x94>)
 80064ea:	f7fb fe51 	bl	8002190 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000628 	.word	0x20000628

080064fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006512:	4618      	mov	r0, r3
 8006514:	f7fa fd77 	bl	8001006 <HAL_PCD_Start>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f930 	bl	8006784 <USBD_Get_USB_Status>
 8006524:	4603      	mov	r3, r0
 8006526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006528:	7bbb      	ldrb	r3, [r7, #14]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	4608      	mov	r0, r1
 800653c:	4611      	mov	r1, r2
 800653e:	461a      	mov	r2, r3
 8006540:	4603      	mov	r3, r0
 8006542:	70fb      	strb	r3, [r7, #3]
 8006544:	460b      	mov	r3, r1
 8006546:	70bb      	strb	r3, [r7, #2]
 8006548:	4613      	mov	r3, r2
 800654a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800655a:	78bb      	ldrb	r3, [r7, #2]
 800655c:	883a      	ldrh	r2, [r7, #0]
 800655e:	78f9      	ldrb	r1, [r7, #3]
 8006560:	f7fb fa4b 	bl	80019fa <HAL_PCD_EP_Open>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f90a 	bl	8006784 <USBD_Get_USB_Status>
 8006570:	4603      	mov	r3, r0
 8006572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006574:	7bbb      	ldrb	r3, [r7, #14]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f7fb fa94 	bl	8001aca <HAL_PCD_EP_Close>
 80065a2:	4603      	mov	r3, r0
 80065a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f8eb 	bl	8006784 <USBD_Get_USB_Status>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fb fb34 	bl	8001c48 <HAL_PCD_EP_SetStall>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f8cc 	bl	8006784 <USBD_Get_USB_Status>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	4611      	mov	r1, r2
 8006618:	4618      	mov	r0, r3
 800661a:	f7fb fb78 	bl	8001d0e <HAL_PCD_EP_ClrStall>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8ad 	bl	8006784 <USBD_Get_USB_Status>
 800662a:	4603      	mov	r3, r0
 800662c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800662e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800664a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800664c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006650:	2b00      	cmp	r3, #0
 8006652:	da0b      	bge.n	800666c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	3316      	adds	r3, #22
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	e00b      	b.n	8006684 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006682:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fb f97f 	bl	80019b2 <HAL_PCD_SetAddress>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f862 	bl	8006784 <USBD_Get_USB_Status>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	460b      	mov	r3, r1
 80066dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80066ec:	7af9      	ldrb	r1, [r7, #11]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f7fb fa6f 	bl	8001bd4 <HAL_PCD_EP_Transmit>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f841 	bl	8006784 <USBD_Get_USB_Status>
 8006702:	4603      	mov	r3, r0
 8006704:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006706:	7dbb      	ldrb	r3, [r7, #22]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	460b      	mov	r3, r1
 800671e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800672e:	7af9      	ldrb	r1, [r7, #11]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	f7fb fa13 	bl	8001b5e <HAL_PCD_EP_Receive>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f820 	bl	8006784 <USBD_Get_USB_Status>
 8006744:	4603      	mov	r3, r0
 8006746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006748:	7dbb      	ldrb	r3, [r7, #22]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800675c:	4b03      	ldr	r3, [pc, #12]	@ (800676c <USBD_static_malloc+0x18>)
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000b0c 	.word	0x20000b0c

08006770 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d817      	bhi.n	80067c8 <USBD_Get_USB_Status+0x44>
 8006798:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <USBD_Get_USB_Status+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067b7 	.word	0x080067b7
 80067a8:	080067bd 	.word	0x080067bd
 80067ac:	080067c3 	.word	0x080067c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
    break;
 80067b4:	e00b      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ba:	e008      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    break;
 80067c0:	e005      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067c2:	2303      	movs	r3, #3
 80067c4:	73fb      	strb	r3, [r7, #15]
    break;
 80067c6:	e002      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	73fb      	strb	r3, [r7, #15]
    break;
 80067cc:	bf00      	nop
  }
  return usb_status;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <memset>:
 80067dc:	4402      	add	r2, r0
 80067de:	4603      	mov	r3, r0
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d100      	bne.n	80067e6 <memset+0xa>
 80067e4:	4770      	bx	lr
 80067e6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ea:	e7f9      	b.n	80067e0 <memset+0x4>

080067ec <__libc_init_array>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006824 <__libc_init_array+0x38>)
 80067f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006828 <__libc_init_array+0x3c>)
 80067f2:	1b64      	subs	r4, r4, r5
 80067f4:	10a4      	asrs	r4, r4, #2
 80067f6:	2600      	movs	r6, #0
 80067f8:	42a6      	cmp	r6, r4
 80067fa:	d109      	bne.n	8006810 <__libc_init_array+0x24>
 80067fc:	4d0b      	ldr	r5, [pc, #44]	@ (800682c <__libc_init_array+0x40>)
 80067fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006830 <__libc_init_array+0x44>)
 8006800:	f000 f818 	bl	8006834 <_init>
 8006804:	1b64      	subs	r4, r4, r5
 8006806:	10a4      	asrs	r4, r4, #2
 8006808:	2600      	movs	r6, #0
 800680a:	42a6      	cmp	r6, r4
 800680c:	d105      	bne.n	800681a <__libc_init_array+0x2e>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	f855 3b04 	ldr.w	r3, [r5], #4
 8006814:	4798      	blx	r3
 8006816:	3601      	adds	r6, #1
 8006818:	e7ee      	b.n	80067f8 <__libc_init_array+0xc>
 800681a:	f855 3b04 	ldr.w	r3, [r5], #4
 800681e:	4798      	blx	r3
 8006820:	3601      	adds	r6, #1
 8006822:	e7f2      	b.n	800680a <__libc_init_array+0x1e>
 8006824:	080068b8 	.word	0x080068b8
 8006828:	080068b8 	.word	0x080068b8
 800682c:	080068b8 	.word	0x080068b8
 8006830:	080068bc 	.word	0x080068bc

08006834 <_init>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr

08006840 <_fini>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr
