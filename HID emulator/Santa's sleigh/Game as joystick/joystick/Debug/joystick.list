
joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f6c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008104  08008104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008164  08008164  0000a11c  2**0
                  CONTENTS
  4 .ARM          00000008  08008164  08008164  00009164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800816c  0800816c  0000a11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008170  08008170  00009170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08008174  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20000120  08008290  0000a120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  08008290  0000ab90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a11c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9d5  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d7  00000000  00000000  00019b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000960  00000000  00000000  0001d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c254  00000000  00000000  0001e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001320a  00000000  00000000  0003a56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095474  00000000  00000000  0004d776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  000e2c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e5fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000120 	.word	0x20000120
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080ec 	.word	0x080080ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000124 	.word	0x20000124
 80001d4:	080080ec 	.word	0x080080ec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b96a 	b.w	8000d70 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	460c      	mov	r4, r1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d14e      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	458c      	cmp	ip, r1
 8000ac4:	4686      	mov	lr, r0
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	d962      	bls.n	8000b92 <__udivmoddi4+0xde>
 8000acc:	b14a      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	4319      	orrs	r1, r3
 8000ade:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ae2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae6:	fa1f f68c 	uxth.w	r6, ip
 8000aea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af2:	fb07 1114 	mls	r1, r7, r4, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb04 f106 	mul.w	r1, r4, r6
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b0a:	f080 8112 	bcs.w	8000d32 <__udivmoddi4+0x27e>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 810f 	bls.w	8000d32 <__udivmoddi4+0x27e>
 8000b14:	3c02      	subs	r4, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	fa1f f38e 	uxth.w	r3, lr
 8000b1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b22:	fb07 1110 	mls	r1, r7, r0, r1
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb00 f606 	mul.w	r6, r0, r6
 8000b2e:	429e      	cmp	r6, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x94>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3a:	f080 80fc 	bcs.w	8000d36 <__udivmoddi4+0x282>
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	f240 80f9 	bls.w	8000d36 <__udivmoddi4+0x282>
 8000b44:	4463      	add	r3, ip
 8000b46:	3802      	subs	r0, #2
 8000b48:	1b9b      	subs	r3, r3, r6
 8000b4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b4e:	2100      	movs	r1, #0
 8000b50:	b11d      	cbz	r5, 8000b5a <__udivmoddi4+0xa6>
 8000b52:	40d3      	lsrs	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	e9c5 3200 	strd	r3, r2, [r5]
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d905      	bls.n	8000b6e <__udivmoddi4+0xba>
 8000b62:	b10d      	cbz	r5, 8000b68 <__udivmoddi4+0xb4>
 8000b64:	e9c5 0100 	strd	r0, r1, [r5]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e7f5      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000b6e:	fab3 f183 	clz	r1, r3
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d146      	bne.n	8000c04 <__udivmoddi4+0x150>
 8000b76:	42a3      	cmp	r3, r4
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xcc>
 8000b7a:	4290      	cmp	r0, r2
 8000b7c:	f0c0 80f0 	bcc.w	8000d60 <__udivmoddi4+0x2ac>
 8000b80:	1a86      	subs	r6, r0, r2
 8000b82:	eb64 0303 	sbc.w	r3, r4, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d0e6      	beq.n	8000b5a <__udivmoddi4+0xa6>
 8000b8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b90:	e7e3      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	f040 8090 	bne.w	8000cb8 <__udivmoddi4+0x204>
 8000b98:	eba1 040c 	sub.w	r4, r1, ip
 8000b9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba0:	fa1f f78c 	uxth.w	r7, ip
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb08 4416 	mls	r4, r8, r6, r4
 8000bb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb6:	fb07 f006 	mul.w	r0, r7, r6
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x11c>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x11a>
 8000bc8:	4298      	cmp	r0, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2b4>
 8000bce:	4626      	mov	r6, r4
 8000bd0:	1a1c      	subs	r4, r3, r0
 8000bd2:	fa1f f38e 	uxth.w	r3, lr
 8000bd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bda:	fb08 4410 	mls	r4, r8, r0, r4
 8000bde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000be2:	fb00 f707 	mul.w	r7, r0, r7
 8000be6:	429f      	cmp	r7, r3
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x148>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0x146>
 8000bf4:	429f      	cmp	r7, r3
 8000bf6:	f200 80b0 	bhi.w	8000d5a <__udivmoddi4+0x2a6>
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	1bdb      	subs	r3, r3, r7
 8000bfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c02:	e7a5      	b.n	8000b50 <__udivmoddi4+0x9c>
 8000c04:	f1c1 0620 	rsb	r6, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c14:	fa04 f301 	lsl.w	r3, r4, r1
 8000c18:	ea43 030c 	orr.w	r3, r3, ip
 8000c1c:	40f4      	lsrs	r4, r6
 8000c1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c22:	0c38      	lsrs	r0, r7, #16
 8000c24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c28:	fbb4 fef0 	udiv	lr, r4, r0
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fb00 441e 	mls	r4, r0, lr, r4
 8000c34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c38:	fb0e f90c 	mul.w	r9, lr, ip
 8000c3c:	45a1      	cmp	r9, r4
 8000c3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x1a6>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c4a:	f080 8084 	bcs.w	8000d56 <__udivmoddi4+0x2a2>
 8000c4e:	45a1      	cmp	r9, r4
 8000c50:	f240 8081 	bls.w	8000d56 <__udivmoddi4+0x2a2>
 8000c54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	eba4 0409 	sub.w	r4, r4, r9
 8000c5e:	fa1f f983 	uxth.w	r9, r3
 8000c62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c66:	fb00 4413 	mls	r4, r0, r3, r4
 8000c6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x1d2>
 8000c76:	193c      	adds	r4, r7, r4
 8000c78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c7c:	d267      	bcs.n	8000d4e <__udivmoddi4+0x29a>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	d965      	bls.n	8000d4e <__udivmoddi4+0x29a>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	443c      	add	r4, r7
 8000c86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c8e:	eba4 040c 	sub.w	r4, r4, ip
 8000c92:	429c      	cmp	r4, r3
 8000c94:	46ce      	mov	lr, r9
 8000c96:	469c      	mov	ip, r3
 8000c98:	d351      	bcc.n	8000d3e <__udivmoddi4+0x28a>
 8000c9a:	d04e      	beq.n	8000d3a <__udivmoddi4+0x286>
 8000c9c:	b155      	cbz	r5, 8000cb4 <__udivmoddi4+0x200>
 8000c9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000ca2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ca6:	fa04 f606 	lsl.w	r6, r4, r6
 8000caa:	40cb      	lsrs	r3, r1
 8000cac:	431e      	orrs	r6, r3
 8000cae:	40cc      	lsrs	r4, r1
 8000cb0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e750      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000cb8:	f1c2 0320 	rsb	r3, r2, #32
 8000cbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	430c      	orrs	r4, r1
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cdc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce6:	fb00 f107 	mul.w	r1, r0, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x24c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cf6:	d22c      	bcs.n	8000d52 <__udivmoddi4+0x29e>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d92a      	bls.n	8000d52 <__udivmoddi4+0x29e>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d08:	fb08 3311 	mls	r3, r8, r1, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb01 f307 	mul.w	r3, r1, r7
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x276>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d20:	d213      	bcs.n	8000d4a <__udivmoddi4+0x296>
 8000d22:	42a3      	cmp	r3, r4
 8000d24:	d911      	bls.n	8000d4a <__udivmoddi4+0x296>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4464      	add	r4, ip
 8000d2a:	1ae4      	subs	r4, r4, r3
 8000d2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d30:	e739      	b.n	8000ba6 <__udivmoddi4+0xf2>
 8000d32:	4604      	mov	r4, r0
 8000d34:	e6f0      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d36:	4608      	mov	r0, r1
 8000d38:	e706      	b.n	8000b48 <__udivmoddi4+0x94>
 8000d3a:	45c8      	cmp	r8, r9
 8000d3c:	d2ae      	bcs.n	8000c9c <__udivmoddi4+0x1e8>
 8000d3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7a8      	b.n	8000c9c <__udivmoddi4+0x1e8>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	e7ed      	b.n	8000d2a <__udivmoddi4+0x276>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	e799      	b.n	8000c86 <__udivmoddi4+0x1d2>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e7d4      	b.n	8000d00 <__udivmoddi4+0x24c>
 8000d56:	46d6      	mov	lr, sl
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1a6>
 8000d5a:	4463      	add	r3, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	e74d      	b.n	8000bfc <__udivmoddi4+0x148>
 8000d60:	4606      	mov	r6, r0
 8000d62:	4623      	mov	r3, r4
 8000d64:	4608      	mov	r0, r1
 8000d66:	e70f      	b.n	8000b88 <__udivmoddi4+0xd4>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	e730      	b.n	8000bd0 <__udivmoddi4+0x11c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <MX_ADC1_Init+0x9c>)
 8000d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000d8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000db6:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0xa0>)
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000dd6:	f000 fe07 	bl	80019e8 <HAL_ADC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de0:	f000 fcb8 	bl	8001754 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000dec:	2303      	movs	r3, #3
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_ADC1_Init+0x98>)
 8000df6:	f000 ff87 	bl	8001d08 <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e00:	f000 fca8 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000013c 	.word	0x2000013c
 8000e10:	40012000 	.word	0x40012000
 8000e14:	0f000001 	.word	0x0f000001

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <HAL_ADC_MspInit+0x7c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d127      	bne.n	8000e8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e72:	2306      	movs	r3, #6
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_ADC_MspInit+0x84>)
 8000e86:	f001 fa6f 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012000 	.word	0x40012000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <_Z5Get_Xv>:

bool LimiterClicked = false;


double Get_X(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;  // PA1 -> ADC_IN1
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	60bb      	str	r3, [r7, #8]
	 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4828      	ldr	r0, [pc, #160]	@ (8000f64 <_Z5Get_Xv+0xc4>)
 8000ec4:	f000 ff20 	bl	8001d08 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000ec8:	4826      	ldr	r0, [pc, #152]	@ (8000f64 <_Z5Get_Xv+0xc4>)
 8000eca:	f000 fdd1 	bl	8001a70 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000ece:	210a      	movs	r1, #10
 8000ed0:	4824      	ldr	r0, [pc, #144]	@ (8000f64 <_Z5Get_Xv+0xc4>)
 8000ed2:	f000 fe81 	bl	8001bd8 <HAL_ADC_PollForConversion>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d015      	beq.n	8000f12 <_Z5Get_Xv+0x72>
	{
		raw_X = HAL_ADC_GetValue(&hadc1);
 8000ee6:	481f      	ldr	r0, [pc, #124]	@ (8000f64 <_Z5Get_Xv+0xc4>)
 8000ee8:	f000 ff01 	bl	8001cee <HAL_ADC_GetValue>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1e      	ldr	r2, [pc, #120]	@ (8000f68 <_Z5Get_Xv+0xc8>)
 8000ef0:	6013      	str	r3, [r2, #0]
		adc_X = (uint8_t)((raw_Y * 255) / 4096);
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <_Z5Get_Xv+0xcc>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	0b1b      	lsrs	r3, r3, #12
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <_Z5Get_Xv+0xd0>)
 8000f02:	701a      	strb	r2, [r3, #0]
		X_value = (int8_t)(adc_Y - 128);
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <_Z5Get_Xv+0xd4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3b80      	subs	r3, #128	@ 0x80
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	b25a      	sxtb	r2, r3
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <_Z5Get_Xv+0xd8>)
 8000f10:	701a      	strb	r2, [r3, #0]
	}

	double x_db = static_cast<double>(X_value);
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <_Z5Get_Xv+0xd8>)
 8000f14:	f993 3000 	ldrsb.w	r3, [r3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff faaf 	bl	800047c <__aeabi_i2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double x_final = (x_db * 90) / 128;
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <_Z5Get_Xv+0xdc>)
 8000f2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f30:	f7ff fb0e 	bl	8000550 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <_Z5Get_Xv+0xe0>)
 8000f42:	f7ff fc2f 	bl	80007a4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	e9c7 2304 	strd	r2, r3, [r7, #16]


	return x_final;
 8000f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f52:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f56:	eeb0 0a47 	vmov.f32	s0, s14
 8000f5a:	eef0 0a67 	vmov.f32	s1, s15
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000013c 	.word	0x2000013c
 8000f68:	20000188 	.word	0x20000188
 8000f6c:	2000018c 	.word	0x2000018c
 8000f70:	20000190 	.word	0x20000190
 8000f74:	20000191 	.word	0x20000191
 8000f78:	20000192 	.word	0x20000192
 8000f7c:	40568000 	.word	0x40568000
 8000f80:	40600000 	.word	0x40600000

08000f84 <_Z5Get_Yv>:

double Get_Y(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_2;  // PA2 -> ADC_IN2
 8000f96:	2302      	movs	r3, #2
 8000f98:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482d      	ldr	r0, [pc, #180]	@ (800105c <_Z5Get_Yv+0xd8>)
 8000fa8:	f000 feae 	bl	8001d08 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 8000fac:	482b      	ldr	r0, [pc, #172]	@ (800105c <_Z5Get_Yv+0xd8>)
 8000fae:	f000 fd5f 	bl	8001a70 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000fb2:	210a      	movs	r1, #10
 8000fb4:	4829      	ldr	r0, [pc, #164]	@ (800105c <_Z5Get_Yv+0xd8>)
 8000fb6:	f000 fe0f 	bl	8001bd8 <HAL_ADC_PollForConversion>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2301      	moveq	r3, #1
 8000fc2:	2300      	movne	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d015      	beq.n	8000ff6 <_Z5Get_Yv+0x72>
	{
		raw_Y = HAL_ADC_GetValue(&hadc1);
 8000fca:	4824      	ldr	r0, [pc, #144]	@ (800105c <_Z5Get_Yv+0xd8>)
 8000fcc:	f000 fe8f 	bl	8001cee <HAL_ADC_GetValue>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a23      	ldr	r2, [pc, #140]	@ (8001060 <_Z5Get_Yv+0xdc>)
 8000fd4:	6013      	str	r3, [r2, #0]
		adc_Y = (uint8_t)((raw_X * 255) / 4096);
 8000fd6:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <_Z5Get_Yv+0xe0>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	0b1b      	lsrs	r3, r3, #12
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <_Z5Get_Yv+0xe4>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		Y_value = (int8_t)(adc_X - 128);
 8000fe8:	4b20      	ldr	r3, [pc, #128]	@ (800106c <_Z5Get_Yv+0xe8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b80      	subs	r3, #128	@ 0x80
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <_Z5Get_Yv+0xec>)
 8000ff4:	701a      	strb	r2, [r3, #0]
	}

	double y_db = static_cast<double>(Y_value);
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <_Z5Get_Yv+0xec>)
 8000ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa3d 	bl	800047c <__aeabi_i2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double y_final = -((y_db * 90) / 128);
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <_Z5Get_Yv+0xf0>)
 8001010:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001014:	f7ff fa9c 	bl	8000550 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <_Z5Get_Yv+0xf4>)
 8001026:	f7ff fbbd 	bl	80007a4 <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4611      	mov	r1, r2
 8001030:	6139      	str	r1, [r7, #16]
 8001032:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001036:	617b      	str	r3, [r7, #20]
	return y_final + 90;
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <_Z5Get_Yv+0xf0>)
 800103e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001042:	f7ff f8cf 	bl	80001e4 <__adddf3>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	ec43 2b17 	vmov	d7, r2, r3
}
 800104e:	eeb0 0a47 	vmov.f32	s0, s14
 8001052:	eef0 0a67 	vmov.f32	s1, s15
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000013c 	.word	0x2000013c
 8001060:	2000018c 	.word	0x2000018c
 8001064:	20000188 	.word	0x20000188
 8001068:	20000191 	.word	0x20000191
 800106c:	20000190 	.word	0x20000190
 8001070:	20000193 	.word	0x20000193
 8001074:	40568000 	.word	0x40568000
 8001078:	40600000 	.word	0x40600000

0800107c <_Z11Get_Limiterv>:

bool Get_Limiter(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	if (LimiterClicked == true && systick_counter >= 50)
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <_Z11Get_Limiterv+0x34>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d105      	bne.n	8001094 <_Z11Get_Limiterv+0x18>
 8001088:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <_Z11Get_Limiterv+0x38>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b31      	cmp	r3, #49	@ 0x31
 800108e:	d901      	bls.n	8001094 <_Z11Get_Limiterv+0x18>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <_Z11Get_Limiterv+0x1a>
 8001094:	2300      	movs	r3, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <_Z11Get_Limiterv+0x24>
	{
		LimiterClicked = false;
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <_Z11Get_Limiterv+0x34>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
	}
	return LimiterClicked;
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <_Z11Get_Limiterv+0x34>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000194 	.word	0x20000194
 80010b4:	20000184 	.word	0x20000184

080010b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <MX_GPIO_Init+0xa0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_GPIO_Init+0xa0>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_GPIO_Init+0xa0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_GPIO_Init+0xa0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <MX_GPIO_Init+0xa0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <MX_GPIO_Init+0xa0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <MX_GPIO_Init+0xa0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_GPIO_Init+0xa0>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_GPIO_Init+0xa0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Limit_SW_Pin;
 8001122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112e:	2301      	movs	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Limit_SW_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	4808      	ldr	r0, [pc, #32]	@ (800115c <MX_GPIO_Init+0xa4>)
 800113a:	f001 f915 	bl	8002368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2028      	movs	r0, #40	@ 0x28
 8001144:	f001 f8d9 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001148:	2028      	movs	r0, #40	@ 0x28
 800114a:	f001 f8f2 	bl	8002332 <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40020400 	.word	0x40020400

08001160 <HAL_GPIO_EXTI_Callback>:
#include "irq.hpp"
#include "main.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Limit_SW_Pin)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001170:	d105      	bne.n	800117e <HAL_GPIO_EXTI_Callback+0x1e>
		{
			LimiterClicked = true;
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
			systick_counter = 0;
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x30>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
		}
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000194 	.word	0x20000194
 8001190:	20000184 	.word	0x20000184

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f000 fb90 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f83c 	bl	8001218 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f7ff ff8a 	bl	80010b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011a4:	f7ff fde6 	bl	8000d74 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80011a8:	f006 fae0 	bl	800776c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  X_val = Get_X();
 80011ac:	f7ff fe78 	bl	8000ea0 <_Z5Get_Xv>
 80011b0:	eeb0 7a40 	vmov.f32	s14, s0
 80011b4:	eef0 7a60 	vmov.f32	s15, s1
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <main+0x74>)
 80011ba:	ed83 7b00 	vstr	d7, [r3]
	  Y_val = Get_Y();
 80011be:	f7ff fee1 	bl	8000f84 <_Z5Get_Yv>
 80011c2:	eeb0 7a40 	vmov.f32	s14, s0
 80011c6:	eef0 7a60 	vmov.f32	s15, s1
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <main+0x78>)
 80011cc:	ed83 7b00 	vstr	d7, [r3]
	  Limiter = Get_Limiter();
 80011d0:	f7ff ff54 	bl	800107c <_Z11Get_Limiterv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <main+0x7c>)
 80011da:	701a      	strb	r2, [r3, #0]

//	  send_keyboard(0, 0x17, 0, 0, 0, 0, 0);
//	  HAL_Delay(100);
//	  send_keyboard(0, 0, 0, 0, 0, 0, 0);
//	  HAL_Delay(5000);
	  Send_KeyboardButton(X_val, Y_val, Limiter, &keyboard_state);
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <main+0x74>)
 80011de:	ed93 7b00 	vldr	d7, [r3]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <main+0x78>)
 80011e4:	ed93 6b00 	vldr	d6, [r3]
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <main+0x7c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4909      	ldr	r1, [pc, #36]	@ (8001214 <main+0x80>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	eeb0 1a46 	vmov.f32	s2, s12
 80011f4:	eef0 1a66 	vmov.f32	s3, s13
 80011f8:	eeb0 0a47 	vmov.f32	s0, s14
 80011fc:	eef0 0a67 	vmov.f32	s1, s15
 8001200:	f000 f9b2 	bl	8001568 <_Z19Send_KeyboardButtonddbP13KeyboardState>
	  X_val = Get_X();
 8001204:	bf00      	nop
 8001206:	e7d1      	b.n	80011ac <main+0x18>
 8001208:	20000198 	.word	0x20000198
 800120c:	200001a0 	.word	0x200001a0
 8001210:	200001a8 	.word	0x200001a8
 8001214:	20000000 	.word	0x20000000

08001218 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	@ 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	@ 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f006 ff34 	bl	8008094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <_Z18SystemClock_Configv+0xe4>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a2d      	ldr	r2, [pc, #180]	@ (80012fc <_Z18SystemClock_Configv+0xe4>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <_Z18SystemClock_Configv+0xe4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <_Z18SystemClock_Configv+0xe8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001264:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <_Z18SystemClock_Configv+0xe8>)
 8001266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <_Z18SystemClock_Configv+0xe8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800128c:	2319      	movs	r3, #25
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001290:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001294:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001296:	2304      	movs	r3, #4
 8001298:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129a:	2307      	movs	r3, #7
 800129c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fc34 	bl	8003b10 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80012b8:	f000 fa4c 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	230f      	movs	r3, #15
 80012be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c0:	2302      	movs	r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2102      	movs	r1, #2
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fe91 	bl	8004000 <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80012ee:	f000 fa31 	bl	8001754 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <_Z10getRange_Xd>:

/* USER CODE BEGIN 4 */

X_Ranges getRange_X(double value)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	ed87 0b00 	vstr	d0, [r7]
    if (value >= 70) {
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b5a      	ldr	r3, [pc, #360]	@ (800147c <_Z10getRange_Xd+0x178>)
 8001314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001318:	f7ff fba0 	bl	8000a5c <__aeabi_dcmpge>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_Z10getRange_Xd+0x22>
        return X_Range_O;
 8001322:	2309      	movs	r3, #9
 8001324:	e0a6      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= 50 && value < 70) {
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b55      	ldr	r3, [pc, #340]	@ (8001480 <_Z10getRange_Xd+0x17c>)
 800132c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001330:	f7ff fb94 	bl	8000a5c <__aeabi_dcmpge>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <_Z10getRange_Xd+0x4e>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b4f      	ldr	r3, [pc, #316]	@ (800147c <_Z10getRange_Xd+0x178>)
 8001340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001344:	f7ff fb76 	bl	8000a34 <__aeabi_dcmplt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_Z10getRange_Xd+0x4e>
        return X_Range_I;
 800134e:	2308      	movs	r3, #8
 8001350:	e090      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= 30 && value < 50) {
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <_Z10getRange_Xd+0x180>)
 8001358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800135c:	f7ff fb7e 	bl	8000a5c <__aeabi_dcmpge>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <_Z10getRange_Xd+0x7a>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <_Z10getRange_Xd+0x17c>)
 800136c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001370:	f7ff fb60 	bl	8000a34 <__aeabi_dcmplt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <_Z10getRange_Xd+0x7a>
        return X_Range_U;
 800137a:	2307      	movs	r3, #7
 800137c:	e07a      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= 10 && value < 30) {
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <_Z10getRange_Xd+0x184>)
 8001384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001388:	f7ff fb68 	bl	8000a5c <__aeabi_dcmpge>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <_Z10getRange_Xd+0xa6>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <_Z10getRange_Xd+0x180>)
 8001398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139c:	f7ff fb4a 	bl	8000a34 <__aeabi_dcmplt>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <_Z10getRange_Xd+0xa6>
        return X_Range_Y;
 80013a6:	2306      	movs	r3, #6
 80013a8:	e064      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= -10 && value < 10) {
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b37      	ldr	r3, [pc, #220]	@ (800148c <_Z10getRange_Xd+0x188>)
 80013b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b4:	f7ff fb52 	bl	8000a5c <__aeabi_dcmpge>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <_Z10getRange_Xd+0xd2>
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b31      	ldr	r3, [pc, #196]	@ (8001488 <_Z10getRange_Xd+0x184>)
 80013c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c8:	f7ff fb34 	bl	8000a34 <__aeabi_dcmplt>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <_Z10getRange_Xd+0xd2>
        return X_Range_T;
 80013d2:	2305      	movs	r3, #5
 80013d4:	e04e      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= -30 && value < -10) {
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <_Z10getRange_Xd+0x18c>)
 80013dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013e0:	f7ff fb3c 	bl	8000a5c <__aeabi_dcmpge>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <_Z10getRange_Xd+0xfe>
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b27      	ldr	r3, [pc, #156]	@ (800148c <_Z10getRange_Xd+0x188>)
 80013f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f4:	f7ff fb1e 	bl	8000a34 <__aeabi_dcmplt>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_Z10getRange_Xd+0xfe>
        return X_Range_R;
 80013fe:	2303      	movs	r3, #3
 8001400:	e038      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= -50 && value < -30) {
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <_Z10getRange_Xd+0x190>)
 8001408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800140c:	f7ff fb26 	bl	8000a5c <__aeabi_dcmpge>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <_Z10getRange_Xd+0x12a>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <_Z10getRange_Xd+0x18c>)
 800141c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001420:	f7ff fb08 	bl	8000a34 <__aeabi_dcmplt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <_Z10getRange_Xd+0x12a>
        return X_Range_E;
 800142a:	2302      	movs	r3, #2
 800142c:	e022      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value >= -70 && value < -50) {
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <_Z10getRange_Xd+0x194>)
 8001434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001438:	f7ff fb10 	bl	8000a5c <__aeabi_dcmpge>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <_Z10getRange_Xd+0x156>
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <_Z10getRange_Xd+0x190>)
 8001448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144c:	f7ff faf2 	bl	8000a34 <__aeabi_dcmplt>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <_Z10getRange_Xd+0x156>
        return X_Range_W;
 8001456:	2301      	movs	r3, #1
 8001458:	e00c      	b.n	8001474 <_Z10getRange_Xd+0x170>
    } else if (value < -70) {
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <_Z10getRange_Xd+0x194>)
 8001460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001464:	f7ff fae6 	bl	8000a34 <__aeabi_dcmplt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_Z10getRange_Xd+0x16e>
        return X_Range_Q;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <_Z10getRange_Xd+0x170>
    }
    return X_Range_None;
 8001472:	230a      	movs	r3, #10
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40518000 	.word	0x40518000
 8001480:	40490000 	.word	0x40490000
 8001484:	403e0000 	.word	0x403e0000
 8001488:	40240000 	.word	0x40240000
 800148c:	c0240000 	.word	0xc0240000
 8001490:	c03e0000 	.word	0xc03e0000
 8001494:	c0490000 	.word	0xc0490000
 8001498:	c0518000 	.word	0xc0518000
 800149c:	00000000 	.word	0x00000000

080014a0 <_Z10getRange_Yd>:

Y_Ranges getRange_Y(double value)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	ed87 0b00 	vstr	d0, [r7]
	if (value >= 135) {
 80014aa:	a32b      	add	r3, pc, #172	@ (adr r3, 8001558 <_Z10getRange_Yd+0xb8>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014b4:	f7ff fad2 	bl	8000a5c <__aeabi_dcmpge>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_Z10getRange_Yd+0x22>
		return Y_Range_F;
 80014be:	2303      	movs	r3, #3
 80014c0:	e043      	b.n	800154a <_Z10getRange_Yd+0xaa>
	} else if (value >= 90 && value < 135) {
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <_Z10getRange_Yd+0xc0>)
 80014c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014cc:	f7ff fac6 	bl	8000a5c <__aeabi_dcmpge>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <_Z10getRange_Yd+0x4e>
 80014d6:	a320      	add	r3, pc, #128	@ (adr r3, 8001558 <_Z10getRange_Yd+0xb8>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e0:	f7ff faa8 	bl	8000a34 <__aeabi_dcmplt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <_Z10getRange_Yd+0x4e>
		return Y_Range_D;
 80014ea:	2302      	movs	r3, #2
 80014ec:	e02d      	b.n	800154a <_Z10getRange_Yd+0xaa>
	} else if (value >= 45 && value < 90) {
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <_Z10getRange_Yd+0xc4>)
 80014f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f8:	f7ff fab0 	bl	8000a5c <__aeabi_dcmpge>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <_Z10getRange_Yd+0x7a>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <_Z10getRange_Yd+0xc0>)
 8001508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800150c:	f7ff fa92 	bl	8000a34 <__aeabi_dcmplt>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <_Z10getRange_Yd+0x7a>
		return Y_Range_S;
 8001516:	2301      	movs	r3, #1
 8001518:	e017      	b.n	800154a <_Z10getRange_Yd+0xaa>
	} else if (value > 0 && value < 45) {
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001526:	f7ff faa3 	bl	8000a70 <__aeabi_dcmpgt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <_Z10getRange_Yd+0xa8>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <_Z10getRange_Yd+0xc4>)
 8001536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153a:	f7ff fa7b 	bl	8000a34 <__aeabi_dcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_Z10getRange_Yd+0xa8>
		return Y_Range_A;
 8001544:	2300      	movs	r3, #0
 8001546:	e000      	b.n	800154a <_Z10getRange_Yd+0xaa>
	}
	return Y_Range_None;
 8001548:	2304      	movs	r3, #4
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	4060e000 	.word	0x4060e000
 8001560:	40568000 	.word	0x40568000
 8001564:	40468000 	.word	0x40468000

08001568 <_Z19Send_KeyboardButtonddbP13KeyboardState>:

void Send_KeyboardButton(double X_val,double Y_val, bool Limiter, KeyboardState *state)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	@ 0x30
 800156c:	af04      	add	r7, sp, #16
 800156e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001572:	ed87 1b02 	vstr	d1, [r7, #8]
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	uint8_t keycodeX = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	77fb      	strb	r3, [r7, #31]
	uint8_t keycodeY = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	77bb      	strb	r3, [r7, #30]
	bool keySent = false;
 8001584:	2300      	movs	r3, #0
 8001586:	777b      	strb	r3, [r7, #29]

	// Check X Range:
	X_Ranges currentXRange = getRange_X(X_val);
 8001588:	ed97 0b04 	vldr	d0, [r7, #16]
 800158c:	f7ff feba 	bl	8001304 <_Z10getRange_Xd>
 8001590:	4603      	mov	r3, r0
 8001592:	773b      	strb	r3, [r7, #28]
	if (currentXRange != state->previousRangeX)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	7f3a      	ldrb	r2, [r7, #28]
 800159a:	429a      	cmp	r2, r3
 800159c:	d061      	beq.n	8001662 <_Z19Send_KeyboardButtonddbP13KeyboardState+0xfa>
	{
		switch (currentXRange)
 800159e:	7f3b      	ldrb	r3, [r7, #28]
 80015a0:	2b0a      	cmp	r3, #10
 80015a2:	d83a      	bhi.n	800161a <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb2>
 80015a4:	a201      	add	r2, pc, #4	@ (adr r2, 80015ac <_Z19Send_KeyboardButtonddbP13KeyboardState+0x44>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015d9 	.word	0x080015d9
 80015b0:	080015df 	.word	0x080015df
 80015b4:	080015e5 	.word	0x080015e5
 80015b8:	080015eb 	.word	0x080015eb
 80015bc:	080015f1 	.word	0x080015f1
 80015c0:	080015f7 	.word	0x080015f7
 80015c4:	080015fd 	.word	0x080015fd
 80015c8:	08001603 	.word	0x08001603
 80015cc:	08001609 	.word	0x08001609
 80015d0:	0800160f 	.word	0x0800160f
 80015d4:	08001615 	.word	0x08001615
		{
		case X_Range_Q: keycodeX = 0x14; break;
 80015d8:	2314      	movs	r3, #20
 80015da:	77fb      	strb	r3, [r7, #31]
 80015dc:	e01e      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_W: keycodeX = 0x1A; break;
 80015de:	231a      	movs	r3, #26
 80015e0:	77fb      	strb	r3, [r7, #31]
 80015e2:	e01b      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_E: keycodeX = 0x08; break;
 80015e4:	2308      	movs	r3, #8
 80015e6:	77fb      	strb	r3, [r7, #31]
 80015e8:	e018      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_R: keycodeX = 0x15; break;
 80015ea:	2315      	movs	r3, #21
 80015ec:	77fb      	strb	r3, [r7, #31]
 80015ee:	e015      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_S: keycodeX = 0x16; break;
 80015f0:	2316      	movs	r3, #22
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e012      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_T: keycodeX = 0x17; break;
 80015f6:	2317      	movs	r3, #23
 80015f8:	77fb      	strb	r3, [r7, #31]
 80015fa:	e00f      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_Y: keycodeX = 0x1C; break;
 80015fc:	231c      	movs	r3, #28
 80015fe:	77fb      	strb	r3, [r7, #31]
 8001600:	e00c      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_U: keycodeX = 0x18; break;
 8001602:	2318      	movs	r3, #24
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e009      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_I: keycodeX = 0x0C; break;
 8001608:	230c      	movs	r3, #12
 800160a:	77fb      	strb	r3, [r7, #31]
 800160c:	e006      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_O: keycodeX = 0x12; break;
 800160e:	2312      	movs	r3, #18
 8001610:	77fb      	strb	r3, [r7, #31]
 8001612:	e003      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		case X_Range_None: keycodeX = 0x00; break;
 8001614:	2300      	movs	r3, #0
 8001616:	77fb      	strb	r3, [r7, #31]
 8001618:	e000      	b.n	800161c <_Z19Send_KeyboardButtonddbP13KeyboardState+0xb4>
		default: break;
 800161a:	bf00      	nop
		}

		if (keycodeX != 0)
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01f      	beq.n	8001662 <_Z19Send_KeyboardButtonddbP13KeyboardState+0xfa>
		{
			send_keyboard(0, keycodeX, 0, 0, 0, 0, 0);
 8001622:	7ff9      	ldrb	r1, [r7, #31]
 8001624:	2300      	movs	r3, #0
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2300      	movs	r3, #0
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2300      	movs	r3, #0
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	2200      	movs	r2, #0
 8001634:	2000      	movs	r0, #0
 8001636:	f006 f8f1 	bl	800781c <send_keyboard>
			HAL_Delay(100);
 800163a:	2064      	movs	r0, #100	@ 0x64
 800163c:	f000 f9b0 	bl	80019a0 <HAL_Delay>
			send_keyboard(0, 0, 0, 0, 0, 0, 0);
 8001640:	2300      	movs	r3, #0
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2300      	movs	r3, #0
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2300      	movs	r3, #0
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f006 f8e2 	bl	800781c <send_keyboard>

			keySent = true;
 8001658:	2301      	movs	r3, #1
 800165a:	777b      	strb	r3, [r7, #29]

			state->previousRangeX = currentXRange;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7f3a      	ldrb	r2, [r7, #28]
 8001660:	701a      	strb	r2, [r3, #0]
		}
	}

	// Check Y Range:
	Y_Ranges currentYRange = getRange_Y(Y_val);
 8001662:	ed97 0b02 	vldr	d0, [r7, #8]
 8001666:	f7ff ff1b 	bl	80014a0 <_Z10getRange_Yd>
 800166a:	4603      	mov	r3, r0
 800166c:	76fb      	strb	r3, [r7, #27]
	if(currentYRange != state->previousRangeY)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	7efa      	ldrb	r2, [r7, #27]
 8001674:	429a      	cmp	r2, r3
 8001676:	d042      	beq.n	80016fe <_Z19Send_KeyboardButtonddbP13KeyboardState+0x196>
	{
		switch(currentYRange)
 8001678:	7efb      	ldrb	r3, [r7, #27]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d81b      	bhi.n	80016b6 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x14e>
 800167e:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x11c>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	080016ab 	.word	0x080016ab
 8001688:	080016a5 	.word	0x080016a5
 800168c:	0800169f 	.word	0x0800169f
 8001690:	08001699 	.word	0x08001699
 8001694:	080016b1 	.word	0x080016b1
		{
		case Y_Range_F: keycodeY = 0x09; break;
 8001698:	2309      	movs	r3, #9
 800169a:	77bb      	strb	r3, [r7, #30]
 800169c:	e00c      	b.n	80016b8 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x150>
		case Y_Range_D: keycodeY = 0x07; break;
 800169e:	2307      	movs	r3, #7
 80016a0:	77bb      	strb	r3, [r7, #30]
 80016a2:	e009      	b.n	80016b8 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x150>
		case Y_Range_S: keycodeY = 0x16; break;
 80016a4:	2316      	movs	r3, #22
 80016a6:	77bb      	strb	r3, [r7, #30]
 80016a8:	e006      	b.n	80016b8 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x150>
		case Y_Range_A: keycodeY = 0x04; break;
 80016aa:	2304      	movs	r3, #4
 80016ac:	77bb      	strb	r3, [r7, #30]
 80016ae:	e003      	b.n	80016b8 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x150>
		case Y_Range_None: keycodeY = 0x00; break;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77bb      	strb	r3, [r7, #30]
 80016b4:	e000      	b.n	80016b8 <_Z19Send_KeyboardButtonddbP13KeyboardState+0x150>
		default: break;
 80016b6:	bf00      	nop
		}

		if (keycodeY != 0)
 80016b8:	7fbb      	ldrb	r3, [r7, #30]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01f      	beq.n	80016fe <_Z19Send_KeyboardButtonddbP13KeyboardState+0x196>
		{
			send_keyboard(0, keycodeY, 0, 0, 0, 0, 0);
 80016be:	7fb9      	ldrb	r1, [r7, #30]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2300      	movs	r3, #0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f006 f8a3 	bl	800781c <send_keyboard>
			HAL_Delay(100);
 80016d6:	2064      	movs	r0, #100	@ 0x64
 80016d8:	f000 f962 	bl	80019a0 <HAL_Delay>
			send_keyboard(0, 0, 0, 0, 0, 0, 0);
 80016dc:	2300      	movs	r3, #0
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2300      	movs	r3, #0
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2000      	movs	r0, #0
 80016f0:	f006 f894 	bl	800781c <send_keyboard>

			keySent = true;
 80016f4:	2301      	movs	r3, #1
 80016f6:	777b      	strb	r3, [r7, #29]

			state->previousRangeY = currentYRange;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7efa      	ldrb	r2, [r7, #27]
 80016fc:	705a      	strb	r2, [r3, #1]
		}
	}

	// Check Limiter:
	if (Limiter == true)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d11c      	bne.n	800173e <_Z19Send_KeyboardButtonddbP13KeyboardState+0x1d6>
	{
		send_keyboard(0, 0x0A, 0, 0, 0, 0, 0);
 8001704:	2300      	movs	r3, #0
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2300      	movs	r3, #0
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	2300      	movs	r3, #0
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2300      	movs	r3, #0
 8001712:	2200      	movs	r2, #0
 8001714:	210a      	movs	r1, #10
 8001716:	2000      	movs	r0, #0
 8001718:	f006 f880 	bl	800781c <send_keyboard>
		HAL_Delay(100);
 800171c:	2064      	movs	r0, #100	@ 0x64
 800171e:	f000 f93f 	bl	80019a0 <HAL_Delay>
		send_keyboard(0, 0, 0, 0, 0, 0, 0);
 8001722:	2300      	movs	r3, #0
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f006 f871 	bl	800781c <send_keyboard>
		keySent =  true;
 800173a:	2301      	movs	r3, #1
 800173c:	777b      	strb	r3, [r7, #29]
//	else
//	{
//		send_keyboard(0, 0, 0, 0, 0, 0, 0);
//	}

    if (keySent)
 800173e:	7f7b      	ldrb	r3, [r7, #29]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <_Z19Send_KeyboardButtonddbP13KeyboardState+0x1e2>
    {
        HAL_Delay(100);
 8001744:	2064      	movs	r0, #100	@ 0x64
 8001746:	f000 f92b 	bl	80019a0 <HAL_Delay>
    }

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop

08001754 <Error_Handler>:
/**kqkqkqkqkqk
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
systick_counter++;
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SysTick_Handler+0x18>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a03      	ldr	r2, [pc, #12]	@ (800181c <SysTick_Handler+0x18>)
 8001810:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 f8a5 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000184 	.word	0x20000184

08001820 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_SW_Pin);
 8001824:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001828:	f000 ff22 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <OTG_FS_IRQHandler+0x10>)
 8001836:	f001 f877 	bl	8002928 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000690 	.word	0x20000690

08001844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	@ (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	@ (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f006 fc05 	bl	80080a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff fc7b 	bl	8001194 <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80018ac:	08008174 	.word	0x08008174
  ldr r2, =_sbss
 80018b0:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80018b4:	20000b90 	.word	0x20000b90

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 fcfd 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff ff36 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fd15 	bl	800234e <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 fcdd 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	@ (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000004 	.word	0x20000004
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000000c 	.word	0x2000000c
 8001984:	200001ac 	.word	0x200001ac

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200001ac 	.word	0x200001ac

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff ffee 	bl	8001988 <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffde 	bl	8001988 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000000c 	.word	0x2000000c

080019e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e033      	b.n	8001a66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fa06 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d118      	bne.n	8001a58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a2e:	f023 0302 	bic.w	r3, r3, #2
 8001a32:	f043 0202 	orr.w	r2, r3, #2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa86 	bl	8001f4c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a56:	e001      	b.n	8001a5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_Start+0x1a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e097      	b.n	8001bba <HAL_ADC_Start+0x14a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d018      	beq.n	8001ad2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab0:	4b45      	ldr	r3, [pc, #276]	@ (8001bc8 <HAL_ADC_Start+0x158>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a45      	ldr	r2, [pc, #276]	@ (8001bcc <HAL_ADC_Start+0x15c>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9a      	lsrs	r2, r3, #18
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d15f      	bne.n	8001ba0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b1e:	d106      	bne.n	8001b2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b24:	f023 0206 	bic.w	r2, r3, #6
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <HAL_ADC_Start+0x160>)
 8001b3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b48:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d129      	bne.n	8001bb8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e020      	b.n	8001bb8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <HAL_ADC_Start+0x164>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_ADC_Start+0x148>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d114      	bne.n	8001bb8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	f043 0210 	orr.w	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000004 	.word	0x20000004
 8001bcc:	431bde83 	.word	0x431bde83
 8001bd0:	40012300 	.word	0x40012300
 8001bd4:	40012000 	.word	0x40012000

08001bd8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf4:	d113      	bne.n	8001c1e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c04:	d10b      	bne.n	8001c1e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e063      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c1e:	f7ff feb3 	bl	8001988 <HAL_GetTick>
 8001c22:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c24:	e021      	b.n	8001c6a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d01d      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_ADC_PollForConversion+0x6c>
 8001c34:	f7ff fea8 	bl	8001988 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d212      	bcs.n	8001c6a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d00b      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f043 0204 	orr.w	r2, r3, #4
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e03d      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d1d6      	bne.n	8001c26 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0212 	mvn.w	r2, #18
 8001c80:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d123      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11f      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d111      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e105      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x228>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d925      	bls.n	8001d80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	3b1e      	subs	r3, #30
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68d9      	ldr	r1, [r3, #12]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4403      	add	r3, r0
 8001d72:	3b1e      	subs	r3, #30
 8001d74:	409a      	lsls	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	e022      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	2207      	movs	r2, #7
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4403      	add	r3, r0
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d824      	bhi.n	8001e18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b05      	subs	r3, #5
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b05      	subs	r3, #5
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e16:	e04c      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	d824      	bhi.n	8001e6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b23      	subs	r3, #35	@ 0x23
 8001e32:	221f      	movs	r2, #31
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	400a      	ands	r2, r1
 8001e40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b23      	subs	r3, #35	@ 0x23
 8001e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e68:	e023      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b41      	subs	r3, #65	@ 0x41
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b41      	subs	r3, #65	@ 0x41
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb2:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <HAL_ADC_ConfigChannel+0x234>)
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a21      	ldr	r2, [pc, #132]	@ (8001f40 <HAL_ADC_ConfigChannel+0x238>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d109      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b12      	cmp	r3, #18
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_ADC_ConfigChannel+0x238>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d123      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x21e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d003      	beq.n	8001eee <HAL_ADC_ConfigChannel+0x1e6>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b11      	cmp	r3, #17
 8001eec:	d11b      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d111      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_ADC_ConfigChannel+0x23c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_ADC_ConfigChannel+0x240>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9a      	lsrs	r2, r3, #18
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f9      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40012300 	.word	0x40012300
 8001f40:	40012000 	.word	0x40012000
 8001f44:	20000004 	.word	0x20000004
 8001f48:	431bde83 	.word	0x431bde83

08001f4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f54:	4b79      	ldr	r3, [pc, #484]	@ (800213c <ADC_Init+0x1f0>)
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	021a      	lsls	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	4a58      	ldr	r2, [pc, #352]	@ (8002140 <ADC_Init+0x1f4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	e00f      	b.n	800204a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002048:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0202 	bic.w	r2, r2, #2
 8002058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e1b      	ldrb	r3, [r3, #24]
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002086:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	3b01      	subs	r3, #1
 80020a4:	035a      	lsls	r2, r3, #13
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e007      	b.n	80020c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	3b01      	subs	r3, #1
 80020dc:	051a      	lsls	r2, r3, #20
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002102:	025a      	lsls	r2, r3, #9
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	029a      	lsls	r2, r3, #10
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40012300 	.word	0x40012300
 8002140:	0f000001 	.word	0x0f000001

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	@ (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	@ (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	@ (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	@ 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff3e 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff31 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa2 	bl	80022a0 <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e159      	b.n	8002638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8148 	bne.w	8002632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d005      	beq.n	80023ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d130      	bne.n	800241c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d017      	beq.n	8002458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d123      	bne.n	80024ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	08da      	lsrs	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a2 	beq.w	8002632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b57      	ldr	r3, [pc, #348]	@ (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	4a56      	ldr	r2, [pc, #344]	@ (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fe:	4b54      	ldr	r3, [pc, #336]	@ (8002650 <HAL_GPIO_Init+0x2e8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250a:	4a52      	ldr	r2, [pc, #328]	@ (8002654 <HAL_GPIO_Init+0x2ec>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a49      	ldr	r2, [pc, #292]	@ (8002658 <HAL_GPIO_Init+0x2f0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x202>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_GPIO_Init+0x2f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x1fe>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a47      	ldr	r2, [pc, #284]	@ (8002660 <HAL_GPIO_Init+0x2f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a46      	ldr	r2, [pc, #280]	@ (8002664 <HAL_GPIO_Init+0x2fc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x1f6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a45      	ldr	r2, [pc, #276]	@ (8002668 <HAL_GPIO_Init+0x300>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x1f2>
 8002556:	2304      	movs	r3, #4
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x204>
 800255a:	2307      	movs	r3, #7
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x204>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x204>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x204>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x204>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257c:	4935      	ldr	r1, [pc, #212]	@ (8002654 <HAL_GPIO_Init+0x2ec>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258a:	4b38      	ldr	r3, [pc, #224]	@ (800266c <HAL_GPIO_Init+0x304>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ae:	4a2f      	ldr	r2, [pc, #188]	@ (800266c <HAL_GPIO_Init+0x304>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <HAL_GPIO_Init+0x304>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d8:	4a24      	ldr	r2, [pc, #144]	@ (800266c <HAL_GPIO_Init+0x304>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025de:	4b23      	ldr	r3, [pc, #140]	@ (800266c <HAL_GPIO_Init+0x304>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002602:	4a1a      	ldr	r2, [pc, #104]	@ (800266c <HAL_GPIO_Init+0x304>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_GPIO_Init+0x304>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262c:	4a0f      	ldr	r2, [pc, #60]	@ (800266c <HAL_GPIO_Init+0x304>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f aea2 	bls.w	8002384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3724      	adds	r7, #36	@ 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002686:	4a05      	ldr	r2, [pc, #20]	@ (800269c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fd66 	bl	8001160 <HAL_GPIO_EXTI_Callback>
  }
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40013c00 	.word	0x40013c00

080026a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e101      	b.n	80028b6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f005 f9e9 	bl	8007aa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2203      	movs	r2, #3
 80026d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e0:	d102      	bne.n	80026e8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 ff56 	bl	800459e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7c1a      	ldrb	r2, [r3, #16]
 80026fa:	f88d 2000 	strb.w	r2, [sp]
 80026fe:	3304      	adds	r3, #4
 8002700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002702:	f001 fe35 	bl	8004370 <USB_CoreInit>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0ce      	b.n	80028b6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f001 ff4e 	bl	80045c0 <USB_SetCurrentMode>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0bf      	b.n	80028b6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e04a      	b.n	80027d2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3315      	adds	r3, #21
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3314      	adds	r3, #20
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	b298      	uxth	r0, r3
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	332e      	adds	r3, #46	@ 0x2e
 8002778:	4602      	mov	r2, r0
 800277a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3318      	adds	r3, #24
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	331c      	adds	r3, #28
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3320      	adds	r3, #32
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3324      	adds	r3, #36	@ 0x24
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3af      	bcc.n	800273c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e044      	b.n	800286c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	3301      	adds	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	429a      	cmp	r2, r3
 8002874:	d3b5      	bcc.n	80027e2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7c1a      	ldrb	r2, [r3, #16]
 800287e:	f88d 2000 	strb.w	r2, [sp]
 8002882:	3304      	adds	r3, #4
 8002884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002886:	f001 fee7 	bl	8004658 <USB_DevInit>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e00c      	b.n	80028b6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 ff2b 	bl	800570a <USB_DevDisconnect>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_PCD_Start+0x1c>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e022      	b.n	8002920 <HAL_PCD_Start+0x62>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d105      	bne.n	8002902 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fe38 	bl	800457c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f002 fed9 	bl	80056c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b08d      	sub	sp, #52	@ 0x34
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f002 ff97 	bl	8005872 <USB_GetMode>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 848c 	bne.w	8003264 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fefb 	bl	800574c <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8482 	beq.w	8003262 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fee8 	bl	800574c <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d107      	bne.n	8002996 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 0202 	and.w	r2, r2, #2
 8002994:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f002 fed6 	bl	800574c <USB_ReadInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d161      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0210 	bic.w	r2, r2, #16
 80029b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	0c5b      	lsrs	r3, r3, #17
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d124      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d035      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6a38      	ldr	r0, [r7, #32]
 8002a06:	f002 fd0d 	bl	8005424 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a16:	441a      	add	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a28:	441a      	add	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	615a      	str	r2, [r3, #20]
 8002a2e:	e016      	b.n	8002a5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	0c5b      	lsrs	r3, r3, #17
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d110      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a42:	2208      	movs	r2, #8
 8002a44:	4619      	mov	r1, r3
 8002a46:	6a38      	ldr	r0, [r7, #32]
 8002a48:	f002 fcec 	bl	8005424 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a58:	441a      	add	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0210 	orr.w	r2, r2, #16
 8002a6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fe6a 	bl	800574c <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a7e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a82:	f040 80a7 	bne.w	8002bd4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fe6f 	bl	8005772 <USB_ReadDevAllOutEpInterrupt>
 8002a94:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a96:	e099      	b.n	8002bcc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 808e 	beq.w	8002bc0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fe93 	bl	80057da <USB_ReadDevOutEPInterrupt>
 8002ab4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ad2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fe89 	bl	80037ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af0:	461a      	mov	r2, r3
 8002af2:	2308      	movs	r3, #8
 8002af4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002af6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 ff5f 	bl	80039bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b14:	461a      	mov	r2, r3
 8002b16:	2310      	movs	r3, #16
 8002b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d030      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2c:	2b80      	cmp	r3, #128	@ 0x80
 8002b2e:	d109      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b42:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	78db      	ldrb	r3, [r3, #3]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d108      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f005 f894 	bl	8007c9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	2302      	movs	r3, #2
 8002b84:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bbe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f af62 	bne.w	8002a98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 fdb7 	bl	800574c <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002be8:	f040 80db 	bne.w	8002da2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f002 fdd8 	bl	80057a6 <USB_ReadDevAllInEpInterrupt>
 8002bf6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bfc:	e0cd      	b.n	8002d9a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80c2 	beq.w	8002d8e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fdfe 	bl	8005816 <USB_ReadDevInEPInterrupt>
 8002c1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d057      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c46:	4013      	ands	r3, r2
 8002c48:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	799b      	ldrb	r3, [r3, #6]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d132      	bne.n	8002cca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3320      	adds	r3, #32
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4403      	add	r3, r0
 8002c84:	331c      	adds	r3, #28
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4419      	add	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4403      	add	r3, r0
 8002c98:	3320      	adds	r3, #32
 8002c9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <HAL_PCD_IRQHandler+0x3a2>
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3324      	adds	r3, #36	@ 0x24
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d108      	bne.n	8002cca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	f002 fe05 	bl	80058d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f004 ff68 	bl	8007ba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cec:	461a      	mov	r2, r3
 8002cee:	2308      	movs	r3, #8
 8002cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d24:	461a      	mov	r2, r3
 8002d26:	2340      	movs	r3, #64	@ 0x40
 8002d28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d36:	6a38      	ldr	r0, [r7, #32]
 8002d38:	f001 fdf2 	bl	8004920 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3310      	adds	r3, #16
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	78db      	ldrb	r3, [r3, #3]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f004 ffab 	bl	8007cc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d76:	461a      	mov	r2, r3
 8002d78:	2302      	movs	r3, #2
 8002d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fca3 	bl	80036d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	3301      	adds	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f af2e 	bne.w	8002bfe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fcd0 	bl	800574c <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002db2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002db6:	d122      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dde:	2100      	movs	r1, #0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fe89 	bl	8003af8 <HAL_PCDEx_LPM_Callback>
 8002de6:	e002      	b.n	8002dee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f004 ff49 	bl	8007c80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fca2 	bl	800574c <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e12:	d112      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f004 ff05 	bl	8007c34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e38:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fc84 	bl	800574c <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4e:	f040 80b7 	bne.w	8002fc0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 fd57 	bl	8004920 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e76:	e046      	b.n	8002f06 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e84:	461a      	mov	r2, r3
 8002e86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e9c:	0151      	lsls	r1, r2, #5
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	440a      	add	r2, r1
 8002ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002eaa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ebe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ed0:	0151      	lsls	r1, r2, #5
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002eda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ede:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef0:	0151      	lsls	r1, r2, #5
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	440a      	add	r2, r1
 8002ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002efa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002efe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f02:	3301      	adds	r3, #1
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	791b      	ldrb	r3, [r3, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d3b2      	bcc.n	8002e78 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f20:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7bdb      	ldrb	r3, [r3, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f3e:	f043 030b 	orr.w	r3, r3, #11
 8002f42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f54:	f043 030b 	orr.w	r3, r3, #11
 8002f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5a:	e015      	b.n	8002f88 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f6e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f82:	f043 030b 	orr.w	r3, r3, #11
 8002f86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002faa:	461a      	mov	r2, r3
 8002fac:	f002 fc92 	bl	80058d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fbc1 	bl	800574c <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd4:	d123      	bne.n	800301e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fc57 	bl	800588e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fd14 	bl	8004a12 <USB_GetDevSpeed>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681c      	ldr	r4, [r3, #0]
 8002ff6:	f001 f9af 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8002ffa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003000:	461a      	mov	r2, r3
 8003002:	4620      	mov	r0, r4
 8003004:	f001 fa18 	bl	8004438 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f004 fdf4 	bl	8007bf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800301c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f002 fb92 	bl	800574c <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d10a      	bne.n	8003048 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f004 fdd1 	bl	8007bda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f002 0208 	and.w	r2, r2, #8
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f002 fb7d 	bl	800574c <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b80      	cmp	r3, #128	@ 0x80
 800305a:	d123      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003068:	2301      	movs	r3, #1
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
 800306c:	e014      	b.n	8003098 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	b2db      	uxtb	r3, r3
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 faf0 	bl	8003672 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	3301      	adds	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	461a      	mov	r2, r3
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d3e4      	bcc.n	800306e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fb4f 	bl	800574c <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030b8:	d13c      	bne.n	8003134 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ba:	2301      	movs	r3, #1
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030be:	e02b      	b.n	8003118 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3318      	adds	r3, #24
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d115      	bne.n	8003112 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da12      	bge.n	8003112 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3317      	adds	r3, #23
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fab0 	bl	8003672 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	3301      	adds	r3, #1
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	791b      	ldrb	r3, [r3, #4]
 800311c:	461a      	mov	r2, r3
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	4293      	cmp	r3, r2
 8003122:	d3cd      	bcc.n	80030c0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fb07 	bl	800574c <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003144:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003148:	d156      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
 800314e:	e045      	b.n	80031dc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d12e      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003178:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	da2b      	bge.n	80031d6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800318a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800318e:	429a      	cmp	r2, r3
 8003190:	d121      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031d2:	6053      	str	r3, [r2, #4]
            break;
 80031d4:	e008      	b.n	80031e8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	3301      	adds	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	791b      	ldrb	r3, [r3, #4]
 80031e0:	461a      	mov	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d3b3      	bcc.n	8003150 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 faa5 	bl	800574c <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320c:	d10a      	bne.n	8003224 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f004 fd68 	bl	8007ce4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fa8f 	bl	800574c <USB_ReadInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b04      	cmp	r3, #4
 8003236:	d115      	bne.n	8003264 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f004 fd58 	bl	8007d00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	e000      	b.n	8003264 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003262:	bf00      	nop
    }
  }
}
 8003264:	3734      	adds	r7, #52	@ 0x34
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}

0800326a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_PCD_SetAddress+0x1a>
 8003280:	2302      	movs	r3, #2
 8003282:	e012      	b.n	80032aa <HAL_PCD_SetAddress+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f002 f9ee 	bl	800567c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	4608      	mov	r0, r1
 80032bc:	4611      	mov	r1, r2
 80032be:	461a      	mov	r2, r3
 80032c0:	4603      	mov	r3, r0
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	460b      	mov	r3, r1
 80032c6:	803b      	strh	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da0f      	bge.n	80032f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 020f 	and.w	r2, r3, #15
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3310      	adds	r3, #16
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	705a      	strb	r2, [r3, #1]
 80032f6:	e00f      	b.n	8003318 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003324:	883a      	ldrh	r2, [r7, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	78ba      	ldrb	r2, [r7, #2]
 800332e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003342:	78bb      	ldrb	r3, [r7, #2]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d102      	bne.n	800334e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_PCD_EP_Open+0xaa>
 8003358:	2302      	movs	r3, #2
 800335a:	e00e      	b.n	800337a <HAL_PCD_EP_Open+0xc8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f001 fb76 	bl	8004a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003378:	7afb      	ldrb	r3, [r7, #11]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800338e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	da0f      	bge.n	80033b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3310      	adds	r3, #16
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	3304      	adds	r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	705a      	strb	r2, [r3, #1]
 80033b4:	e00f      	b.n	80033d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_PCD_EP_Close+0x6e>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e00e      	b.n	800340e <HAL_PCD_EP_Close+0x8c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68f9      	ldr	r1, [r7, #12]
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fbb4 	bl	8004b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	460b      	mov	r3, r1
 8003424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2200      	movs	r2, #0
 8003456:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003458:	7afb      	ldrb	r3, [r7, #11]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	b2da      	uxtb	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	799b      	ldrb	r3, [r3, #6]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	799b      	ldrb	r3, [r3, #6]
 800347a:	461a      	mov	r2, r3
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	f001 fc51 	bl	8004d24 <USB_EPStartXfer>

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	460b      	mov	r3, r1
 800349a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3310      	adds	r3, #16
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2200      	movs	r2, #0
 80034c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	799b      	ldrb	r3, [r3, #6]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	799b      	ldrb	r3, [r3, #6]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6979      	ldr	r1, [r7, #20]
 80034f2:	f001 fc17 	bl	8004d24 <USB_EPStartXfer>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	7912      	ldrb	r2, [r2, #4]
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e04f      	b.n	80035be <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800351e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0f      	bge.n	8003546 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3310      	adds	r3, #16
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	705a      	strb	r2, [r3, #1]
 8003544:	e00d      	b.n	8003562 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_PCD_EP_SetStall+0x82>
 800357e:	2302      	movs	r3, #2
 8003580:	e01d      	b.n	80035be <HAL_PCD_EP_SetStall+0xbe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	4618      	mov	r0, r3
 8003592:	f001 ff9f 	bl	80054d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7999      	ldrb	r1, [r3, #6]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ae:	461a      	mov	r2, r3
 80035b0:	f002 f990 	bl	80058d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	7912      	ldrb	r2, [r2, #4]
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e042      	b.n	800366a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da0f      	bge.n	800360c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3310      	adds	r3, #16
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	3304      	adds	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	705a      	strb	r2, [r3, #1]
 800360a:	e00f      	b.n	800362c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_PCD_EP_ClrStall+0x86>
 8003648:	2302      	movs	r3, #2
 800364a:	e00e      	b.n	800366a <HAL_PCD_EP_ClrStall+0xa4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f001 ffa8 	bl	80055b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800367e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003682:	2b00      	cmp	r3, #0
 8003684:	da0c      	bge.n	80036a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3310      	adds	r3, #16
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e00c      	b.n	80036ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	3304      	adds	r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fdc7 	bl	8005254 <USB_EPStopXfer>
 80036c6:	4603      	mov	r3, r0
 80036c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3310      	adds	r3, #16
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d901      	bls.n	800370c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e06b      	b.n	80037e4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	429a      	cmp	r2, r3
 8003720:	d902      	bls.n	8003728 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	3303      	adds	r3, #3
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003730:	e02a      	b.n	8003788 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	429a      	cmp	r2, r3
 8003746:	d902      	bls.n	800374e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3303      	adds	r3, #3
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4603      	mov	r3, r0
 800376a:	6978      	ldr	r0, [r7, #20]
 800376c:	f001 fe1c 	bl	80053a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	441a      	add	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	429a      	cmp	r2, r3
 800379c:	d809      	bhi.n	80037b2 <PCD_WriteEmptyTxFifo+0xde>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d203      	bcs.n	80037b2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1bf      	bne.n	8003732 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d811      	bhi.n	80037e2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	2201      	movs	r2, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037de:	4013      	ands	r3, r2
 80037e0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	333c      	adds	r3, #60	@ 0x3c
 8003804:	3304      	adds	r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	799b      	ldrb	r3, [r3, #6]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d17b      	bne.n	800391a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4a61      	ldr	r2, [pc, #388]	@ (80039b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f240 80b9 	bls.w	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80b3 	beq.w	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003854:	6093      	str	r3, [r2, #8]
 8003856:	e0a7      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	2320      	movs	r3, #32
 8003872:	6093      	str	r3, [r2, #8]
 8003874:	e098      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8093 	bne.w	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4a4b      	ldr	r2, [pc, #300]	@ (80039b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d90f      	bls.n	80038aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	e07e      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d114      	bne.n	800390c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038f4:	461a      	mov	r2, r3
 80038f6:	2101      	movs	r1, #1
 80038f8:	f001 ffec 	bl	80058d4 <USB_EP0_OutStart>
 80038fc:	e006      	b.n	800390c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f004 f92c 	bl	8007b70 <HAL_PCD_DataOutStageCallback>
 8003918:	e046      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d124      	bne.n	800396c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e032      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	2320      	movs	r3, #32
 800395c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f004 f903 	bl	8007b70 <HAL_PCD_DataOutStageCallback>
 800396a:	e01d      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d114      	bne.n	800399c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003994:	461a      	mov	r2, r3
 8003996:	2100      	movs	r1, #0
 8003998:	f001 ff9c 	bl	80058d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f004 f8e4 	bl	8007b70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	4f54300a 	.word	0x4f54300a
 80039b8:	4f54310a 	.word	0x4f54310a

080039bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	333c      	adds	r3, #60	@ 0x3c
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <PCD_EP_OutSetupPacket_int+0x88>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d90e      	bls.n	8003a10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f004 f89b 	bl	8007b4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d90c      	bls.n	8003a38 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	799b      	ldrb	r3, [r3, #6]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a30:	461a      	mov	r2, r3
 8003a32:	2101      	movs	r1, #1
 8003a34:	f001 ff4e 	bl	80058d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	4f54300a 	.word	0x4f54300a

08003a48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
 8003a54:	4613      	mov	r3, r2
 8003a56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a66:	883b      	ldrh	r3, [r7, #0]
 8003a68:	0419      	lsls	r1, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a74:	e028      	b.n	8003ac8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4413      	add	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e00d      	b.n	8003aa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	3340      	adds	r3, #64	@ 0x40
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3ec      	bcc.n	8003a8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ab0:	883b      	ldrh	r3, [r7, #0]
 8003ab2:	0418      	lsls	r0, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4302      	orrs	r2, r0
 8003ac0:	3340      	adds	r3, #64	@ 0x40
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e267      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2e:	4b88      	ldr	r3, [pc, #544]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3a:	4b85      	ldr	r3, [pc, #532]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d112      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4b82      	ldr	r3, [pc, #520]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	4b7e      	ldr	r3, [pc, #504]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05b      	beq.n	8003c18 <HAL_RCC_OscConfig+0x108>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d157      	bne.n	8003c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e242      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b74:	d106      	bne.n	8003b84 <HAL_RCC_OscConfig+0x74>
 8003b76:	4b76      	ldr	r3, [pc, #472]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a75      	ldr	r2, [pc, #468]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01d      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x98>
 8003b8e:	4b70      	ldr	r3, [pc, #448]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6f      	ldr	r2, [pc, #444]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	4b69      	ldr	r3, [pc, #420]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a68      	ldr	r2, [pc, #416]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a65      	ldr	r2, [pc, #404]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fede 	bl	8001988 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fd feda 	bl	8001988 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	@ 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e207      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xc0>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd feca 	bl	8001988 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fec6 	bl	8001988 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	@ 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1f3      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	4b51      	ldr	r3, [pc, #324]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xe8>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c26:	4b4a      	ldr	r3, [pc, #296]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c32:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b44      	ldr	r3, [pc, #272]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b41      	ldr	r3, [pc, #260]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1c7      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4937      	ldr	r1, [pc, #220]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <HAL_RCC_OscConfig+0x244>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd fe7f 	bl	8001988 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fe7b 	bl	8001988 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1a8      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b28      	ldr	r3, [pc, #160]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4925      	ldr	r1, [pc, #148]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCC_OscConfig+0x244>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fe5e 	bl	8001988 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fd fe5a 	bl	8001988 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e187      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d036      	beq.n	8003d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <HAL_RCC_OscConfig+0x248>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd fe3e 	bl	8001988 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fd fe3a 	bl	8001988 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e167      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x200>
 8003d2e:	e01b      	b.n	8003d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_RCC_OscConfig+0x248>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fe27 	bl	8001988 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e00e      	b.n	8003d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fd fe23 	bl	8001988 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d907      	bls.n	8003d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e150      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	42470000 	.word	0x42470000
 8003d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b88      	ldr	r3, [pc, #544]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ea      	bne.n	8003d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8097 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b81      	ldr	r3, [pc, #516]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d96:	4b7a      	ldr	r3, [pc, #488]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b77      	ldr	r3, [pc, #476]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b74      	ldr	r3, [pc, #464]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a73      	ldr	r2, [pc, #460]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fd fde3 	bl	8001988 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fd fddf 	bl	8001988 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e10c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x2ea>
 8003dec:	4b64      	ldr	r3, [pc, #400]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df0:	4a63      	ldr	r2, [pc, #396]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df8:	e01c      	b.n	8003e34 <HAL_RCC_OscConfig+0x324>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x30c>
 8003e02:	4b5f      	ldr	r3, [pc, #380]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a5e      	ldr	r2, [pc, #376]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a5b      	ldr	r2, [pc, #364]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0x324>
 8003e1c:	4b58      	ldr	r3, [pc, #352]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e20:	4a57      	ldr	r2, [pc, #348]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e28:	4b55      	ldr	r3, [pc, #340]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a54      	ldr	r2, [pc, #336]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd fda4 	bl	8001988 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd fda0 	bl	8001988 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0cb      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	4b49      	ldr	r3, [pc, #292]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ee      	beq.n	8003e44 <HAL_RCC_OscConfig+0x334>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7fd fd8e 	bl	8001988 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd fd8a 	bl	8001988 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0b5      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e86:	4b3e      	ldr	r3, [pc, #248]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ee      	bne.n	8003e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e98:	4b39      	ldr	r3, [pc, #228]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	4a38      	ldr	r2, [pc, #224]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a1 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eae:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d05c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d141      	bne.n	8003f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <HAL_RCC_OscConfig+0x478>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fd5e 	bl	8001988 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fd5a 	bl	8001988 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e087      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	491b      	ldr	r1, [pc, #108]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f18:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <HAL_RCC_OscConfig+0x478>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fd fd33 	bl	8001988 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fd fd2f 	bl	8001988 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e05c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f38:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x416>
 8003f44:	e054      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <HAL_RCC_OscConfig+0x478>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fd1c 	bl	8001988 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fd18 	bl	8001988 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e045      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x444>
 8003f72:	e03d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e038      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x4ec>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d028      	beq.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d121      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d11a      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d111      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0cc      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b68      	ldr	r3, [pc, #416]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90c      	bls.n	800403c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b65      	ldr	r3, [pc, #404]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d044      	beq.n	8004120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d119      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d003      	beq.n	80040be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	4b3f      	ldr	r3, [pc, #252]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e067      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b37      	ldr	r3, [pc, #220]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4934      	ldr	r1, [pc, #208]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f0:	f7fd fc4a 	bl	8001988 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fd fc46 	bl	8001988 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e04f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d20c      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b22      	ldr	r3, [pc, #136]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd fbaa 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08008154 	.word	0x08008154
 80041c4:	20000004 	.word	0x20000004
 80041c8:	20000008 	.word	0x20000008

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b090      	sub	sp, #64	@ 0x40
 80041d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d8:	2300      	movs	r3, #0
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041dc:	2300      	movs	r3, #0
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e4:	4b59      	ldr	r3, [pc, #356]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d00d      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x40>
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	f200 80a1 	bhi.w	8004338 <HAL_RCC_GetSysClockFreq+0x16c>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x34>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x3a>
 80041fe:	e09b      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x184>)
 8004202:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004204:	e09b      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004206:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800420a:	e098      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420c:	4b4f      	ldr	r3, [pc, #316]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004216:	4b4d      	ldr	r3, [pc, #308]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b4a      	ldr	r3, [pc, #296]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	2200      	movs	r2, #0
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	627a      	str	r2, [r7, #36]	@ 0x24
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004234:	2100      	movs	r1, #0
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004238:	fb03 f201 	mul.w	r2, r3, r1
 800423c:	2300      	movs	r3, #0
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	4413      	add	r3, r2
 8004244:	4a43      	ldr	r2, [pc, #268]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004246:	fba0 1202 	umull	r1, r2, r0, r2
 800424a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424c:	460a      	mov	r2, r1
 800424e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004252:	4413      	add	r3, r2
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	2200      	movs	r2, #0
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	61fa      	str	r2, [r7, #28]
 800425e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004266:	f7fc fc0d 	bl	8000a84 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4613      	mov	r3, r2
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004272:	e053      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004274:	4b35      	ldr	r3, [pc, #212]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	2200      	movs	r2, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	617a      	str	r2, [r7, #20]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004286:	f04f 0b00 	mov.w	fp, #0
 800428a:	4652      	mov	r2, sl
 800428c:	465b      	mov	r3, fp
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	0159      	lsls	r1, r3, #5
 8004298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429c:	0150      	lsls	r0, r2, #5
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	ebb2 080a 	subs.w	r8, r2, sl
 80042a6:	eb63 090b 	sbc.w	r9, r3, fp
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042be:	ebb2 0408 	subs.w	r4, r2, r8
 80042c2:	eb63 0509 	sbc.w	r5, r3, r9
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	00eb      	lsls	r3, r5, #3
 80042d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d4:	00e2      	lsls	r2, r4, #3
 80042d6:	4614      	mov	r4, r2
 80042d8:	461d      	mov	r5, r3
 80042da:	eb14 030a 	adds.w	r3, r4, sl
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	eb45 030b 	adc.w	r3, r5, fp
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f2:	4629      	mov	r1, r5
 80042f4:	028b      	lsls	r3, r1, #10
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042fc:	4621      	mov	r1, r4
 80042fe:	028a      	lsls	r2, r1, #10
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	2200      	movs	r2, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	60fa      	str	r2, [r7, #12]
 800430c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004310:	f7fc fbb8 	bl	8000a84 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800432c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004336:	e002      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x184>)
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800433c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004340:	4618      	mov	r0, r3
 8004342:	3740      	adds	r7, #64	@ 0x40
 8004344:	46bd      	mov	sp, r7
 8004346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	00f42400 	.word	0x00f42400
 8004354:	017d7840 	.word	0x017d7840

08004358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	@ (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000004 	.word	0x20000004

08004370 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004370:	b084      	sub	sp, #16
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	f107 001c 	add.w	r0, r7, #28
 800437e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004382:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004386:	2b01      	cmp	r3, #1
 8004388:	d123      	bne.n	80043d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800439e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 fae2 	bl	8005990 <USB_CoreReset>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]
 80043d0:	e01b      	b.n	800440a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 fad6 	bl	8005990 <USB_CoreReset>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d106      	bne.n	80043fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80043fc:	e005      	b.n	800440a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800440a:	7fbb      	ldrb	r3, [r7, #30]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10b      	bne.n	8004428 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f043 0206 	orr.w	r2, r3, #6
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004434:	b004      	add	sp, #16
 8004436:	4770      	bx	lr

08004438 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d165      	bne.n	8004518 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4a41      	ldr	r2, [pc, #260]	@ (8004554 <USB_SetTurnaroundTime+0x11c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d906      	bls.n	8004462 <USB_SetTurnaroundTime+0x2a>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a40      	ldr	r2, [pc, #256]	@ (8004558 <USB_SetTurnaroundTime+0x120>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d202      	bcs.n	8004462 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800445c:	230f      	movs	r3, #15
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e062      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a3c      	ldr	r2, [pc, #240]	@ (8004558 <USB_SetTurnaroundTime+0x120>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d306      	bcc.n	8004478 <USB_SetTurnaroundTime+0x40>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a3b      	ldr	r2, [pc, #236]	@ (800455c <USB_SetTurnaroundTime+0x124>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d202      	bcs.n	8004478 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004472:	230e      	movs	r3, #14
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e057      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a38      	ldr	r2, [pc, #224]	@ (800455c <USB_SetTurnaroundTime+0x124>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d306      	bcc.n	800448e <USB_SetTurnaroundTime+0x56>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <USB_SetTurnaroundTime+0x128>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d202      	bcs.n	800448e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004488:	230d      	movs	r3, #13
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e04c      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4a33      	ldr	r2, [pc, #204]	@ (8004560 <USB_SetTurnaroundTime+0x128>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d306      	bcc.n	80044a4 <USB_SetTurnaroundTime+0x6c>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a32      	ldr	r2, [pc, #200]	@ (8004564 <USB_SetTurnaroundTime+0x12c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d802      	bhi.n	80044a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800449e:	230c      	movs	r3, #12
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e041      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004564 <USB_SetTurnaroundTime+0x12c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d906      	bls.n	80044ba <USB_SetTurnaroundTime+0x82>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <USB_SetTurnaroundTime+0x130>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d802      	bhi.n	80044ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044b4:	230b      	movs	r3, #11
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e036      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004568 <USB_SetTurnaroundTime+0x130>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d906      	bls.n	80044d0 <USB_SetTurnaroundTime+0x98>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a29      	ldr	r2, [pc, #164]	@ (800456c <USB_SetTurnaroundTime+0x134>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d802      	bhi.n	80044d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044ca:	230a      	movs	r3, #10
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e02b      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a26      	ldr	r2, [pc, #152]	@ (800456c <USB_SetTurnaroundTime+0x134>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d906      	bls.n	80044e6 <USB_SetTurnaroundTime+0xae>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a25      	ldr	r2, [pc, #148]	@ (8004570 <USB_SetTurnaroundTime+0x138>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d202      	bcs.n	80044e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044e0:	2309      	movs	r3, #9
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e020      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a21      	ldr	r2, [pc, #132]	@ (8004570 <USB_SetTurnaroundTime+0x138>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d306      	bcc.n	80044fc <USB_SetTurnaroundTime+0xc4>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <USB_SetTurnaroundTime+0x13c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d802      	bhi.n	80044fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044f6:	2308      	movs	r3, #8
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e015      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <USB_SetTurnaroundTime+0x13c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d906      	bls.n	8004512 <USB_SetTurnaroundTime+0xda>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <USB_SetTurnaroundTime+0x140>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d202      	bcs.n	8004512 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800450c:	2307      	movs	r3, #7
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e00a      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004512:	2306      	movs	r3, #6
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e007      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800451e:	2309      	movs	r3, #9
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e001      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004524:	2309      	movs	r3, #9
 8004526:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	00d8acbf 	.word	0x00d8acbf
 8004558:	00e4e1c0 	.word	0x00e4e1c0
 800455c:	00f42400 	.word	0x00f42400
 8004560:	01067380 	.word	0x01067380
 8004564:	011a499f 	.word	0x011a499f
 8004568:	01312cff 	.word	0x01312cff
 800456c:	014ca43f 	.word	0x014ca43f
 8004570:	016e3600 	.word	0x016e3600
 8004574:	01a6ab1f 	.word	0x01a6ab1f
 8004578:	01e84800 	.word	0x01e84800

0800457c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d115      	bne.n	800460e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045ee:	200a      	movs	r0, #10
 80045f0:	f7fd f9d6 	bl	80019a0 <HAL_Delay>
      ms += 10U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	330a      	adds	r3, #10
 80045f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 f939 	bl	8005872 <USB_GetMode>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d01e      	beq.n	8004644 <USB_SetCurrentMode+0x84>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2bc7      	cmp	r3, #199	@ 0xc7
 800460a:	d9f0      	bls.n	80045ee <USB_SetCurrentMode+0x2e>
 800460c:	e01a      	b.n	8004644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004620:	200a      	movs	r0, #10
 8004622:	f7fd f9bd 	bl	80019a0 <HAL_Delay>
      ms += 10U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	330a      	adds	r3, #10
 800462a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 f920 	bl	8005872 <USB_GetMode>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <USB_SetCurrentMode+0x84>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2bc7      	cmp	r3, #199	@ 0xc7
 800463c:	d9f0      	bls.n	8004620 <USB_SetCurrentMode+0x60>
 800463e:	e001      	b.n	8004644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e005      	b.n	8004650 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2bc8      	cmp	r3, #200	@ 0xc8
 8004648:	d101      	bne.n	800464e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004658:	b084      	sub	sp, #16
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e009      	b.n	800468c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3340      	adds	r3, #64	@ 0x40
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	2200      	movs	r2, #0
 8004684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b0e      	cmp	r3, #14
 8004690:	d9f2      	bls.n	8004678 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004692:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11c      	bne.n	80046d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80046d2:	e00b      	b.n	80046ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10d      	bne.n	800471c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004708:	2100      	movs	r1, #0
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f968 	bl	80049e0 <USB_SetDevSpeed>
 8004710:	e008      	b.n	8004724 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004712:	2101      	movs	r1, #1
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f963 	bl	80049e0 <USB_SetDevSpeed>
 800471a:	e003      	b.n	8004724 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800471c:	2103      	movs	r1, #3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f95e 	bl	80049e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004724:	2110      	movs	r1, #16
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8fa 	bl	8004920 <USB_FlushTxFifo>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f924 	bl	8004984 <USB_FlushRxFifo>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e043      	b.n	80047f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004786:	d118      	bne.n	80047ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e013      	b.n	80047cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e008      	b.n	80047cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c6:	461a      	mov	r2, r3
 80047c8:	2300      	movs	r3, #0
 80047ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047fc:	461a      	mov	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4293      	cmp	r3, r2
 8004802:	d3b5      	bcc.n	8004770 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	e043      	b.n	8004892 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004820:	d118      	bne.n	8004854 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e013      	b.n	8004866 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e008      	b.n	8004866 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004860:	461a      	mov	r2, r3
 8004862:	2300      	movs	r3, #0
 8004864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800488a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3301      	adds	r3, #1
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004896:	461a      	mov	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4293      	cmp	r3, r2
 800489c:	d3b5      	bcc.n	800480a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f043 0210 	orr.w	r2, r3, #16
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	4b10      	ldr	r3, [pc, #64]	@ (800491c <USB_DevInit+0x2c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f043 0208 	orr.w	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004918:	b004      	add	sp, #16
 800491a:	4770      	bx	lr
 800491c:	803c3800 	.word	0x803c3800

08004920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800493a:	d901      	bls.n	8004940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e01b      	b.n	8004978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	daf2      	bge.n	800492e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	019b      	lsls	r3, r3, #6
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3301      	adds	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004964:	d901      	bls.n	800496a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e006      	b.n	8004978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d0f0      	beq.n	8004958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800499c:	d901      	bls.n	80049a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e018      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2210      	movs	r2, #16
 80049b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c0:	d901      	bls.n	80049c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e006      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d0f0      	beq.n	80049b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0306 	and.w	r3, r3, #6
 8004a2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]
 8004a36:	e00a      	b.n	8004a4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d002      	beq.n	8004a44 <USB_GetDevSpeed+0x32>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b06      	cmp	r3, #6
 8004a42:	d102      	bne.n	8004a4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a44:	2302      	movs	r3, #2
 8004a46:	75fb      	strb	r3, [r7, #23]
 8004a48:	e001      	b.n	8004a4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a4a:	230f      	movs	r3, #15
 8004a4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d13a      	bne.n	8004aee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	2101      	movs	r1, #1
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d155      	bne.n	8004b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	791b      	ldrb	r3, [r3, #4]
 8004aca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004acc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	059b      	lsls	r3, r3, #22
 8004ad2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	e036      	b.n	8004b5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	2101      	movs	r1, #1
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11a      	bne.n	8004b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	791b      	ldrb	r3, [r3, #4]
 8004b40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b42:	430b      	orrs	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d161      	bne.n	8004c4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b9e:	d11f      	bne.n	8004be0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c00:	4013      	ands	r3, r2
 8004c02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c24:	4013      	ands	r3, r2
 8004c26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0159      	lsls	r1, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c42:	4619      	mov	r1, r3
 8004c44:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <USB_DeactivateEndpoint+0x1b0>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
 8004c4a:	e060      	b.n	8004d0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c62:	d11f      	bne.n	8004ca4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004caa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d06:	4619      	mov	r1, r3
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <USB_DeactivateEndpoint+0x1b4>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	ec337800 	.word	0xec337800
 8004d20:	eff37800 	.word	0xeff37800

08004d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	@ 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 817a 	bne.w	800503a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d132      	bne.n	8004db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dac:	0cdb      	lsrs	r3, r3, #19
 8004dae:	04db      	lsls	r3, r3, #19
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	e092      	b.n	8004eda <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dce:	0cdb      	lsrs	r3, r3, #19
 8004dd0:	04db      	lsls	r3, r3, #19
 8004dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004df2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004df6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11a      	bne.n	8004e34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d903      	bls.n	8004e12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e30:	6113      	str	r3, [r2, #16]
 8004e32:	e01b      	b.n	8004e6c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e40:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6919      	ldr	r1, [r3, #16]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	440b      	add	r3, r1
 8004e4c:	1e59      	subs	r1, r3, #1
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e56:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e58:	4ba2      	ldr	r3, [pc, #648]	@ (80050e4 <USB_EPStartXfer+0x3c0>)
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	0148      	lsls	r0, r1, #5
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	4401      	add	r1, r0
 8004e64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e82:	69b9      	ldr	r1, [r7, #24]
 8004e84:	0148      	lsls	r0, r1, #5
 8004e86:	69f9      	ldr	r1, [r7, #28]
 8004e88:	4401      	add	r1, r0
 8004e8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	791b      	ldrb	r3, [r3, #4]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d11f      	bne.n	8004eda <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004eb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ed8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d14b      	bne.n	8004f78 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	791b      	ldrb	r3, [r3, #4]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d128      	bne.n	8004f56 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d110      	bne.n	8004f36 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e00f      	b.n	8004f56 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e165      	b.n	8005244 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	791b      	ldrb	r3, [r3, #4]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d015      	beq.n	8004fcc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 814d 	beq.w	8005244 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	2101      	movs	r1, #1
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	69f9      	ldr	r1, [r7, #28]
 8004fc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	634b      	str	r3, [r1, #52]	@ 0x34
 8004fca:	e13b      	b.n	8005244 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d110      	bne.n	8004ffe <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e00f      	b.n	800501e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800501c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68d9      	ldr	r1, [r3, #12]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	b298      	uxth	r0, r3
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4603      	mov	r3, r0
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f9b8 	bl	80053a8 <USB_WritePacket>
 8005038:	e104      	b.n	8005244 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005054:	0cdb      	lsrs	r3, r3, #19
 8005056:	04db      	lsls	r3, r3, #19
 8005058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005074:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005078:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800507c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d131      	bne.n	80050e8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b2:	69b9      	ldr	r1, [r7, #24]
 80050b4:	0148      	lsls	r0, r1, #5
 80050b6:	69f9      	ldr	r1, [r7, #28]
 80050b8:	4401      	add	r1, r0
 80050ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050be:	4313      	orrs	r3, r2
 80050c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050e0:	6113      	str	r3, [r2, #16]
 80050e2:	e061      	b.n	80051a8 <USB_EPStartXfer+0x484>
 80050e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d123      	bne.n	8005138 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	0148      	lsls	r0, r1, #5
 800510a:	69f9      	ldr	r1, [r7, #28]
 800510c:	4401      	add	r1, r0
 800510e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005112:	4313      	orrs	r3, r2
 8005114:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005130:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005134:	6113      	str	r3, [r2, #16]
 8005136:	e037      	b.n	80051a8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4413      	add	r3, r2
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	8afa      	ldrh	r2, [r7, #22]
 8005154:	fb03 f202 	mul.w	r2, r3, r2
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	8afb      	ldrh	r3, [r7, #22]
 800516c:	04d9      	lsls	r1, r3, #19
 800516e:	4b38      	ldr	r3, [pc, #224]	@ (8005250 <USB_EPStartXfer+0x52c>)
 8005170:	400b      	ands	r3, r1
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	0148      	lsls	r0, r1, #5
 8005176:	69f9      	ldr	r1, [r7, #28]
 8005178:	4401      	add	r1, r0
 800517a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800517e:	4313      	orrs	r3, r2
 8005180:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	0148      	lsls	r0, r1, #5
 800519c:	69f9      	ldr	r1, [r7, #28]
 800519e:	4401      	add	r1, r0
 80051a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80051a4:	4313      	orrs	r3, r2
 80051a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d10d      	bne.n	80051ca <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	68d9      	ldr	r1, [r3, #12]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c6:	460a      	mov	r2, r1
 80051c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d128      	bne.n	8005224 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d110      	bne.n	8005204 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e00f      	b.n	8005224 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800521e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005222:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800523e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	1ff80000 	.word	0x1ff80000

08005254 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d14a      	bne.n	8005308 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005286:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800528a:	f040 8086 	bne.w	800539a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d902      	bls.n	80052ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
          break;
 80052ea:	e056      	b.n	800539a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005304:	d0e7      	beq.n	80052d6 <USB_EPStopXfer+0x82>
 8005306:	e048      	b.n	800539a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800531c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005320:	d13b      	bne.n	800539a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	7812      	ldrb	r2, [r2, #0]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005340:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005344:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005364:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005368:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005376:	4293      	cmp	r3, r2
 8005378:	d902      	bls.n	8005380 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
          break;
 800537e:	e00c      	b.n	800539a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005398:	d0e7      	beq.n	800536a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	@ 0x24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4611      	mov	r1, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	460b      	mov	r3, r1
 80053b8:	71fb      	strb	r3, [r7, #7]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d123      	bne.n	8005416 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	3303      	adds	r3, #3
 80053d2:	089b      	lsrs	r3, r3, #2
 80053d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	e018      	b.n	800540e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	031a      	lsls	r2, r3, #12
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e8:	461a      	mov	r2, r3
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	3301      	adds	r3, #1
 80053fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	3301      	adds	r3, #1
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d3e2      	bcc.n	80053dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3724      	adds	r7, #36	@ 0x24
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005424:	b480      	push	{r7}
 8005426:	b08b      	sub	sp, #44	@ 0x2c
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	089b      	lsrs	r3, r3, #2
 800543e:	b29b      	uxth	r3, r3
 8005440:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	623b      	str	r3, [r7, #32]
 800544e:	e014      	b.n	800547a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	601a      	str	r2, [r3, #0]
    pDest++;
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	3301      	adds	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	3301      	adds	r3, #1
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	3301      	adds	r3, #1
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	3301      	adds	r3, #1
 8005478:	623b      	str	r3, [r7, #32]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	429a      	cmp	r2, r3
 8005480:	d3e6      	bcc.n	8005450 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005482:	8bfb      	ldrh	r3, [r7, #30]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01e      	beq.n	80054c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005492:	461a      	mov	r2, r3
 8005494:	f107 0310 	add.w	r3, r7, #16
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	701a      	strb	r2, [r3, #0]
      i++;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	3301      	adds	r3, #1
 80054b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	3301      	adds	r3, #1
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80054ba:	8bfb      	ldrh	r3, [r7, #30]
 80054bc:	3b01      	subs	r3, #1
 80054be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054c0:	8bfb      	ldrh	r3, [r7, #30]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1ea      	bne.n	800549c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	372c      	adds	r7, #44	@ 0x2c
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d12c      	bne.n	800554a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	db12      	blt.n	8005528 <USB_EPSetStall+0x54>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00f      	beq.n	8005528 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005526:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e02b      	b.n	80055a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	db12      	blt.n	8005582 <USB_EPSetStall+0xae>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00f      	beq.n	8005582 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800557c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005580:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800559c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d128      	bne.n	800561e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	791b      	ldrb	r3, [r3, #4]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d003      	beq.n	80055fc <USB_EPClearStall+0x4c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	791b      	ldrb	r3, [r3, #4]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d138      	bne.n	800566e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	e027      	b.n	800566e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005638:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800563c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d003      	beq.n	800564e <USB_EPClearStall+0x9e>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	791b      	ldrb	r3, [r3, #4]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d10f      	bne.n	800566e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800569a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800569e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80056b0:	68f9      	ldr	r1, [r7, #12]
 80056b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056f6:	f023 0302 	bic.w	r3, r3, #2
 80056fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005724:	f023 0303 	bic.w	r3, r3, #3
 8005728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005764:	68fb      	ldr	r3, [r7, #12]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	0c1b      	lsrs	r3, r3, #16
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	b29b      	uxth	r3, r3
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	4013      	ands	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005808:	68bb      	ldr	r3, [r7, #8]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005816:	b480      	push	{r7}
 8005818:	b087      	sub	sp, #28
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005838:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	fa22 f303 	lsr.w	r3, r2, r3
 8005846:	01db      	lsls	r3, r3, #7
 8005848:	b2db      	uxtb	r3, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005864:	68bb      	ldr	r3, [r7, #8]
}
 8005866:	4618      	mov	r0, r3
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0301 	and.w	r3, r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80058ac:	f023 0307 	bic.w	r3, r3, #7
 80058b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	460b      	mov	r3, r1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	333c      	adds	r3, #60	@ 0x3c
 80058ea:	3304      	adds	r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4a26      	ldr	r2, [pc, #152]	@ (800598c <USB_EP0_OutStart+0xb8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d90a      	bls.n	800590e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005908:	d101      	bne.n	800590e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e037      	b.n	800597e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005914:	461a      	mov	r2, r3
 8005916:	2300      	movs	r3, #0
 8005918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005928:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800592c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800593c:	f043 0318 	orr.w	r3, r3, #24
 8005940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005950:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005954:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10f      	bne.n	800597c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	461a      	mov	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005976:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800597a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	4f54300a 	.word	0x4f54300a

08005990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a8:	d901      	bls.n	80059ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e01b      	b.n	80059e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	daf2      	bge.n	800599c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059d2:	d901      	bls.n	80059d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e006      	b.n	80059e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d0f0      	beq.n	80059c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005a00:	2018      	movs	r0, #24
 8005a02:	f002 fb03 	bl	800800c <USBD_static_malloc>
 8005a06:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	32b0      	adds	r2, #176	@ 0xb0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e08a      	b.n	8005b38 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	32b0      	adds	r2, #176	@ 0xb0
 8005a2c:	68f9      	ldr	r1, [r7, #12]
 8005a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	32b0      	adds	r2, #176	@ 0xb0
 8005a3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7c1b      	ldrb	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11b      	bne.n	8005a86 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <USBD_CUSTOM_HID_Init+0x14c>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3326      	adds	r3, #38	@ 0x26
 8005a64:	2205      	movs	r2, #5
 8005a66:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005a68:	4b36      	ldr	r3, [pc, #216]	@ (8005b44 <USBD_CUSTOM_HID_Init+0x150>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005a80:	2205      	movs	r2, #5
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e01a      	b.n	8005abc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005a86:	4b2e      	ldr	r3, [pc, #184]	@ (8005b40 <USBD_CUSTOM_HID_Init+0x14c>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 020f 	and.w	r2, r3, #15
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3326      	adds	r3, #38	@ 0x26
 8005a9c:	2205      	movs	r2, #5
 8005a9e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005aa0:	4b28      	ldr	r3, [pc, #160]	@ (8005b44 <USBD_CUSTOM_HID_Init+0x150>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005ab8:	2205      	movs	r2, #5
 8005aba:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005abc:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <USBD_CUSTOM_HID_Init+0x14c>)
 8005abe:	7819      	ldrb	r1, [r3, #0]
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f002 f990 	bl	8007dea <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <USBD_CUSTOM_HID_Init+0x14c>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	3324      	adds	r3, #36	@ 0x24
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005ae4:	4b17      	ldr	r3, [pc, #92]	@ (8005b44 <USBD_CUSTOM_HID_Init+0x150>)
 8005ae6:	7819      	ldrb	r1, [r3, #0]
 8005ae8:	2302      	movs	r3, #2
 8005aea:	2203      	movs	r2, #3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f002 f97c 	bl	8007dea <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005af2:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <USBD_CUSTOM_HID_Init+0x150>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	33b0      	adds	r3, #176	@ 0xb0
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <USBD_CUSTOM_HID_Init+0x150>)
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	2302      	movs	r3, #2
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f002 fa49 	bl	8007fc8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2000008a 	.word	0x2000008a
 8005b44:	2000008b 	.word	0x2000008b

08005b48 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005b54:	4b37      	ldr	r3, [pc, #220]	@ (8005c34 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f002 f96b 	bl	8007e36 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005b60:	4b34      	ldr	r3, [pc, #208]	@ (8005c34 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	3324      	adds	r3, #36	@ 0x24
 8005b76:	2200      	movs	r2, #0
 8005b78:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c34 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f003 020f 	and.w	r2, r3, #15
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3326      	adds	r3, #38	@ 0x26
 8005b90:	2200      	movs	r2, #0
 8005b92:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005b94:	4b28      	ldr	r3, [pc, #160]	@ (8005c38 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f002 f94b 	bl	8007e36 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005ba0:	4b25      	ldr	r3, [pc, #148]	@ (8005c38 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005bb8:	2200      	movs	r2, #0
 8005bba:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	32b0      	adds	r2, #176	@ 0xb0
 8005be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01f      	beq.n	8005c2a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	33b0      	adds	r3, #176	@ 0xb0
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	32b0      	adds	r2, #176	@ 0xb0
 8005c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f002 fa0b 	bl	8008028 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	32b0      	adds	r2, #176	@ 0xb0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	2000008a 	.word	0x2000008a
 8005c38:	2000008b 	.word	0x2000008b

08005c3c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	32b0      	adds	r2, #176	@ 0xb0
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0f8      	b.n	8005e62 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d056      	beq.n	8005d2a <USBD_CUSTOM_HID_Setup+0xee>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	f040 80e8 	bne.w	8005e52 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	3b02      	subs	r3, #2
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d846      	bhi.n	8005d1a <USBD_CUSTOM_HID_Setup+0xde>
 8005c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <USBD_CUSTOM_HID_Setup+0x58>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ced 	.word	0x08005ced
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005d1b 	.word	0x08005d1b
 8005ca0:	08005d1b 	.word	0x08005d1b
 8005ca4:	08005d1b 	.word	0x08005d1b
 8005ca8:	08005d1b 	.word	0x08005d1b
 8005cac:	08005d1b 	.word	0x08005d1b
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005cdb 	.word	0x08005cdb
 8005cb8:	08005cbd 	.word	0x08005cbd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	605a      	str	r2, [r3, #4]
          break;
 8005cc8:	e02e      	b.n	8005d28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fcca 	bl	800766c <USBD_CtlSendData>
          break;
 8005cd8:	e026      	b.n	8005d28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	885b      	ldrh	r3, [r3, #2]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]
          break;
 8005cea:	e01d      	b.n	8005d28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 fcb9 	bl	800766c <USBD_CtlSendData>
          break;
 8005cfa:	e015      	b.n	8005d28 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005d02:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	88db      	ldrh	r3, [r3, #6]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	bf28      	it	cs
 8005d0c:	2302      	movcs	r3, #2
 8005d0e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005d10:	461a      	mov	r2, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 fcd6 	bl	80076c4 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005d18:	e006      	b.n	8005d28 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 fc34 	bl	800758a <USBD_CtlError>
          ret = USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	75fb      	strb	r3, [r7, #23]
          break;
 8005d26:	bf00      	nop
      }
      break;
 8005d28:	e09a      	b.n	8005e60 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	2b0b      	cmp	r3, #11
 8005d30:	f200 8086 	bhi.w	8005e40 <USBD_CUSTOM_HID_Setup+0x204>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <USBD_CUSTOM_HID_Setup+0x100>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005e4f 	.word	0x08005e4f
 8005d44:	08005e41 	.word	0x08005e41
 8005d48:	08005e41 	.word	0x08005e41
 8005d4c:	08005e41 	.word	0x08005e41
 8005d50:	08005e41 	.word	0x08005e41
 8005d54:	08005d97 	.word	0x08005d97
 8005d58:	08005e41 	.word	0x08005e41
 8005d5c:	08005e41 	.word	0x08005e41
 8005d60:	08005e41 	.word	0x08005e41
 8005d64:	08005def 	.word	0x08005def
 8005d68:	08005e19 	.word	0x08005e19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d107      	bne.n	8005d88 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d78:	f107 030e 	add.w	r3, r7, #14
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fc73 	bl	800766c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d86:	e063      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fbfd 	bl	800758a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	75fb      	strb	r3, [r7, #23]
          break;
 8005d94:	e05c      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	885b      	ldrh	r3, [r3, #2]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b22      	cmp	r3, #34	@ 0x22
 8005da0:	d110      	bne.n	8005dc4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	88db      	ldrh	r3, [r3, #6]
 8005da6:	2b2d      	cmp	r3, #45	@ 0x2d
 8005da8:	bf28      	it	cs
 8005daa:	232d      	movcs	r3, #45	@ 0x2d
 8005dac:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	33b0      	adds	r3, #176	@ 0xb0
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e00d      	b.n	8005de0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	885b      	ldrh	r3, [r3, #2]
 8005dc8:	0a1b      	lsrs	r3, r3, #8
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b21      	cmp	r3, #33	@ 0x21
 8005dce:	d107      	bne.n	8005de0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005dd0:	4b26      	ldr	r3, [pc, #152]	@ (8005e6c <USBD_CUSTOM_HID_Setup+0x230>)
 8005dd2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	88db      	ldrh	r3, [r3, #6]
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	bf28      	it	cs
 8005ddc:	2309      	movcs	r3, #9
 8005dde:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005de0:	8bfb      	ldrh	r3, [r7, #30]
 8005de2:	461a      	mov	r2, r3
 8005de4:	69b9      	ldr	r1, [r7, #24]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fc40 	bl	800766c <USBD_CtlSendData>
          break;
 8005dec:	e030      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d107      	bne.n	8005e0a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fc32 	bl	800766c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e08:	e022      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fbbc 	bl	800758a <USBD_CtlError>
            ret = USBD_FAIL;
 8005e12:	2303      	movs	r3, #3
 8005e14:	75fb      	strb	r3, [r7, #23]
          break;
 8005e16:	e01b      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d106      	bne.n	8005e32 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	885b      	ldrh	r3, [r3, #2]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e30:	e00e      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 fba8 	bl	800758a <USBD_CtlError>
            ret = USBD_FAIL;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e3e:	e007      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fba1 	bl	800758a <USBD_CtlError>
          ret = USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	75fb      	strb	r3, [r7, #23]
          break;
 8005e4c:	e000      	b.n	8005e50 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8005e4e:	bf00      	nop
      }
      break;
 8005e50:	e006      	b.n	8005e60 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 fb98 	bl	800758a <USBD_CtlError>
      ret = USBD_FAIL;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5e:	bf00      	nop
  }
  return (uint8_t)ret;
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000074 	.word	0x20000074

08005e70 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	32b0      	adds	r2, #176	@ 0xb0
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e017      	b.n	8005ec8 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d110      	bne.n	8005ec6 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	7d1b      	ldrb	r3, [r3, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005eb2:	4b07      	ldr	r3, [pc, #28]	@ (8005ed0 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005eb4:	7819      	ldrb	r1, [r3, #0]
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f002 f863 	bl	8007f86 <USBD_LL_Transmit>
 8005ec0:	e001      	b.n	8005ec6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	2000008a 	.word	0x2000008a

08005ed4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005edc:	2181      	movs	r1, #129	@ 0x81
 8005ede:	4815      	ldr	r0, [pc, #84]	@ (8005f34 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005ee0:	f000 fd1d 	bl	800691e <USBD_GetEpDesc>
 8005ee4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	4812      	ldr	r0, [pc, #72]	@ (8005f34 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005eea:	f000 fd18 	bl	800691e <USBD_GetEpDesc>
 8005eee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f042 0202 	orr.w	r2, r2, #2
 8005efe:	711a      	strb	r2, [r3, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2205      	movs	r2, #5
 8005f08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f042 0202 	orr.w	r2, r2, #2
 8005f18:	711a      	strb	r2, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2205      	movs	r2, #5
 8005f22:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2229      	movs	r2, #41	@ 0x29
 8005f28:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005f2a:	4b02      	ldr	r3, [pc, #8]	@ (8005f34 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000048 	.word	0x20000048

08005f38 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005f40:	2181      	movs	r1, #129	@ 0x81
 8005f42:	4815      	ldr	r0, [pc, #84]	@ (8005f98 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005f44:	f000 fceb 	bl	800691e <USBD_GetEpDesc>
 8005f48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4812      	ldr	r0, [pc, #72]	@ (8005f98 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005f4e:	f000 fce6 	bl	800691e <USBD_GetEpDesc>
 8005f52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f042 0202 	orr.w	r2, r2, #2
 8005f62:	711a      	strb	r2, [r3, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f042 0202 	orr.w	r2, r2, #2
 8005f7c:	711a      	strb	r2, [r3, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2205      	movs	r2, #5
 8005f86:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2229      	movs	r2, #41	@ 0x29
 8005f8c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005f8e:	4b02      	ldr	r3, [pc, #8]	@ (8005f98 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000048 	.word	0x20000048

08005f9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005fa4:	2181      	movs	r1, #129	@ 0x81
 8005fa6:	4815      	ldr	r0, [pc, #84]	@ (8005ffc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005fa8:	f000 fcb9 	bl	800691e <USBD_GetEpDesc>
 8005fac:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4812      	ldr	r0, [pc, #72]	@ (8005ffc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005fb2:	f000 fcb4 	bl	800691e <USBD_GetEpDesc>
 8005fb6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f042 0202 	orr.w	r2, r2, #2
 8005fc6:	711a      	strb	r2, [r3, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2205      	movs	r2, #5
 8005fd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f042 0202 	orr.w	r2, r2, #2
 8005fe0:	711a      	strb	r2, [r3, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2205      	movs	r2, #5
 8005fea:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2229      	movs	r2, #41	@ 0x29
 8005ff0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005ff2:	4b02      	ldr	r3, [pc, #8]	@ (8005ffc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000048 	.word	0x20000048

08006000 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32b0      	adds	r2, #176	@ 0xb0
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	2200      	movs	r2, #0
 800601c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32b0      	adds	r2, #176	@ 0xb0
 8006042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800604a:	2303      	movs	r3, #3
 800604c:	e017      	b.n	800607e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	32b0      	adds	r2, #176	@ 0xb0
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	33b0      	adds	r3, #176	@ 0xb0
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	7810      	ldrb	r0, [r2, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	7852      	ldrb	r2, [r2, #1]
 8006078:	4611      	mov	r1, r2
 800607a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	32b0      	adds	r2, #176	@ 0xb0
 800609a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e00f      	b.n	80060c6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	32b0      	adds	r2, #176	@ 0xb0
 80060b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80060b6:	4b06      	ldr	r3, [pc, #24]	@ (80060d0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80060b8:	7819      	ldrb	r1, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	2302      	movs	r3, #2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 ff82 	bl	8007fc8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2000008b 	.word	0x2000008b

080060d4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	32b0      	adds	r2, #176	@ 0xb0
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e016      	b.n	8006124 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d111      	bne.n	8006122 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	33b0      	adds	r3, #176	@ 0xb0
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	7810      	ldrb	r0, [r2, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	7852      	ldrb	r2, [r2, #1]
 8006118:	4611      	mov	r1, r2
 800611a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	220a      	movs	r2, #10
 8006138:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800613a:	4b03      	ldr	r3, [pc, #12]	@ (8006148 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000080 	.word	0x20000080

0800614c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e009      	b.n	8006174 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	33b0      	adds	r3, #176	@ 0xb0
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	e01f      	b.n	80061d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	79fa      	ldrb	r2, [r7, #7]
 80061ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f001 fda5 	bl	8007d1c <USBD_LL_Init>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e025      	b.n	8006244 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32ae      	adds	r2, #174	@ 0xae
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00f      	beq.n	8006234 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	32ae      	adds	r2, #174	@ 0xae
 800621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	f107 020e 	add.w	r2, r7, #14
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fdad 	bl	8007db4 <USBD_LL_Start>
 800625a:	4603      	mov	r3, r0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800626c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d009      	beq.n	80062a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	4611      	mov	r1, r2
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	4611      	mov	r1, r2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 f90c 	bl	8007516 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2b02      	cmp	r3, #2
 8006320:	d01a      	beq.n	8006358 <USBD_LL_SetupStage+0x72>
 8006322:	2b02      	cmp	r3, #2
 8006324:	d822      	bhi.n	800636c <USBD_LL_SetupStage+0x86>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <USBD_LL_SetupStage+0x4a>
 800632a:	2b01      	cmp	r3, #1
 800632c:	d00a      	beq.n	8006344 <USBD_LL_SetupStage+0x5e>
 800632e:	e01d      	b.n	800636c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb63 	bl	8006a04 <USBD_StdDevReq>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
      break;
 8006342:	e020      	b.n	8006386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fbcb 	bl	8006ae8 <USBD_StdItfReq>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
      break;
 8006356:	e016      	b.n	8006386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fc2d 	bl	8006bc0 <USBD_StdEPReq>
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
      break;
 800636a:	e00c      	b.n	8006386 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006372:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006376:	b2db      	uxtb	r3, r3
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fd7a 	bl	8007e74 <USBD_LL_StallEP>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
      break;
 8006384:	bf00      	nop
  }

  return ret;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	460b      	mov	r3, r1
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80063a2:	7afb      	ldrb	r3, [r7, #11]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d16e      	bne.n	8006486 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80063ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	f040 8098 	bne.w	80064ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d913      	bls.n	80063f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	1ad2      	subs	r2, r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	4293      	cmp	r3, r2
 80063e0:	bf28      	it	cs
 80063e2:	4613      	movcs	r3, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f001 f988 	bl	80076fe <USBD_CtlContinueRx>
 80063ee:	e07d      	b.n	80064ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d014      	beq.n	8006428 <USBD_LL_DataOutStage+0x98>
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d81d      	bhi.n	800643e <USBD_LL_DataOutStage+0xae>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <USBD_LL_DataOutStage+0x7c>
 8006406:	2b01      	cmp	r3, #1
 8006408:	d003      	beq.n	8006412 <USBD_LL_DataOutStage+0x82>
 800640a:	e018      	b.n	800643e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	75bb      	strb	r3, [r7, #22]
            break;
 8006410:	e018      	b.n	8006444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006418:	b2db      	uxtb	r3, r3
 800641a:	4619      	mov	r1, r3
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fa64 	bl	80068ea <USBD_CoreFindIF>
 8006422:	4603      	mov	r3, r0
 8006424:	75bb      	strb	r3, [r7, #22]
            break;
 8006426:	e00d      	b.n	8006444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800642e:	b2db      	uxtb	r3, r3
 8006430:	4619      	mov	r1, r3
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fa66 	bl	8006904 <USBD_CoreFindEP>
 8006438:	4603      	mov	r3, r0
 800643a:	75bb      	strb	r3, [r7, #22]
            break;
 800643c:	e002      	b.n	8006444 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	75bb      	strb	r3, [r7, #22]
            break;
 8006442:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006444:	7dbb      	ldrb	r3, [r7, #22]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d119      	bne.n	800647e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d113      	bne.n	800647e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006456:	7dba      	ldrb	r2, [r7, #22]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	32ae      	adds	r2, #174	@ 0xae
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006466:	7dba      	ldrb	r2, [r7, #22]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800646e:	7dba      	ldrb	r2, [r7, #22]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	32ae      	adds	r2, #174	@ 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f001 f94e 	bl	8007720 <USBD_CtlSendStatus>
 8006484:	e032      	b.n	80064ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800648c:	b2db      	uxtb	r3, r3
 800648e:	4619      	mov	r1, r3
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fa37 	bl	8006904 <USBD_CoreFindEP>
 8006496:	4603      	mov	r3, r0
 8006498:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	2bff      	cmp	r3, #255	@ 0xff
 800649e:	d025      	beq.n	80064ec <USBD_LL_DataOutStage+0x15c>
 80064a0:	7dbb      	ldrb	r3, [r7, #22]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d122      	bne.n	80064ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d117      	bne.n	80064e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064b2:	7dba      	ldrb	r2, [r7, #22]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	32ae      	adds	r2, #174	@ 0xae
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00f      	beq.n	80064e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064c2:	7dba      	ldrb	r2, [r7, #22]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064ca:	7dba      	ldrb	r2, [r7, #22]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	32ae      	adds	r2, #174	@ 0xae
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	7afa      	ldrb	r2, [r7, #11]
 80064d8:	4611      	mov	r1, r2
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	e000      	b.n	80064ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	460b      	mov	r3, r1
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d16f      	bne.n	80065ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3314      	adds	r3, #20
 800650e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006516:	2b02      	cmp	r3, #2
 8006518:	d15a      	bne.n	80065d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	429a      	cmp	r2, r3
 8006524:	d914      	bls.n	8006550 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	461a      	mov	r2, r3
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f001 f8b0 	bl	80076a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006542:	2300      	movs	r3, #0
 8006544:	2200      	movs	r2, #0
 8006546:	2100      	movs	r1, #0
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 fd3d 	bl	8007fc8 <USBD_LL_PrepareReceive>
 800654e:	e03f      	b.n	80065d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	d11c      	bne.n	8006596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006564:	429a      	cmp	r2, r3
 8006566:	d316      	bcc.n	8006596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006572:	429a      	cmp	r2, r3
 8006574:	d20f      	bcs.n	8006596 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f001 f891 	bl	80076a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006588:	2300      	movs	r3, #0
 800658a:	2200      	movs	r2, #0
 800658c:	2100      	movs	r1, #0
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 fd1a 	bl	8007fc8 <USBD_LL_PrepareReceive>
 8006594:	e01c      	b.n	80065d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d10f      	bne.n	80065c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065c2:	2180      	movs	r1, #128	@ 0x80
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f001 fc55 	bl	8007e74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f001 f8bb 	bl	8007746 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d03a      	beq.n	8006650 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fe42 	bl	8006264 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80065e8:	e032      	b.n	8006650 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065ea:	7afb      	ldrb	r3, [r7, #11]
 80065ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f985 	bl	8006904 <USBD_CoreFindEP>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2bff      	cmp	r3, #255	@ 0xff
 8006602:	d025      	beq.n	8006650 <USBD_LL_DataInStage+0x15a>
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d122      	bne.n	8006650 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b03      	cmp	r3, #3
 8006614:	d11c      	bne.n	8006650 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006616:	7dfa      	ldrb	r2, [r7, #23]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	32ae      	adds	r2, #174	@ 0xae
 800661c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d014      	beq.n	8006650 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006626:	7dfa      	ldrb	r2, [r7, #23]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800662e:	7dfa      	ldrb	r2, [r7, #23]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	32ae      	adds	r2, #174	@ 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	7afa      	ldrb	r2, [r7, #11]
 800663c:	4611      	mov	r1, r2
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	4798      	blx	r3
 8006642:	4603      	mov	r3, r0
 8006644:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006646:	7dbb      	ldrb	r3, [r7, #22]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800664c:	7dbb      	ldrb	r3, [r7, #22]
 800664e:	e000      	b.n	8006652 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00e      	beq.n	80066c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6852      	ldr	r2, [r2, #4]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	4611      	mov	r1, r2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066c0:	2340      	movs	r3, #64	@ 0x40
 80066c2:	2200      	movs	r2, #0
 80066c4:	2100      	movs	r1, #0
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fb8f 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2240      	movs	r2, #64	@ 0x40
 80066d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066dc:	2340      	movs	r3, #64	@ 0x40
 80066de:	2200      	movs	r2, #0
 80066e0:	2180      	movs	r1, #128	@ 0x80
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 fb81 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2240      	movs	r2, #64	@ 0x40
 80066f2:	621a      	str	r2, [r3, #32]

  return ret;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b04      	cmp	r3, #4
 8006730:	d006      	beq.n	8006740 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006738:	b2da      	uxtb	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2204      	movs	r2, #4
 8006744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b04      	cmp	r3, #4
 8006768:	d106      	bne.n	8006778 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006770:	b2da      	uxtb	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b03      	cmp	r3, #3
 8006798:	d110      	bne.n	80067bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32ae      	adds	r2, #174	@ 0xae
 80067dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e01c      	b.n	8006822 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d115      	bne.n	8006820 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32ae      	adds	r2, #174	@ 0xae
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32ae      	adds	r2, #174	@ 0xae
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	4611      	mov	r1, r2
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	32ae      	adds	r2, #174	@ 0xae
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	e01c      	b.n	8006886 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b03      	cmp	r3, #3
 8006856:	d115      	bne.n	8006884 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	32ae      	adds	r2, #174	@ 0xae
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	32ae      	adds	r2, #174	@ 0xae
 8006876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	4611      	mov	r1, r2
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00e      	beq.n	80068e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6852      	ldr	r2, [r2, #4]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	4611      	mov	r1, r2
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006910:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b086      	sub	sp, #24
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	885b      	ldrh	r3, [r3, #2]
 800693a:	b29b      	uxth	r3, r3
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	4293      	cmp	r3, r2
 8006942:	d91f      	bls.n	8006984 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800694a:	e013      	b.n	8006974 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800694c:	f107 030a 	add.w	r3, r7, #10
 8006950:	4619      	mov	r1, r3
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f000 f81b 	bl	800698e <USBD_GetNextDesc>
 8006958:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b05      	cmp	r3, #5
 8006960:	d108      	bne.n	8006974 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	789b      	ldrb	r3, [r3, #2]
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	429a      	cmp	r2, r3
 800696e:	d008      	beq.n	8006982 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	885b      	ldrh	r3, [r3, #2]
 8006978:	b29a      	uxth	r2, r3
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	429a      	cmp	r2, r3
 800697e:	d8e5      	bhi.n	800694c <USBD_GetEpDesc+0x2e>
 8006980:	e000      	b.n	8006984 <USBD_GetEpDesc+0x66>
          break;
 8006982:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006984:	693b      	ldr	r3, [r7, #16]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	4413      	add	r3, r2
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	3301      	adds	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069e4:	8a3b      	ldrh	r3, [r7, #16]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	b21a      	sxth	r2, r3
 80069ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069f4:	89fb      	ldrh	r3, [r7, #14]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a1a:	2b40      	cmp	r3, #64	@ 0x40
 8006a1c:	d005      	beq.n	8006a2a <USBD_StdDevReq+0x26>
 8006a1e:	2b40      	cmp	r3, #64	@ 0x40
 8006a20:	d857      	bhi.n	8006ad2 <USBD_StdDevReq+0xce>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00f      	beq.n	8006a46 <USBD_StdDevReq+0x42>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d153      	bne.n	8006ad2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	32ae      	adds	r2, #174	@ 0xae
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
      break;
 8006a44:	e04a      	b.n	8006adc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b09      	cmp	r3, #9
 8006a4c:	d83b      	bhi.n	8006ac6 <USBD_StdDevReq+0xc2>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <USBD_StdDevReq+0x50>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006aa9 	.word	0x08006aa9
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006ac7 	.word	0x08006ac7
 8006a60:	08006ab3 	.word	0x08006ab3
 8006a64:	08006ac7 	.word	0x08006ac7
 8006a68:	08006a87 	.word	0x08006a87
 8006a6c:	08006a7d 	.word	0x08006a7d
 8006a70:	08006ac7 	.word	0x08006ac7
 8006a74:	08006a9f 	.word	0x08006a9f
 8006a78:	08006a91 	.word	0x08006a91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa3c 	bl	8006efc <USBD_GetDescriptor>
          break;
 8006a84:	e024      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fba1 	bl	80071d0 <USBD_SetAddress>
          break;
 8006a8e:	e01f      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fbe0 	bl	8007258 <USBD_SetConfig>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a9c:	e018      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc83 	bl	80073ac <USBD_GetConfig>
          break;
 8006aa6:	e013      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fcb4 	bl	8007418 <USBD_GetStatus>
          break;
 8006ab0:	e00e      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fce3 	bl	8007480 <USBD_SetFeature>
          break;
 8006aba:	e009      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd07 	bl	80074d2 <USBD_ClrFeature>
          break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fd5e 	bl	800758a <USBD_CtlError>
          break;
 8006ace:	bf00      	nop
      }
      break;
 8006ad0:	e004      	b.n	8006adc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fd58 	bl	800758a <USBD_CtlError>
      break;
 8006ada:	bf00      	nop
  }

  return ret;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop

08006ae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006afe:	2b40      	cmp	r3, #64	@ 0x40
 8006b00:	d005      	beq.n	8006b0e <USBD_StdItfReq+0x26>
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d852      	bhi.n	8006bac <USBD_StdItfReq+0xc4>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <USBD_StdItfReq+0x26>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d14e      	bne.n	8006bac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d840      	bhi.n	8006b9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	889b      	ldrh	r3, [r3, #4]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d836      	bhi.n	8006b94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	889b      	ldrh	r3, [r3, #4]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fedb 	bl	80068ea <USBD_CoreFindIF>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2bff      	cmp	r3, #255	@ 0xff
 8006b3c:	d01d      	beq.n	8006b7a <USBD_StdItfReq+0x92>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d11a      	bne.n	8006b7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b44:	7bba      	ldrb	r2, [r7, #14]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32ae      	adds	r2, #174	@ 0xae
 8006b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00f      	beq.n	8006b74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b54:	7bba      	ldrb	r2, [r7, #14]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b5c:	7bba      	ldrb	r2, [r7, #14]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32ae      	adds	r2, #174	@ 0xae
 8006b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4798      	blx	r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b72:	e004      	b.n	8006b7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b78:	e001      	b.n	8006b7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	88db      	ldrh	r3, [r3, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d110      	bne.n	8006ba8 <USBD_StdItfReq+0xc0>
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fdc7 	bl	8007720 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b92:	e009      	b.n	8006ba8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcf7 	bl	800758a <USBD_CtlError>
          break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fcf2 	bl	800758a <USBD_CtlError>
          break;
 8006ba6:	e000      	b.n	8006baa <USBD_StdItfReq+0xc2>
          break;
 8006ba8:	bf00      	nop
      }
      break;
 8006baa:	e004      	b.n	8006bb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fceb 	bl	800758a <USBD_CtlError>
      break;
 8006bb4:	bf00      	nop
  }

  return ret;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	889b      	ldrh	r3, [r3, #4]
 8006bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bdc:	2b40      	cmp	r3, #64	@ 0x40
 8006bde:	d007      	beq.n	8006bf0 <USBD_StdEPReq+0x30>
 8006be0:	2b40      	cmp	r3, #64	@ 0x40
 8006be2:	f200 817f 	bhi.w	8006ee4 <USBD_StdEPReq+0x324>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02a      	beq.n	8006c40 <USBD_StdEPReq+0x80>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	f040 817a 	bne.w	8006ee4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fe85 	bl	8006904 <USBD_CoreFindEP>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bfe:	7b7b      	ldrb	r3, [r7, #13]
 8006c00:	2bff      	cmp	r3, #255	@ 0xff
 8006c02:	f000 8174 	beq.w	8006eee <USBD_StdEPReq+0x32e>
 8006c06:	7b7b      	ldrb	r3, [r7, #13]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f040 8170 	bne.w	8006eee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c0e:	7b7a      	ldrb	r2, [r7, #13]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c16:	7b7a      	ldrb	r2, [r7, #13]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32ae      	adds	r2, #174	@ 0xae
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8163 	beq.w	8006eee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c28:	7b7a      	ldrb	r2, [r7, #13]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	@ 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c3e:	e156      	b.n	8006eee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d008      	beq.n	8006c5a <USBD_StdEPReq+0x9a>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	f300 8145 	bgt.w	8006ed8 <USBD_StdEPReq+0x318>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 809b 	beq.w	8006d8a <USBD_StdEPReq+0x1ca>
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d03c      	beq.n	8006cd2 <USBD_StdEPReq+0x112>
 8006c58:	e13e      	b.n	8006ed8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d002      	beq.n	8006c6c <USBD_StdEPReq+0xac>
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d016      	beq.n	8006c98 <USBD_StdEPReq+0xd8>
 8006c6a:	e02c      	b.n	8006cc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <USBD_StdEPReq+0xce>
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b80      	cmp	r3, #128	@ 0x80
 8006c76:	d00a      	beq.n	8006c8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f8f9 	bl	8007e74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c82:	2180      	movs	r1, #128	@ 0x80
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f8f5 	bl	8007e74 <USBD_LL_StallEP>
 8006c8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c8c:	e020      	b.n	8006cd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc7a 	bl	800758a <USBD_CtlError>
              break;
 8006c96:	e01b      	b.n	8006cd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	885b      	ldrh	r3, [r3, #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10e      	bne.n	8006cbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <USBD_StdEPReq+0xfe>
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b80      	cmp	r3, #128	@ 0x80
 8006caa:	d008      	beq.n	8006cbe <USBD_StdEPReq+0xfe>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	88db      	ldrh	r3, [r3, #6]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f8db 	bl	8007e74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fd2e 	bl	8007720 <USBD_CtlSendStatus>

              break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc5e 	bl	800758a <USBD_CtlError>
              break;
 8006cce:	bf00      	nop
          }
          break;
 8006cd0:	e107      	b.n	8006ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d002      	beq.n	8006ce4 <USBD_StdEPReq+0x124>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d016      	beq.n	8006d10 <USBD_StdEPReq+0x150>
 8006ce2:	e04b      	b.n	8006d7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00d      	beq.n	8006d06 <USBD_StdEPReq+0x146>
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b80      	cmp	r3, #128	@ 0x80
 8006cee:	d00a      	beq.n	8006d06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f8bd 	bl	8007e74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cfa:	2180      	movs	r1, #128	@ 0x80
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f8b9 	bl	8007e74 <USBD_LL_StallEP>
 8006d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d04:	e040      	b.n	8006d88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc3e 	bl	800758a <USBD_CtlError>
              break;
 8006d0e:	e03b      	b.n	8006d88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	885b      	ldrh	r3, [r3, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d136      	bne.n	8006d86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 f8c3 	bl	8007eb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fcf7 	bl	8007720 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fde4 	bl	8006904 <USBD_CoreFindEP>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d40:	7b7b      	ldrb	r3, [r7, #13]
 8006d42:	2bff      	cmp	r3, #255	@ 0xff
 8006d44:	d01f      	beq.n	8006d86 <USBD_StdEPReq+0x1c6>
 8006d46:	7b7b      	ldrb	r3, [r7, #13]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d11c      	bne.n	8006d86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d4c:	7b7a      	ldrb	r2, [r7, #13]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	32ae      	adds	r2, #174	@ 0xae
 8006d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d010      	beq.n	8006d86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d64:	7b7a      	ldrb	r2, [r7, #13]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32ae      	adds	r2, #174	@ 0xae
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d7a:	e004      	b.n	8006d86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fc03 	bl	800758a <USBD_CtlError>
              break;
 8006d84:	e000      	b.n	8006d88 <USBD_StdEPReq+0x1c8>
              break;
 8006d86:	bf00      	nop
          }
          break;
 8006d88:	e0ab      	b.n	8006ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d002      	beq.n	8006d9c <USBD_StdEPReq+0x1dc>
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d032      	beq.n	8006e00 <USBD_StdEPReq+0x240>
 8006d9a:	e097      	b.n	8006ecc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <USBD_StdEPReq+0x1f2>
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b80      	cmp	r3, #128	@ 0x80
 8006da6:	d004      	beq.n	8006db2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fbed 	bl	800758a <USBD_CtlError>
                break;
 8006db0:	e091      	b.n	8006ed6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da0b      	bge.n	8006dd2 <USBD_StdEPReq+0x212>
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	3310      	adds	r3, #16
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	3304      	adds	r3, #4
 8006dd0:	e00b      	b.n	8006dea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	3304      	adds	r3, #4
 8006dea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2202      	movs	r2, #2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc37 	bl	800766c <USBD_CtlSendData>
              break;
 8006dfe:	e06a      	b.n	8006ed6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da11      	bge.n	8006e2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	3324      	adds	r3, #36	@ 0x24
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d117      	bne.n	8006e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fbb0 	bl	800758a <USBD_CtlError>
                  break;
 8006e2a:	e054      	b.n	8006ed6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb9d 	bl	800758a <USBD_CtlError>
                  break;
 8006e50:	e041      	b.n	8006ed6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da0b      	bge.n	8006e72 <USBD_StdEPReq+0x2b2>
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	3310      	adds	r3, #16
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3304      	adds	r3, #4
 8006e70:	e00b      	b.n	8006e8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	4413      	add	r3, r2
 8006e88:	3304      	adds	r3, #4
 8006e8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <USBD_StdEPReq+0x2d8>
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b80      	cmp	r3, #128	@ 0x80
 8006e96:	d103      	bne.n	8006ea0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e00e      	b.n	8006ebe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f823 	bl	8007ef0 <USBD_LL_IsStallEP>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fbd1 	bl	800766c <USBD_CtlSendData>
              break;
 8006eca:	e004      	b.n	8006ed6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fb5b 	bl	800758a <USBD_CtlError>
              break;
 8006ed4:	bf00      	nop
          }
          break;
 8006ed6:	e004      	b.n	8006ee2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb55 	bl	800758a <USBD_CtlError>
          break;
 8006ee0:	bf00      	nop
      }
      break;
 8006ee2:	e005      	b.n	8006ef0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb4f 	bl	800758a <USBD_CtlError>
      break;
 8006eec:	e000      	b.n	8006ef0 <USBD_StdEPReq+0x330>
      break;
 8006eee:	bf00      	nop
  }

  return ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	885b      	ldrh	r3, [r3, #2]
 8006f16:	0a1b      	lsrs	r3, r3, #8
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	2b06      	cmp	r3, #6
 8006f1e:	f200 8128 	bhi.w	8007172 <USBD_GetDescriptor+0x276>
 8006f22:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <USBD_GetDescriptor+0x2c>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	08006f5d 	.word	0x08006f5d
 8006f30:	08006f9d 	.word	0x08006f9d
 8006f34:	08007173 	.word	0x08007173
 8006f38:	08007173 	.word	0x08007173
 8006f3c:	08007113 	.word	0x08007113
 8006f40:	0800713f 	.word	0x0800713f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
      break;
 8006f5a:	e112      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7c1b      	ldrb	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	f107 0208 	add.w	r2, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f7e:	e100      	b.n	8007182 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	f107 0208 	add.w	r2, r7, #8
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	2202      	movs	r2, #2
 8006f98:	701a      	strb	r2, [r3, #0]
      break;
 8006f9a:	e0f2      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	885b      	ldrh	r3, [r3, #2]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b05      	cmp	r3, #5
 8006fa4:	f200 80ac 	bhi.w	8007100 <USBD_GetDescriptor+0x204>
 8006fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <USBD_GetDescriptor+0xb4>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fc9 	.word	0x08006fc9
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	08007031 	.word	0x08007031
 8006fbc:	08007065 	.word	0x08007065
 8006fc0:	08007099 	.word	0x08007099
 8006fc4:	080070cd 	.word	0x080070cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00b      	beq.n	8006fec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	7c12      	ldrb	r2, [r2, #16]
 8006fe0:	f107 0108 	add.w	r1, r7, #8
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fea:	e091      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 facb 	bl	800758a <USBD_CtlError>
            err++;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffa:	e089      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	7c12      	ldrb	r2, [r2, #16]
 8007014:	f107 0108 	add.w	r1, r7, #8
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800701e:	e077      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fab1 	bl	800758a <USBD_CtlError>
            err++;
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	3301      	adds	r3, #1
 800702c:	72fb      	strb	r3, [r7, #11]
          break;
 800702e:	e06f      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	7c12      	ldrb	r2, [r2, #16]
 8007048:	f107 0108 	add.w	r1, r7, #8
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
 8007050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007052:	e05d      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa97 	bl	800758a <USBD_CtlError>
            err++;
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	3301      	adds	r3, #1
 8007060:	72fb      	strb	r3, [r7, #11]
          break;
 8007062:	e055      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	7c12      	ldrb	r2, [r2, #16]
 800707c:	f107 0108 	add.w	r1, r7, #8
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007086:	e043      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa7d 	bl	800758a <USBD_CtlError>
            err++;
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	3301      	adds	r3, #1
 8007094:	72fb      	strb	r3, [r7, #11]
          break;
 8007096:	e03b      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7c12      	ldrb	r2, [r2, #16]
 80070b0:	f107 0108 	add.w	r1, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ba:	e029      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa63 	bl	800758a <USBD_CtlError>
            err++;
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	3301      	adds	r3, #1
 80070c8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ca:	e021      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7c12      	ldrb	r2, [r2, #16]
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ee:	e00f      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa49 	bl	800758a <USBD_CtlError>
            err++;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	3301      	adds	r3, #1
 80070fc:	72fb      	strb	r3, [r7, #11]
          break;
 80070fe:	e007      	b.n	8007110 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa41 	bl	800758a <USBD_CtlError>
          err++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	3301      	adds	r3, #1
 800710c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800710e:	bf00      	nop
      }
      break;
 8007110:	e037      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7c1b      	ldrb	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007122:	f107 0208 	add.w	r2, r7, #8
 8007126:	4610      	mov	r0, r2
 8007128:	4798      	blx	r3
 800712a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800712c:	e029      	b.n	8007182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa2a 	bl	800758a <USBD_CtlError>
        err++;
 8007136:	7afb      	ldrb	r3, [r7, #11]
 8007138:	3301      	adds	r3, #1
 800713a:	72fb      	strb	r3, [r7, #11]
      break;
 800713c:	e021      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7c1b      	ldrb	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10d      	bne.n	8007162 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800714c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714e:	f107 0208 	add.w	r2, r7, #8
 8007152:	4610      	mov	r0, r2
 8007154:	4798      	blx	r3
 8007156:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3301      	adds	r3, #1
 800715c:	2207      	movs	r2, #7
 800715e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007160:	e00f      	b.n	8007182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa10 	bl	800758a <USBD_CtlError>
        err++;
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	3301      	adds	r3, #1
 800716e:	72fb      	strb	r3, [r7, #11]
      break;
 8007170:	e007      	b.n	8007182 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa08 	bl	800758a <USBD_CtlError>
      err++;
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	3301      	adds	r3, #1
 800717e:	72fb      	strb	r3, [r7, #11]
      break;
 8007180:	bf00      	nop
  }

  if (err != 0U)
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d11e      	bne.n	80071c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d016      	beq.n	80071be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007190:	893b      	ldrh	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88da      	ldrh	r2, [r3, #6]
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	4293      	cmp	r3, r2
 800719e:	bf28      	it	cs
 80071a0:	4613      	movcs	r3, r2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071a6:	893b      	ldrh	r3, [r7, #8]
 80071a8:	461a      	mov	r2, r3
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fa5d 	bl	800766c <USBD_CtlSendData>
 80071b2:	e009      	b.n	80071c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9e7 	bl	800758a <USBD_CtlError>
 80071bc:	e004      	b.n	80071c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 faae 	bl	8007720 <USBD_CtlSendStatus>
 80071c4:	e000      	b.n	80071c8 <USBD_GetDescriptor+0x2cc>
    return;
 80071c6:	bf00      	nop
  }
}
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	889b      	ldrh	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d131      	bne.n	8007246 <USBD_SetAddress+0x76>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	88db      	ldrh	r3, [r3, #6]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d12d      	bne.n	8007246 <USBD_SetAddress+0x76>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	885b      	ldrh	r3, [r3, #2]
 80071ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80071f0:	d829      	bhi.n	8007246 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	885b      	ldrh	r3, [r3, #2]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d104      	bne.n	8007214 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9bc 	bl	800758a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007212:	e01d      	b.n	8007250 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7bfa      	ldrb	r2, [r7, #15]
 8007218:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fe91 	bl	8007f48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa7a 	bl	8007720 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	e009      	b.n	8007250 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007244:	e004      	b.n	8007250 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f99e 	bl	800758a <USBD_CtlError>
  }
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	885b      	ldrh	r3, [r3, #2]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	4b4e      	ldr	r3, [pc, #312]	@ (80073a8 <USBD_SetConfig+0x150>)
 800726e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007270:	4b4d      	ldr	r3, [pc, #308]	@ (80073a8 <USBD_SetConfig+0x150>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d905      	bls.n	8007284 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f985 	bl	800758a <USBD_CtlError>
    return USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	e08c      	b.n	800739e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d002      	beq.n	8007296 <USBD_SetConfig+0x3e>
 8007290:	2b03      	cmp	r3, #3
 8007292:	d029      	beq.n	80072e8 <USBD_SetConfig+0x90>
 8007294:	e075      	b.n	8007382 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007296:	4b44      	ldr	r3, [pc, #272]	@ (80073a8 <USBD_SetConfig+0x150>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800729e:	4b42      	ldr	r3, [pc, #264]	@ (80073a8 <USBD_SetConfig+0x150>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072a8:	4b3f      	ldr	r3, [pc, #252]	@ (80073a8 <USBD_SetConfig+0x150>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fe ffe3 	bl	800627a <USBD_SetClassConfig>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f962 	bl	800758a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ce:	e065      	b.n	800739c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fa25 	bl	8007720 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2203      	movs	r2, #3
 80072da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80072de:	e05d      	b.n	800739c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa1d 	bl	8007720 <USBD_CtlSendStatus>
      break;
 80072e6:	e059      	b.n	800739c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072e8:	4b2f      	ldr	r3, [pc, #188]	@ (80073a8 <USBD_SetConfig+0x150>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d112      	bne.n	8007316 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80072f8:	4b2b      	ldr	r3, [pc, #172]	@ (80073a8 <USBD_SetConfig+0x150>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007302:	4b29      	ldr	r3, [pc, #164]	@ (80073a8 <USBD_SetConfig+0x150>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fe ffd2 	bl	80062b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa06 	bl	8007720 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007314:	e042      	b.n	800739c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007316:	4b24      	ldr	r3, [pc, #144]	@ (80073a8 <USBD_SetConfig+0x150>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d02a      	beq.n	800737a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fe ffc0 	bl	80062b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007332:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <USBD_SetConfig+0x150>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800733c:	4b1a      	ldr	r3, [pc, #104]	@ (80073a8 <USBD_SetConfig+0x150>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fe ff99 	bl	800627a <USBD_SetClassConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f918 	bl	800758a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fe ffa5 	bl	80062b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007370:	e014      	b.n	800739c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9d4 	bl	8007720 <USBD_CtlSendStatus>
      break;
 8007378:	e010      	b.n	800739c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9d0 	bl	8007720 <USBD_CtlSendStatus>
      break;
 8007380:	e00c      	b.n	800739c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f900 	bl	800758a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800738a:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <USBD_SetConfig+0x150>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fe ff8e 	bl	80062b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
      break;
 800739a:	bf00      	nop
  }

  return ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200001b0 	.word	0x200001b0

080073ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d004      	beq.n	80073c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8e2 	bl	800758a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073c6:	e023      	b.n	8007410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	dc02      	bgt.n	80073da <USBD_GetConfig+0x2e>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dc03      	bgt.n	80073e0 <USBD_GetConfig+0x34>
 80073d8:	e015      	b.n	8007406 <USBD_GetConfig+0x5a>
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d00b      	beq.n	80073f6 <USBD_GetConfig+0x4a>
 80073de:	e012      	b.n	8007406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3308      	adds	r3, #8
 80073ea:	2201      	movs	r2, #1
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f93c 	bl	800766c <USBD_CtlSendData>
        break;
 80073f4:	e00c      	b.n	8007410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2201      	movs	r2, #1
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f934 	bl	800766c <USBD_CtlSendData>
        break;
 8007404:	e004      	b.n	8007410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8be 	bl	800758a <USBD_CtlError>
        break;
 800740e:	bf00      	nop
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	2b02      	cmp	r3, #2
 800742e:	d81e      	bhi.n	800746e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	88db      	ldrh	r3, [r3, #6]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d004      	beq.n	8007442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8a5 	bl	800758a <USBD_CtlError>
        break;
 8007440:	e01a      	b.n	8007478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	330c      	adds	r3, #12
 8007462:	2202      	movs	r2, #2
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f900 	bl	800766c <USBD_CtlSendData>
      break;
 800746c:	e004      	b.n	8007478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f88a 	bl	800758a <USBD_CtlError>
      break;
 8007476:	bf00      	nop
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d107      	bne.n	80074a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f940 	bl	8007720 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80074a0:	e013      	b.n	80074ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	885b      	ldrh	r3, [r3, #2]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d10b      	bne.n	80074c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	889b      	ldrh	r3, [r3, #4]
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f930 	bl	8007720 <USBD_CtlSendStatus>
}
 80074c0:	e003      	b.n	80074ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f860 	bl	800758a <USBD_CtlError>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d80b      	bhi.n	8007502 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10c      	bne.n	800750c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f910 	bl	8007720 <USBD_CtlSendStatus>
      }
      break;
 8007500:	e004      	b.n	800750c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f840 	bl	800758a <USBD_CtlError>
      break;
 800750a:	e000      	b.n	800750e <USBD_ClrFeature+0x3c>
      break;
 800750c:	bf00      	nop
  }
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fa40 	bl	80069c6 <SWAPBYTE>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff fa33 	bl	80069c6 <SWAPBYTE>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fa26 	bl	80069c6 <SWAPBYTE>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	80da      	strh	r2, [r3, #6]
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007594:	2180      	movs	r1, #128	@ 0x80
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fc6c 	bl	8007e74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fc68 	bl	8007e74 <USBD_LL_StallEP>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d036      	beq.n	8007630 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075c6:	6938      	ldr	r0, [r7, #16]
 80075c8:	f000 f836 	bl	8007638 <USBD_GetLen>
 80075cc:	4603      	mov	r3, r0
 80075ce:	3301      	adds	r3, #1
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	3301      	adds	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	2203      	movs	r2, #3
 80075f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	3301      	adds	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075fc:	e013      	b.n	8007626 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	4413      	add	r3, r2
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3301      	adds	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
    idx++;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	3301      	adds	r3, #1
 8007614:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	4413      	add	r3, r2
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	3301      	adds	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e7      	bne.n	80075fe <USBD_GetString+0x52>
 800762e:	e000      	b.n	8007632 <USBD_GetString+0x86>
    return;
 8007630:	bf00      	nop
  }
}
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007648:	e005      	b.n	8007656 <USBD_GetLen+0x1e>
  {
    len++;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	3301      	adds	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3301      	adds	r3, #1
 8007654:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f5      	bne.n	800764a <USBD_GetLen+0x12>
  }

  return len;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2202      	movs	r2, #2
 800767c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	2100      	movs	r1, #0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fc77 	bl	8007f86 <USBD_LL_Transmit>

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	2100      	movs	r1, #0
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fc66 	bl	8007f86 <USBD_LL_Transmit>

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2203      	movs	r2, #3
 80076d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	2100      	movs	r1, #0
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fc6a 	bl	8007fc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	2100      	movs	r1, #0
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fc59 	bl	8007fc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007730:	2300      	movs	r3, #0
 8007732:	2200      	movs	r2, #0
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fc25 	bl	8007f86 <USBD_LL_Transmit>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2205      	movs	r2, #5
 8007752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fc33 	bl	8007fc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007770:	2200      	movs	r2, #0
 8007772:	4912      	ldr	r1, [pc, #72]	@ (80077bc <MX_USB_DEVICE_Init+0x50>)
 8007774:	4812      	ldr	r0, [pc, #72]	@ (80077c0 <MX_USB_DEVICE_Init+0x54>)
 8007776:	f7fe fd03 	bl	8006180 <USBD_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007780:	f7f9 ffe8 	bl	8001754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007784:	490f      	ldr	r1, [pc, #60]	@ (80077c4 <MX_USB_DEVICE_Init+0x58>)
 8007786:	480e      	ldr	r0, [pc, #56]	@ (80077c0 <MX_USB_DEVICE_Init+0x54>)
 8007788:	f7fe fd2a 	bl	80061e0 <USBD_RegisterClass>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007792:	f7f9 ffdf 	bl	8001754 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007796:	490c      	ldr	r1, [pc, #48]	@ (80077c8 <MX_USB_DEVICE_Init+0x5c>)
 8007798:	4809      	ldr	r0, [pc, #36]	@ (80077c0 <MX_USB_DEVICE_Init+0x54>)
 800779a:	f7fe fcd7 	bl	800614c <USBD_CUSTOM_HID_RegisterInterface>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077a4:	f7f9 ffd6 	bl	8001754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077a8:	4805      	ldr	r0, [pc, #20]	@ (80077c0 <MX_USB_DEVICE_Init+0x54>)
 80077aa:	f7fe fd4f 	bl	800624c <USBD_Start>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077b4:	f7f9 ffce 	bl	8001754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077b8:	bf00      	nop
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200000cc 	.word	0x200000cc
 80077c0:	200001b4 	.word	0x200001b4
 80077c4:	20000010 	.word	0x20000010
 80077c8:	200000bc 	.word	0x200000bc

080077cc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80077e0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	460a      	mov	r2, r1
 80077f6:	71fb      	strb	r3, [r7, #7]
 80077f8:	4613      	mov	r3, r2
 80077fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80077fc:	4806      	ldr	r0, [pc, #24]	@ (8007818 <CUSTOM_HID_OutEvent_FS+0x2c>)
 80077fe:	f7fe fc43 	bl	8006088 <USBD_CUSTOM_HID_ReceivePacket>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8007808:	f04f 33ff 	mov.w	r3, #4294967295
 800780c:	e000      	b.n	8007810 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800780e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	200001b4 	.word	0x200001b4

0800781c <send_keyboard>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


uint8_t send_keyboard(int8_t modifier, uint8_t key1, uint8_t key2, uint8_t key3, uint8_t key4, uint8_t key5, uint8_t key6)
{
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	461a      	mov	r2, r3
 800782a:	4623      	mov	r3, r4
 800782c:	71fb      	strb	r3, [r7, #7]
 800782e:	4603      	mov	r3, r0
 8007830:	71bb      	strb	r3, [r7, #6]
 8007832:	460b      	mov	r3, r1
 8007834:	717b      	strb	r3, [r7, #5]
 8007836:	4613      	mov	r3, r2
 8007838:	713b      	strb	r3, [r7, #4]
	uint8_t report[8] = {0};
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]

	report[0] = modifier;
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	723b      	strb	r3, [r7, #8]
	report[1] = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	727b      	strb	r3, [r7, #9]
	report[2] = key1;
 800784a:	79bb      	ldrb	r3, [r7, #6]
 800784c:	72bb      	strb	r3, [r7, #10]
	report[3] = key2;
 800784e:	797b      	ldrb	r3, [r7, #5]
 8007850:	72fb      	strb	r3, [r7, #11]
	report[4] = key3;
 8007852:	793b      	ldrb	r3, [r7, #4]
 8007854:	733b      	strb	r3, [r7, #12]
	report[5] = key4;
 8007856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800785a:	737b      	strb	r3, [r7, #13]
	report[6] = key5;
 800785c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007860:	73bb      	strb	r3, [r7, #14]
	report[7] = key6;
 8007862:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007866:	73fb      	strb	r3, [r7, #15]

	return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, sizeof(report));
 8007868:	f107 0308 	add.w	r3, r7, #8
 800786c:	2208      	movs	r2, #8
 800786e:	4619      	mov	r1, r3
 8007870:	4803      	ldr	r0, [pc, #12]	@ (8007880 <send_keyboard+0x64>)
 8007872:	f7fe fafd 	bl	8005e70 <USBD_CUSTOM_HID_SendReport>
 8007876:	4603      	mov	r3, r0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	bd90      	pop	{r4, r7, pc}
 8007880:	200001b4 	.word	0x200001b4

08007884 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2212      	movs	r2, #18
 8007894:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007896:	4b03      	ldr	r3, [pc, #12]	@ (80078a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	200000e8 	.word	0x200000e8

080078a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2204      	movs	r2, #4
 80078b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078ba:	4b03      	ldr	r3, [pc, #12]	@ (80078c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	200000fc 	.word	0x200000fc

080078cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4907      	ldr	r1, [pc, #28]	@ (8007900 <USBD_FS_ProductStrDescriptor+0x34>)
 80078e2:	4808      	ldr	r0, [pc, #32]	@ (8007904 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e4:	f7ff fe62 	bl	80075ac <USBD_GetString>
 80078e8:	e004      	b.n	80078f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	4904      	ldr	r1, [pc, #16]	@ (8007900 <USBD_FS_ProductStrDescriptor+0x34>)
 80078ee:	4805      	ldr	r0, [pc, #20]	@ (8007904 <USBD_FS_ProductStrDescriptor+0x38>)
 80078f0:	f7ff fe5c 	bl	80075ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80078f4:	4b02      	ldr	r3, [pc, #8]	@ (8007900 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000490 	.word	0x20000490
 8007904:	08008104 	.word	0x08008104

08007908 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	4904      	ldr	r1, [pc, #16]	@ (8007928 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007918:	4804      	ldr	r0, [pc, #16]	@ (800792c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800791a:	f7ff fe47 	bl	80075ac <USBD_GetString>
  return USBD_StrDesc;
 800791e:	4b02      	ldr	r3, [pc, #8]	@ (8007928 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20000490 	.word	0x20000490
 800792c:	08008114 	.word	0x08008114

08007930 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	221a      	movs	r2, #26
 8007940:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007942:	f000 f843 	bl	80079cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007946:	4b02      	ldr	r3, [pc, #8]	@ (8007950 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000100 	.word	0x20000100

08007954 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d105      	bne.n	8007972 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	4907      	ldr	r1, [pc, #28]	@ (8007988 <USBD_FS_ConfigStrDescriptor+0x34>)
 800796a:	4808      	ldr	r0, [pc, #32]	@ (800798c <USBD_FS_ConfigStrDescriptor+0x38>)
 800796c:	f7ff fe1e 	bl	80075ac <USBD_GetString>
 8007970:	e004      	b.n	800797c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4904      	ldr	r1, [pc, #16]	@ (8007988 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007976:	4805      	ldr	r0, [pc, #20]	@ (800798c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007978:	f7ff fe18 	bl	80075ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800797c:	4b02      	ldr	r3, [pc, #8]	@ (8007988 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000490 	.word	0x20000490
 800798c:	08008128 	.word	0x08008128

08007990 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d105      	bne.n	80079ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4907      	ldr	r1, [pc, #28]	@ (80079c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079a6:	4808      	ldr	r0, [pc, #32]	@ (80079c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a8:	f7ff fe00 	bl	80075ac <USBD_GetString>
 80079ac:	e004      	b.n	80079b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4904      	ldr	r1, [pc, #16]	@ (80079c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079b2:	4805      	ldr	r0, [pc, #20]	@ (80079c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b4:	f7ff fdfa 	bl	80075ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b8:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000490 	.word	0x20000490
 80079c8:	0800813c 	.word	0x0800813c

080079cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <Get_SerialNum+0x44>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <Get_SerialNum+0x48>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079de:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <Get_SerialNum+0x4c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079f2:	2208      	movs	r2, #8
 80079f4:	4909      	ldr	r1, [pc, #36]	@ (8007a1c <Get_SerialNum+0x50>)
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f814 	bl	8007a24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079fc:	2204      	movs	r2, #4
 80079fe:	4908      	ldr	r1, [pc, #32]	@ (8007a20 <Get_SerialNum+0x54>)
 8007a00:	68b8      	ldr	r0, [r7, #8]
 8007a02:	f000 f80f 	bl	8007a24 <IntToUnicode>
  }
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	1fff7a10 	.word	0x1fff7a10
 8007a14:	1fff7a14 	.word	0x1fff7a14
 8007a18:	1fff7a18 	.word	0x1fff7a18
 8007a1c:	20000102 	.word	0x20000102
 8007a20:	20000112 	.word	0x20000112

08007a24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]
 8007a3a:	e027      	b.n	8007a8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0f1b      	lsrs	r3, r3, #28
 8007a40:	2b09      	cmp	r3, #9
 8007a42:	d80b      	bhi.n	8007a5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	0f1b      	lsrs	r3, r3, #28
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	440b      	add	r3, r1
 8007a54:	3230      	adds	r2, #48	@ 0x30
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e00a      	b.n	8007a72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0f1b      	lsrs	r3, r3, #28
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4619      	mov	r1, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3237      	adds	r2, #55	@ 0x37
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	75fb      	strb	r3, [r7, #23]
 8007a8c:	7dfa      	ldrb	r2, [r7, #23]
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d3d3      	bcc.n	8007a3c <IntToUnicode+0x18>
  }
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08a      	sub	sp, #40	@ 0x28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aac:	f107 0314 	add.w	r3, r7, #20
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	60da      	str	r2, [r3, #12]
 8007aba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ac4:	d13a      	bne.n	8007b3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	4b1e      	ldr	r3, [pc, #120]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ace:	4a1d      	ldr	r2, [pc, #116]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	613b      	str	r3, [r7, #16]
 8007ae0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ae2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af0:	2303      	movs	r3, #3
 8007af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007af4:	230a      	movs	r3, #10
 8007af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007af8:	f107 0314 	add.w	r3, r7, #20
 8007afc:	4619      	mov	r1, r3
 8007afe:	4812      	ldr	r0, [pc, #72]	@ (8007b48 <HAL_PCD_MspInit+0xa4>)
 8007b00:	f7fa fc32 	bl	8002368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b04:	4b0f      	ldr	r3, [pc, #60]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b08:	4a0e      	ldr	r2, [pc, #56]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	4b0b      	ldr	r3, [pc, #44]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b18:	4a0a      	ldr	r2, [pc, #40]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007b1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b20:	4b08      	ldr	r3, [pc, #32]	@ (8007b44 <HAL_PCD_MspInit+0xa0>)
 8007b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	2043      	movs	r0, #67	@ 0x43
 8007b32:	f7fa fbe2 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b36:	2043      	movs	r0, #67	@ 0x43
 8007b38:	f7fa fbfb 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3728      	adds	r7, #40	@ 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40023800 	.word	0x40023800
 8007b48:	40020000 	.word	0x40020000

08007b4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7fe fbbf 	bl	80062e6 <USBD_LL_SetupStage>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f7fe fbf9 	bl	8006390 <USBD_LL_DataOutStage>
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	3320      	adds	r3, #32
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7fe fc92 	bl	80064f6 <USBD_LL_DataInStage>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fdcc 	bl	8006786 <USBD_LL_SOF>
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	79db      	ldrb	r3, [r3, #7]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d001      	beq.n	8007c0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c0a:	f7f9 fda3 	bl	8001754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c14:	7bfa      	ldrb	r2, [r7, #15]
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fd70 	bl	80066fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fd18 	bl	800665a <USBD_LL_Reset>
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fd6b 	bl	800671e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7adb      	ldrb	r3, [r3, #11]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <HAL_PCD_SuspendCallback+0x48>)
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	4a03      	ldr	r2, [pc, #12]	@ (8007c7c <HAL_PCD_SuspendCallback+0x48>)
 8007c6e:	f043 0306 	orr.w	r3, r3, #6
 8007c72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	e000ed00 	.word	0xe000ed00

08007c80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fd61 	bl	8006756 <USBD_LL_Resume>
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fdb9 	bl	800682a <USBD_LL_IsoOUTIncomplete>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd75 	bl	80067c6 <USBD_LL_IsoINIncomplete>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fdcb 	bl	800688e <USBD_LL_DevConnected>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fdc8 	bl	80068a4 <USBD_LL_DevDisconnected>
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d13c      	bne.n	8007da6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d2c:	4a20      	ldr	r2, [pc, #128]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d44:	4b1a      	ldr	r3, [pc, #104]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d46:	2204      	movs	r2, #4
 8007d48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d4a:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d50:	4b17      	ldr	r3, [pc, #92]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d56:	4b16      	ldr	r3, [pc, #88]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d58:	2202      	movs	r2, #2
 8007d5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d5c:	4b14      	ldr	r3, [pc, #80]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d62:	4b13      	ldr	r3, [pc, #76]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d68:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d6e:	4b10      	ldr	r3, [pc, #64]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d74:	4b0e      	ldr	r3, [pc, #56]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d7a:	480d      	ldr	r0, [pc, #52]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d7c:	f7fa fc90 	bl	80026a0 <HAL_PCD_Init>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d86:	f7f9 fce5 	bl	8001754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d8a:	2180      	movs	r1, #128	@ 0x80
 8007d8c:	4808      	ldr	r0, [pc, #32]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d8e:	f7fb fea2 	bl	8003ad6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d92:	2240      	movs	r2, #64	@ 0x40
 8007d94:	2100      	movs	r1, #0
 8007d96:	4806      	ldr	r0, [pc, #24]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007d98:	f7fb fe56 	bl	8003a48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d9c:	2280      	movs	r2, #128	@ 0x80
 8007d9e:	2101      	movs	r1, #1
 8007da0:	4803      	ldr	r0, [pc, #12]	@ (8007db0 <USBD_LL_Init+0x94>)
 8007da2:	f7fb fe51 	bl	8003a48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000690 	.word	0x20000690

08007db4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fa fd77 	bl	80028be <HAL_PCD_Start>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f930 	bl	800803c <USBD_Get_USB_Status>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	461a      	mov	r2, r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	70fb      	strb	r3, [r7, #3]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70bb      	strb	r3, [r7, #2]
 8007e00:	4613      	mov	r3, r2
 8007e02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e12:	78bb      	ldrb	r3, [r7, #2]
 8007e14:	883a      	ldrh	r2, [r7, #0]
 8007e16:	78f9      	ldrb	r1, [r7, #3]
 8007e18:	f7fb fa4b 	bl	80032b2 <HAL_PCD_EP_Open>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f90a 	bl	800803c <USBD_Get_USB_Status>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fb fa94 	bl	8003382 <HAL_PCD_EP_Close>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f8eb 	bl	800803c <USBD_Get_USB_Status>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fb fb34 	bl	8003500 <HAL_PCD_EP_SetStall>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f8cc 	bl	800803c <USBD_Get_USB_Status>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ecc:	78fa      	ldrb	r2, [r7, #3]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fb fb78 	bl	80035c6 <HAL_PCD_EP_ClrStall>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f8ad 	bl	800803c <USBD_Get_USB_Status>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da0b      	bge.n	8007f24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	4613      	mov	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3316      	adds	r3, #22
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	e00b      	b.n	8007f3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007f3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fb f97f 	bl	800326a <HAL_PCD_SetAddress>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f862 	bl	800803c <USBD_Get_USB_Status>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	460b      	mov	r3, r1
 8007f94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fa4:	7af9      	ldrb	r1, [r7, #11]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	f7fb fa6f 	bl	800348c <HAL_PCD_EP_Transmit>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f841 	bl	800803c <USBD_Get_USB_Status>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fe6:	7af9      	ldrb	r1, [r7, #11]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	f7fb fa13 	bl	8003416 <HAL_PCD_EP_Receive>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f820 	bl	800803c <USBD_Get_USB_Status>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008000:	7dbb      	ldrb	r3, [r7, #22]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008014:	4b03      	ldr	r3, [pc, #12]	@ (8008024 <USBD_static_malloc+0x18>)
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000b74 	.word	0x20000b74

08008028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	2b03      	cmp	r3, #3
 800804e:	d817      	bhi.n	8008080 <USBD_Get_USB_Status+0x44>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <USBD_Get_USB_Status+0x1c>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	08008069 	.word	0x08008069
 800805c:	0800806f 	.word	0x0800806f
 8008060:	08008075 	.word	0x08008075
 8008064:	0800807b 	.word	0x0800807b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
    break;
 800806c:	e00b      	b.n	8008086 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800806e:	2303      	movs	r3, #3
 8008070:	73fb      	strb	r3, [r7, #15]
    break;
 8008072:	e008      	b.n	8008086 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
    break;
 8008078:	e005      	b.n	8008086 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800807a:	2303      	movs	r3, #3
 800807c:	73fb      	strb	r3, [r7, #15]
    break;
 800807e:	e002      	b.n	8008086 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	73fb      	strb	r3, [r7, #15]
    break;
 8008084:	bf00      	nop
  }
  return usb_status;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <memset>:
 8008094:	4402      	add	r2, r0
 8008096:	4603      	mov	r3, r0
 8008098:	4293      	cmp	r3, r2
 800809a:	d100      	bne.n	800809e <memset+0xa>
 800809c:	4770      	bx	lr
 800809e:	f803 1b01 	strb.w	r1, [r3], #1
 80080a2:	e7f9      	b.n	8008098 <memset+0x4>

080080a4 <__libc_init_array>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4d0d      	ldr	r5, [pc, #52]	@ (80080dc <__libc_init_array+0x38>)
 80080a8:	4c0d      	ldr	r4, [pc, #52]	@ (80080e0 <__libc_init_array+0x3c>)
 80080aa:	1b64      	subs	r4, r4, r5
 80080ac:	10a4      	asrs	r4, r4, #2
 80080ae:	2600      	movs	r6, #0
 80080b0:	42a6      	cmp	r6, r4
 80080b2:	d109      	bne.n	80080c8 <__libc_init_array+0x24>
 80080b4:	4d0b      	ldr	r5, [pc, #44]	@ (80080e4 <__libc_init_array+0x40>)
 80080b6:	4c0c      	ldr	r4, [pc, #48]	@ (80080e8 <__libc_init_array+0x44>)
 80080b8:	f000 f818 	bl	80080ec <_init>
 80080bc:	1b64      	subs	r4, r4, r5
 80080be:	10a4      	asrs	r4, r4, #2
 80080c0:	2600      	movs	r6, #0
 80080c2:	42a6      	cmp	r6, r4
 80080c4:	d105      	bne.n	80080d2 <__libc_init_array+0x2e>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080cc:	4798      	blx	r3
 80080ce:	3601      	adds	r6, #1
 80080d0:	e7ee      	b.n	80080b0 <__libc_init_array+0xc>
 80080d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d6:	4798      	blx	r3
 80080d8:	3601      	adds	r6, #1
 80080da:	e7f2      	b.n	80080c2 <__libc_init_array+0x1e>
 80080dc:	0800816c 	.word	0x0800816c
 80080e0:	0800816c 	.word	0x0800816c
 80080e4:	0800816c 	.word	0x0800816c
 80080e8:	08008170 	.word	0x08008170

080080ec <_init>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr

080080f8 <_fini>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr
