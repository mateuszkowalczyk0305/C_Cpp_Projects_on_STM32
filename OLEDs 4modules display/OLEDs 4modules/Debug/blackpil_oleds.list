
blackpil_oleds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007490  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f8  08007630  08007630  00008630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e28  08008e28  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e28  08008e28  00009e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e30  08008e30  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008e48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  2000005c  08008ea4  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08008ea4  0000a6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002de8c  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c7  00000000  00000000  00037f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001bc53  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014081  00000000  00000000  00059013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000aad44  00000000  00000000  0006d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00117dd8  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000d95  00000000  00000000  00117e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006670  00000000  00000000  00118bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007618 	.word	0x08007618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08007618 	.word	0x08007618

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b2b      	ldr	r3, [pc, #172]	@ (8000648 <MX_GPIO_Init+0xc8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a2a      	ldr	r2, [pc, #168]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a23      	ldr	r2, [pc, #140]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_GPIO_Init+0xc8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_4_Pin|DC_4_Pin|RES_4_Pin|RES_2_Pin
 80005ea:	2200      	movs	r2, #0
 80005ec:	f24f 4106 	movw	r1, #62470	@ 0xf406
 80005f0:	4816      	ldr	r0, [pc, #88]	@ (800064c <MX_GPIO_Init+0xcc>)
 80005f2:	f004 fb89 	bl	8004d08 <HAL_GPIO_WritePin>
                          |DC_2_Pin|CS_2_Pin|CS_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_1_Pin|RES_1_Pin|RES_3_Pin|DC_3_Pin
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 80005fc:	4814      	ldr	r0, [pc, #80]	@ (8000650 <MX_GPIO_Init+0xd0>)
 80005fe:	f004 fb83 	bl	8004d08 <HAL_GPIO_WritePin>
                          |CS_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_4_Pin|DC_4_Pin|RES_4_Pin|RES_2_Pin
 8000602:	f24f 4306 	movw	r3, #62470	@ 0xf406
 8000606:	60fb      	str	r3, [r7, #12]
                          |DC_2_Pin|CS_2_Pin|CS_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	4619      	mov	r1, r3
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <MX_GPIO_Init+0xcc>)
 800061c:	f004 f9f0 	bl	8004a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DC_1_Pin|RES_1_Pin|RES_3_Pin|DC_3_Pin
 8000620:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000624:	60fb      	str	r3, [r7, #12]
                          |CS_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_GPIO_Init+0xd0>)
 800063a:	f004 f9e1 	bl	8004a00 <HAL_GPIO_Init>

}
 800063e:	bf00      	nop
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020400 	.word	0x40020400
 8000650:	40020000 	.word	0x40020000

08000654 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f805 	bl	800068a <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    }
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 fb43 	bl	8000d4a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEED1Ev>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fb21 	bl	8000d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffeb 	bl	80006ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b0a1      	sub	sp, #132	@ 0x84
 8000708:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f003 ff3f 	bl	800458c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 fa8f 	bl	8000c30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f7ff ff35 	bl	8000580 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000716:	f002 faeb 	bl	8002cf0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800071a:	f003 fe93 	bl	8004444 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&single_byte, sizeof(single_byte));
 800071e:	2201      	movs	r2, #1
 8000720:	49bc      	ldr	r1, [pc, #752]	@ (8000a14 <main+0x310>)
 8000722:	48bd      	ldr	r0, [pc, #756]	@ (8000a18 <main+0x314>)
 8000724:	f005 fa5c 	bl	8005be0 <HAL_UART_Receive_IT>


  display1 = new OLED(&hspi1, CS_1_GPIO_Port, CS_1_Pin, DC_1_GPIO_Port, DC_1_Pin, RES_1_GPIO_Port, RES_1_Pin);
 8000728:	202c      	movs	r0, #44	@ 0x2c
 800072a:	f006 f97f 	bl	8006a2c <_Znwj>
 800072e:	4603      	mov	r3, r0
 8000730:	461c      	mov	r4, r3
 8000732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000736:	9303      	str	r3, [sp, #12]
 8000738:	4bb8      	ldr	r3, [pc, #736]	@ (8000a1c <main+0x318>)
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4bb6      	ldr	r3, [pc, #728]	@ (8000a1c <main+0x318>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800074a:	4ab5      	ldr	r2, [pc, #724]	@ (8000a20 <main+0x31c>)
 800074c:	49b5      	ldr	r1, [pc, #724]	@ (8000a24 <main+0x320>)
 800074e:	4620      	mov	r0, r4
 8000750:	f001 fb98 	bl	8001e84 <_ZN4OLEDC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 8000754:	4bb4      	ldr	r3, [pc, #720]	@ (8000a28 <main+0x324>)
 8000756:	601c      	str	r4, [r3, #0]
  display2 = new OLED(&hspi1, CS_2_GPIO_Port, CS_2_Pin, DC_2_GPIO_Port, DC_2_Pin, RES_2_GPIO_Port, RES_2_Pin);
 8000758:	202c      	movs	r0, #44	@ 0x2c
 800075a:	f006 f967 	bl	8006a2c <_Znwj>
 800075e:	4603      	mov	r3, r0
 8000760:	461c      	mov	r4, r3
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	9303      	str	r3, [sp, #12]
 8000768:	4bad      	ldr	r3, [pc, #692]	@ (8000a20 <main+0x31c>)
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	4bab      	ldr	r3, [pc, #684]	@ (8000a20 <main+0x31c>)
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800077a:	4aa9      	ldr	r2, [pc, #676]	@ (8000a20 <main+0x31c>)
 800077c:	49a9      	ldr	r1, [pc, #676]	@ (8000a24 <main+0x320>)
 800077e:	4620      	mov	r0, r4
 8000780:	f001 fb80 	bl	8001e84 <_ZN4OLEDC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 8000784:	4ba9      	ldr	r3, [pc, #676]	@ (8000a2c <main+0x328>)
 8000786:	601c      	str	r4, [r3, #0]
  display3 = new OLED(&hspi1, CS_3_GPIO_Port, CS_3_Pin, DC_3_GPIO_Port, DC_3_Pin, RES_3_GPIO_Port, RES_3_Pin);
 8000788:	202c      	movs	r0, #44	@ 0x2c
 800078a:	f006 f94f 	bl	8006a2c <_Znwj>
 800078e:	4603      	mov	r3, r0
 8000790:	461c      	mov	r4, r3
 8000792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000796:	9303      	str	r3, [sp, #12]
 8000798:	4ba0      	ldr	r3, [pc, #640]	@ (8000a1c <main+0x318>)
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	4b9e      	ldr	r3, [pc, #632]	@ (8000a1c <main+0x318>)
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	4a9c      	ldr	r2, [pc, #624]	@ (8000a1c <main+0x318>)
 80007ac:	499d      	ldr	r1, [pc, #628]	@ (8000a24 <main+0x320>)
 80007ae:	4620      	mov	r0, r4
 80007b0:	f001 fb68 	bl	8001e84 <_ZN4OLEDC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 80007b4:	4b9e      	ldr	r3, [pc, #632]	@ (8000a30 <main+0x32c>)
 80007b6:	601c      	str	r4, [r3, #0]
  display4 = new OLED(&hspi1, CS_4_GPIO_Port, CS_4_Pin, DC_4_GPIO_Port, DC_4_Pin, RES_4_GPIO_Port, RES_4_Pin);
 80007b8:	202c      	movs	r0, #44	@ 0x2c
 80007ba:	f006 f937 	bl	8006a2c <_Znwj>
 80007be:	4603      	mov	r3, r0
 80007c0:	461c      	mov	r4, r3
 80007c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c6:	9303      	str	r3, [sp, #12]
 80007c8:	4b95      	ldr	r3, [pc, #596]	@ (8000a20 <main+0x31c>)
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	2304      	movs	r3, #4
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	4b93      	ldr	r3, [pc, #588]	@ (8000a20 <main+0x31c>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2302      	movs	r3, #2
 80007d6:	4a92      	ldr	r2, [pc, #584]	@ (8000a20 <main+0x31c>)
 80007d8:	4992      	ldr	r1, [pc, #584]	@ (8000a24 <main+0x320>)
 80007da:	4620      	mov	r0, r4
 80007dc:	f001 fb52 	bl	8001e84 <_ZN4OLEDC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 80007e0:	4b94      	ldr	r3, [pc, #592]	@ (8000a34 <main+0x330>)
 80007e2:	601c      	str	r4, [r3, #0]


  oleds_map["D1"] = display1;
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 f930 	bl	8006a4e <_ZNSaIcEC1Ev>
 80007ee:	f107 0218 	add.w	r2, r7, #24
 80007f2:	463b      	mov	r3, r7
 80007f4:	4990      	ldr	r1, [pc, #576]	@ (8000a38 <main+0x334>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 fc98 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	488e      	ldr	r0, [pc, #568]	@ (8000a3c <main+0x338>)
 8000802:	f000 fac3 	bl	8000d8c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>
 8000806:	4602      	mov	r2, r0
 8000808:	4b87      	ldr	r3, [pc, #540]	@ (8000a28 <main+0x324>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	463b      	mov	r3, r7
 8000810:	4618      	mov	r0, r3
 8000812:	f006 fab4 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4618      	mov	r0, r3
 800081c:	f006 f918 	bl	8006a50 <_ZNSaIcED1Ev>
  oleds_map["D2"] = display2;
 8000820:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000824:	4618      	mov	r0, r3
 8000826:	f006 f912 	bl	8006a4e <_ZNSaIcEC1Ev>
 800082a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4983      	ldr	r1, [pc, #524]	@ (8000a40 <main+0x33c>)
 8000834:	4618      	mov	r0, r3
 8000836:	f006 fc79 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	487e      	ldr	r0, [pc, #504]	@ (8000a3c <main+0x338>)
 8000842:	f000 faa3 	bl	8000d8c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>
 8000846:	4602      	mov	r2, r0
 8000848:	4b78      	ldr	r3, [pc, #480]	@ (8000a2c <main+0x328>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fa93 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000858:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800085c:	4618      	mov	r0, r3
 800085e:	f006 f8f7 	bl	8006a50 <_ZNSaIcED1Ev>
  oleds_map["D3"] = display3;
 8000862:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f006 f8f1 	bl	8006a4e <_ZNSaIcEC1Ev>
 800086c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000870:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000874:	4973      	ldr	r1, [pc, #460]	@ (8000a44 <main+0x340>)
 8000876:	4618      	mov	r0, r3
 8000878:	f006 fc58 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800087c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000880:	4619      	mov	r1, r3
 8000882:	486e      	ldr	r0, [pc, #440]	@ (8000a3c <main+0x338>)
 8000884:	f000 fa82 	bl	8000d8c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>
 8000888:	4602      	mov	r2, r0
 800088a:	4b69      	ldr	r3, [pc, #420]	@ (8000a30 <main+0x32c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000894:	4618      	mov	r0, r3
 8000896:	f006 fa72 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800089a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 f8d6 	bl	8006a50 <_ZNSaIcED1Ev>
  oleds_map["D4"] = display4;
 80008a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 f8d0 	bl	8006a4e <_ZNSaIcEC1Ev>
 80008ae:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80008b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008b6:	4964      	ldr	r1, [pc, #400]	@ (8000a48 <main+0x344>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f006 fc37 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80008be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008c2:	4619      	mov	r1, r3
 80008c4:	485d      	ldr	r0, [pc, #372]	@ (8000a3c <main+0x338>)
 80008c6:	f000 fa61 	bl	8000d8c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b59      	ldr	r3, [pc, #356]	@ (8000a34 <main+0x330>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 fa51 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008e0:	4618      	mov	r0, r3
 80008e2:	f006 f8b5 	bl	8006a50 <_ZNSaIcED1Ev>


  display1->init();
 80008e6:	4b50      	ldr	r3, [pc, #320]	@ (8000a28 <main+0x324>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fbd5 	bl	800209a <_ZN4OLED4initEv>
  display2->init();
 80008f0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a2c <main+0x328>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fbd0 	bl	800209a <_ZN4OLED4initEv>
  display3->init();
 80008fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000a30 <main+0x32c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fbcb 	bl	800209a <_ZN4OLED4initEv>
  display4->init();
 8000904:	4b4b      	ldr	r3, [pc, #300]	@ (8000a34 <main+0x330>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fbc6 	bl	800209a <_ZN4OLED4initEv>

  display1->addSegment(go_bitmap, 14, 2, x_default, y_default);
 800090e:	4b46      	ldr	r3, [pc, #280]	@ (8000a28 <main+0x324>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	233c      	movs	r3, #60	@ 0x3c
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	2364      	movs	r3, #100	@ 0x64
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2302      	movs	r3, #2
 800091c:	220e      	movs	r2, #14
 800091e:	494b      	ldr	r1, [pc, #300]	@ (8000a4c <main+0x348>)
 8000920:	f001 faf0 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display1->addSegment(one_bitmap, 14, 2, x_default, y_default);
 8000924:	4b40      	ldr	r3, [pc, #256]	@ (8000a28 <main+0x324>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	233c      	movs	r3, #60	@ 0x3c
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2364      	movs	r3, #100	@ 0x64
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	220e      	movs	r2, #14
 8000934:	4946      	ldr	r1, [pc, #280]	@ (8000a50 <main+0x34c>)
 8000936:	f001 fae5 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display1->addSegment(two_bitmap, 14, 2, x_default, y_default);
 800093a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a28 <main+0x324>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	233c      	movs	r3, #60	@ 0x3c
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2364      	movs	r3, #100	@ 0x64
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2302      	movs	r3, #2
 8000948:	220e      	movs	r2, #14
 800094a:	4942      	ldr	r1, [pc, #264]	@ (8000a54 <main+0x350>)
 800094c:	f001 fada 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display1->addSegment(three_bitmap, 14, 2, x_default, y_default);
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <main+0x324>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	233c      	movs	r3, #60	@ 0x3c
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	2364      	movs	r3, #100	@ 0x64
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2302      	movs	r3, #2
 800095e:	220e      	movs	r2, #14
 8000960:	493d      	ldr	r1, [pc, #244]	@ (8000a58 <main+0x354>)
 8000962:	f001 facf 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display1->addSegment(four_bitmap, 14, 2, x_default, y_default);
 8000966:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <main+0x324>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	233c      	movs	r3, #60	@ 0x3c
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2364      	movs	r3, #100	@ 0x64
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2302      	movs	r3, #2
 8000974:	220e      	movs	r2, #14
 8000976:	4939      	ldr	r1, [pc, #228]	@ (8000a5c <main+0x358>)
 8000978:	f001 fac4 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display1->addSegment(five_bitmap, 14, 2, x_default, y_default);
 800097c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <main+0x324>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	233c      	movs	r3, #60	@ 0x3c
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2302      	movs	r3, #2
 800098a:	220e      	movs	r2, #14
 800098c:	4934      	ldr	r1, [pc, #208]	@ (8000a60 <main+0x35c>)
 800098e:	f001 fab9 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display1->addSegment(ready_bitmap, 14, 2, x_default, y_default);
 8000992:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <main+0x324>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	233c      	movs	r3, #60	@ 0x3c
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	2364      	movs	r3, #100	@ 0x64
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2302      	movs	r3, #2
 80009a0:	220e      	movs	r2, #14
 80009a2:	4930      	ldr	r1, [pc, #192]	@ (8000a64 <main+0x360>)
 80009a4:	f001 faae 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>

  display2->addSegment(go_bitmap, 14, 2, x_default, y_default);
 80009a8:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <main+0x328>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	233c      	movs	r3, #60	@ 0x3c
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	2364      	movs	r3, #100	@ 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2302      	movs	r3, #2
 80009b6:	220e      	movs	r2, #14
 80009b8:	4924      	ldr	r1, [pc, #144]	@ (8000a4c <main+0x348>)
 80009ba:	f001 faa3 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display2->addSegment(one_bitmap, 14, 2, x_default, y_default);
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <main+0x328>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	233c      	movs	r3, #60	@ 0x3c
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	2364      	movs	r3, #100	@ 0x64
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2302      	movs	r3, #2
 80009cc:	220e      	movs	r2, #14
 80009ce:	4920      	ldr	r1, [pc, #128]	@ (8000a50 <main+0x34c>)
 80009d0:	f001 fa98 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display2->addSegment(two_bitmap, 14, 2, x_default, y_default);
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <main+0x328>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	233c      	movs	r3, #60	@ 0x3c
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	2364      	movs	r3, #100	@ 0x64
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2302      	movs	r3, #2
 80009e2:	220e      	movs	r2, #14
 80009e4:	491b      	ldr	r1, [pc, #108]	@ (8000a54 <main+0x350>)
 80009e6:	f001 fa8d 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display2->addSegment(three_bitmap, 14, 2, x_default, y_default);
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <main+0x328>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	233c      	movs	r3, #60	@ 0x3c
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2364      	movs	r3, #100	@ 0x64
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2302      	movs	r3, #2
 80009f8:	220e      	movs	r2, #14
 80009fa:	4917      	ldr	r1, [pc, #92]	@ (8000a58 <main+0x354>)
 80009fc:	f001 fa82 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display2->addSegment(four_bitmap, 14, 2, x_default, y_default);
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <main+0x328>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	233c      	movs	r3, #60	@ 0x3c
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2364      	movs	r3, #100	@ 0x64
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	220e      	movs	r2, #14
 8000a10:	e02a      	b.n	8000a68 <main+0x364>
 8000a12:	bf00      	nop
 8000a14:	20000518 	.word	0x20000518
 8000a18:	20000564 	.word	0x20000564
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400
 8000a24:	200000a0 	.word	0x200000a0
 8000a28:	20000078 	.word	0x20000078
 8000a2c:	2000007c 	.word	0x2000007c
 8000a30:	20000080 	.word	0x20000080
 8000a34:	20000084 	.word	0x20000084
 8000a38:	08007630 	.word	0x08007630
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	08007634 	.word	0x08007634
 8000a44:	08007638 	.word	0x08007638
 8000a48:	0800763c 	.word	0x0800763c
 8000a4c:	08008628 	.word	0x08008628
 8000a50:	08008010 	.word	0x08008010
 8000a54:	0800831c 	.word	0x0800831c
 8000a58:	080076ec 	.word	0x080076ec
 8000a5c:	080079f8 	.word	0x080079f8
 8000a60:	08007d04 	.word	0x08007d04
 8000a64:	08008934 	.word	0x08008934
 8000a68:	4966      	ldr	r1, [pc, #408]	@ (8000c04 <main+0x500>)
 8000a6a:	f001 fa4b 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display2->addSegment(five_bitmap, 14, 2, x_default, y_default);
 8000a6e:	4b66      	ldr	r3, [pc, #408]	@ (8000c08 <main+0x504>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	233c      	movs	r3, #60	@ 0x3c
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2364      	movs	r3, #100	@ 0x64
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	220e      	movs	r2, #14
 8000a7e:	4963      	ldr	r1, [pc, #396]	@ (8000c0c <main+0x508>)
 8000a80:	f001 fa40 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display2->addSegment(ready_bitmap, 14, 2, x_default, y_default);
 8000a84:	4b60      	ldr	r3, [pc, #384]	@ (8000c08 <main+0x504>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	233c      	movs	r3, #60	@ 0x3c
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2364      	movs	r3, #100	@ 0x64
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2302      	movs	r3, #2
 8000a92:	220e      	movs	r2, #14
 8000a94:	495e      	ldr	r1, [pc, #376]	@ (8000c10 <main+0x50c>)
 8000a96:	f001 fa35 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>

  display3->addSegment(go_bitmap, 14, 2, x_default, y_default);
 8000a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8000c14 <main+0x510>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	233c      	movs	r3, #60	@ 0x3c
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	2364      	movs	r3, #100	@ 0x64
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	220e      	movs	r2, #14
 8000aaa:	495b      	ldr	r1, [pc, #364]	@ (8000c18 <main+0x514>)
 8000aac:	f001 fa2a 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display3->addSegment(one_bitmap, 14, 2, x_default, y_default);
 8000ab0:	4b58      	ldr	r3, [pc, #352]	@ (8000c14 <main+0x510>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	233c      	movs	r3, #60	@ 0x3c
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2302      	movs	r3, #2
 8000abe:	220e      	movs	r2, #14
 8000ac0:	4956      	ldr	r1, [pc, #344]	@ (8000c1c <main+0x518>)
 8000ac2:	f001 fa1f 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display3->addSegment(two_bitmap, 14, 2, x_default, y_default);
 8000ac6:	4b53      	ldr	r3, [pc, #332]	@ (8000c14 <main+0x510>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	233c      	movs	r3, #60	@ 0x3c
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	2364      	movs	r3, #100	@ 0x64
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	4952      	ldr	r1, [pc, #328]	@ (8000c20 <main+0x51c>)
 8000ad8:	f001 fa14 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display3->addSegment(three_bitmap, 14, 2, x_default, y_default);
 8000adc:	4b4d      	ldr	r3, [pc, #308]	@ (8000c14 <main+0x510>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	233c      	movs	r3, #60	@ 0x3c
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	2364      	movs	r3, #100	@ 0x64
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	220e      	movs	r2, #14
 8000aec:	494d      	ldr	r1, [pc, #308]	@ (8000c24 <main+0x520>)
 8000aee:	f001 fa09 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display3->addSegment(four_bitmap, 14, 2, x_default, y_default);
 8000af2:	4b48      	ldr	r3, [pc, #288]	@ (8000c14 <main+0x510>)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	233c      	movs	r3, #60	@ 0x3c
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	2364      	movs	r3, #100	@ 0x64
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2302      	movs	r3, #2
 8000b00:	220e      	movs	r2, #14
 8000b02:	4940      	ldr	r1, [pc, #256]	@ (8000c04 <main+0x500>)
 8000b04:	f001 f9fe 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display3->addSegment(five_bitmap, 14, 2, x_default, y_default);
 8000b08:	4b42      	ldr	r3, [pc, #264]	@ (8000c14 <main+0x510>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	233c      	movs	r3, #60	@ 0x3c
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2364      	movs	r3, #100	@ 0x64
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2302      	movs	r3, #2
 8000b16:	220e      	movs	r2, #14
 8000b18:	493c      	ldr	r1, [pc, #240]	@ (8000c0c <main+0x508>)
 8000b1a:	f001 f9f3 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display3->addSegment(ready_bitmap, 14, 2, x_default, y_default);
 8000b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c14 <main+0x510>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	233c      	movs	r3, #60	@ 0x3c
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	2364      	movs	r3, #100	@ 0x64
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	220e      	movs	r2, #14
 8000b2e:	4938      	ldr	r1, [pc, #224]	@ (8000c10 <main+0x50c>)
 8000b30:	f001 f9e8 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>

  display4->addSegment(go_bitmap, 14, 2, x_default, y_default);
 8000b34:	4b3c      	ldr	r3, [pc, #240]	@ (8000c28 <main+0x524>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	233c      	movs	r3, #60	@ 0x3c
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	2364      	movs	r3, #100	@ 0x64
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2302      	movs	r3, #2
 8000b42:	220e      	movs	r2, #14
 8000b44:	4934      	ldr	r1, [pc, #208]	@ (8000c18 <main+0x514>)
 8000b46:	f001 f9dd 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display4->addSegment(one_bitmap, 14, 2, x_default, y_default);
 8000b4a:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <main+0x524>)
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	233c      	movs	r3, #60	@ 0x3c
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2364      	movs	r3, #100	@ 0x64
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2302      	movs	r3, #2
 8000b58:	220e      	movs	r2, #14
 8000b5a:	4930      	ldr	r1, [pc, #192]	@ (8000c1c <main+0x518>)
 8000b5c:	f001 f9d2 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display4->addSegment(two_bitmap, 14, 2, x_default, y_default);
 8000b60:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <main+0x524>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	233c      	movs	r3, #60	@ 0x3c
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	2364      	movs	r3, #100	@ 0x64
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	220e      	movs	r2, #14
 8000b70:	492b      	ldr	r1, [pc, #172]	@ (8000c20 <main+0x51c>)
 8000b72:	f001 f9c7 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display4->addSegment(three_bitmap, 14, 2, x_default, y_default);
 8000b76:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <main+0x524>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	233c      	movs	r3, #60	@ 0x3c
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	2364      	movs	r3, #100	@ 0x64
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2302      	movs	r3, #2
 8000b84:	220e      	movs	r2, #14
 8000b86:	4927      	ldr	r1, [pc, #156]	@ (8000c24 <main+0x520>)
 8000b88:	f001 f9bc 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display4->addSegment(four_bitmap, 14, 2, x_default, y_default);
 8000b8c:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <main+0x524>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	233c      	movs	r3, #60	@ 0x3c
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	220e      	movs	r2, #14
 8000b9c:	4919      	ldr	r1, [pc, #100]	@ (8000c04 <main+0x500>)
 8000b9e:	f001 f9b1 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display4->addSegment(five_bitmap, 14, 2, x_default, y_default);
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <main+0x524>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	233c      	movs	r3, #60	@ 0x3c
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	2364      	movs	r3, #100	@ 0x64
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	220e      	movs	r2, #14
 8000bb2:	4916      	ldr	r1, [pc, #88]	@ (8000c0c <main+0x508>)
 8000bb4:	f001 f9a6 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
  display4->addSegment(ready_bitmap, 14, 2, x_default, y_default);
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <main+0x524>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	233c      	movs	r3, #60	@ 0x3c
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	2364      	movs	r3, #100	@ 0x64
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	220e      	movs	r2, #14
 8000bc8:	4911      	ldr	r1, [pc, #68]	@ (8000c10 <main+0x50c>)
 8000bca:	f001 f99b 	bl	8001f04 <_ZN4OLED10addSegmentEPKhhhhh>
//  display2->addSegment(two_bitmap, 14, 2, x_default, y_default);
//  display2->addSegment(three_bitmap, 14, 2, x_default, y_default);
//  display2->addSegment(four_bitmap, 14, 2, x_default, y_default);
//  display2->addSegment(five_bitmap, 14, 2, x_default, y_default);

display1->setSegment(1);
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <main+0x528>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 f9fe 	bl	8001fd6 <_ZN4OLED10setSegmentEh>
display2->setSegment(2);
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <main+0x504>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2102      	movs	r1, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 f9f8 	bl	8001fd6 <_ZN4OLED10setSegmentEh>
display3->setSegment(3);
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <main+0x510>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2103      	movs	r1, #3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 f9f2 	bl	8001fd6 <_ZN4OLED10setSegmentEh>
display4->setSegment(4);
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <main+0x524>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 f9ec 	bl	8001fd6 <_ZN4OLED10setSegmentEh>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uart_CmdHandler();
 8000bfe:	f002 fe5d 	bl	80038bc <_Z15uart_CmdHandlerv>
 8000c02:	e7fc      	b.n	8000bfe <main+0x4fa>
 8000c04:	080079f8 	.word	0x080079f8
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	08007d04 	.word	0x08007d04
 8000c10:	08008934 	.word	0x08008934
 8000c14:	20000080 	.word	0x20000080
 8000c18:	08008628 	.word	0x08008628
 8000c1c:	08008010 	.word	0x08008010
 8000c20:	0800831c 	.word	0x0800831c
 8000c24:	080076ec 	.word	0x080076ec
 8000c28:	20000084 	.word	0x20000084
 8000c2c:	20000078 	.word	0x20000078

08000c30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	@ 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	@ 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 fc0a 	bl	8007458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <_Z18SystemClock_Configv+0xdc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000d0c <_Z18SystemClock_Configv+0xdc>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <_Z18SystemClock_Configv+0xdc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <_Z18SystemClock_Configv+0xe0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a25      	ldr	r2, [pc, #148]	@ (8000d10 <_Z18SystemClock_Configv+0xe0>)
 8000c7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <_Z18SystemClock_Configv+0xe0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ca4:	2354      	movs	r3, #84	@ 0x54
 8000ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 f841 	bl	8004d3c <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2301      	movne	r3, #1
 8000cc2:	2300      	moveq	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000cca:	f000 f823 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 fa9e 	bl	800522c <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000d00:	f000 f808 	bl	8000d14 <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3750      	adds	r7, #80	@ 0x50
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f88f 	bl	8000e4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEC1Ev>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f897 	bl	8000e64 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fc96 	bl	800066c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f891 	bl	8000e7a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEED1Ev>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f8b0 	bl	8000ed0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4619      	mov	r1, r3
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f88b 	bl	8000e90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc9a 	bl	80006b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b08b      	sub	sp, #44	@ 0x2c
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f8a5 	bl	8000ee8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f8af 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f8b2 	bl	8000f20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d112      	bne.n	8000de8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0x5c>
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f8c0 	bl	8000f48 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv>
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f8c8 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f8ce 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0x60>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0x62>
 8000dec:	2300      	movs	r3, #0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01f      	beq.n	8000e32 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000df2:	687c      	ldr	r4, [r7, #4]
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f8f8 	bl	8000ff4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1ERKSt17_Rb_tree_iteratorISA_E>
					std::forward_as_tuple(std::move(__k)),
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f000 f8c9 	bl	8000f9c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000e0a:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f8dd 	bl	8000fd2 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
 8000e18:	f107 0218 	add.w	r2, r7, #24
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4613      	mov	r3, r2
 8000e24:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEixEOS5_+0xbc>)
 8000e26:	6979      	ldr	r1, [r7, #20]
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f000 f8f3 	bl	8001014 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60bb      	str	r3, [r7, #8]
					std::tuple<>());
	return (*__i).second;
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f893 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	3318      	adds	r3, #24
      }
 8000e40:	4618      	mov	r0, r3
 8000e42:	3724      	adds	r7, #36	@ 0x24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	08008c40 	.word	0x08008c40

08000e4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f923 	bl	80010a0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEC1Ev>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
      { }
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000e9a:	e011      	b.n	8000ec0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0x30>
	{
	  _M_erase(_S_right(__x));
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	f000 f90a 	bl	80010b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fff2 	bl	8000e90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
	  _Link_type __y = _S_left(__x);
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f000 f90e 	bl	80010ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000eb2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000eb4:	6839      	ldr	r1, [r7, #0]
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f915 	bl	80010e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	  __x = __y;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1ea      	bne.n	8000e9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0xc>
	}
    }
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f915 	bl	8001108 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE9_M_mbeginEv>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f912 	bl	8001120 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f91c 	bl	800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv>:
      key_comp() const
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f90c 	bl	8001170 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv>
 8000f58:	bf00      	nop
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}

08000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f909 	bl	8001186 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE9_M_valptrEv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f000 f908 	bl	80011a2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f91b 	bl	80011fe <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f000 f8f0 	bl	80011c2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f8f6 	bl	80011d8 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1ERKSt17_Rb_tree_iteratorISA_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af02      	add	r7, sp, #8
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f8fb 	bl	800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001028:	4604      	mov	r4, r0
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f000 f902 	bl	8001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001030:	4605      	mov	r5, r0
 8001032:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001034:	f000 f909 	bl	800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001038:	4603      	mov	r3, r0
 800103a:	f107 001c 	add.w	r0, r7, #28
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	462b      	mov	r3, r5
 8001042:	4622      	mov	r2, r4
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	f000 f90b 	bl	8001260 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEERSG_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fa61 	bl	8001516 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node6_M_keyEv>
 8001054:	4603      	mov	r3, r0
 8001056:	f107 0014 	add.w	r0, r7, #20
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	f000 f937 	bl	80012d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_>
	if (__res.second)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8001068:	f107 001c 	add.w	r0, r7, #28
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001074:	f000 fa5d 	bl	8001532 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSJ_E>
 8001078:	4604      	mov	r4, r0
 800107a:	e007      	b.n	800108c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_+0x78>
	return iterator(__res.first);
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fa6d 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
 800108a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f908 	bl	80012a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeD1Ev>
 8001096:	4623      	mov	r3, r4
 8001098:	4618      	mov	r0, r3
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bdb0      	pop	{r4, r5, r7, pc}

080010a0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fa45 	bl	8001582 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>
	_M_put_node(__p);
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fa56 	bl	80015ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>
      }
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fed0 	bl	8000ed0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8001130:	4604      	mov	r4, r0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fa4c 	bl	80015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8001138:	4602      	mov	r2, r0
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4621      	mov	r1, r4
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fa52 	bl	80015e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}

0800114e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1d1a      	adds	r2, r3, #4
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9ff 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv>:
      key_comp() const
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8001178:	bf00      	nop
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE9_M_valptrEv>:
      _M_valptr()
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3310      	adds	r3, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa59 	bl	800164a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE6_M_ptrEv>
 8001198:	4603      	mov	r3, r0
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f005 ff20 	bl	8006ff4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80011b4:	4603      	mov	r3, r0
 80011b6:	0fdb      	lsrs	r3, r3, #31
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80011e2:	687c      	ldr	r4, [r7, #4]
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	f7ff ffec 	bl	80011c2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4620      	mov	r0, r4
 80011f0:	f000 fa37 	bl	8001662 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	601a      	str	r2, [r3, #0]
      { }
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEERSG_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffd2 	bl	800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800127a:	4604      	mov	r4, r0
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ffd9 	bl	8001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001282:	4605      	mov	r5, r0
 8001284:	6a38      	ldr	r0, [r7, #32]
 8001286:	f7ff ffe0 	bl	800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800128a:	4603      	mov	r3, r0
 800128c:	462a      	mov	r2, r5
 800128e:	4621      	mov	r1, r4
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f000 f9f9 	bl	8001688 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_>
 8001296:	4602      	mov	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
	  { }
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}

080012a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f7ff ff10 	bl	80010e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	}
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b08d      	sub	sp, #52	@ 0x34
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f9f4 	bl	80016ce <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE13_M_const_castEv>
 80012e6:	4603      	mov	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80012ea:	69bc      	ldr	r4, [r7, #24]
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f000 f96f 	bl	80015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	429c      	cmp	r4, r3
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d030      	beq.n	8001364 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x94>
	  if (size() > 0
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f000 f9f4 	bl	80016f0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>
 8001308:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800130a:	2b00      	cmp	r3, #0
 800130c:	d013      	beq.n	8001336 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x66>
 800130e:	68bc      	ldr	r4, [r7, #8]
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f000 f9f9 	bl	8001708 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001316:	4603      	mov	r3, r0
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fa00 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001320:	4603      	mov	r3, r0
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff fe29 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x66>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x68>
 8001336:	2300      	movs	r3, #0
	  if (size() > 0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00c      	beq.n	8001356 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f000 f9e1 	bl	8001708 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001346:	4602      	mov	r2, r0
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f9f2 	bl	8001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001354:	e0db      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fa00 	bl	8001762 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
 8001362:	e0d4      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001364:	68bc      	ldr	r4, [r7, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f9d9 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fe02 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d057      	beq.n	8001430 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x160>
	  iterator __before = __pos;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001384:	69bc      	ldr	r4, [r7, #24]
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	f000 fa70 	bl	800186c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>
 800138c:	4603      	mov	r3, r0
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429c      	cmp	r4, r3
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00d      	beq.n	80013ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800139e:	68b8      	ldr	r0, [r7, #8]
 80013a0:	f000 fa64 	bl	800186c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>
 80013a4:	4604      	mov	r4, r0
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f000 fa60 	bl	800186c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4621      	mov	r1, r4
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 fa66 	bl	8001884 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013b8:	e0a9      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013ba:	68bc      	ldr	r4, [r7, #8]
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fa78 	bl	80018b6 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEmmEv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f9a8 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013d0:	4603      	mov	r3, r0
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fdd1 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01f      	beq.n	8001422 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe66 	bl	80010b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x140>
		return _Res(0, __before._M_node);
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	f107 0214 	add.w	r2, r7, #20
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4619      	mov	r1, r3
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f995 	bl	8001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 800140e:	e07e      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001410:	f107 0218 	add.w	r2, r7, #24
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	4619      	mov	r1, r3
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fa32 	bl	8001884 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001420:	e075      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f99a 	bl	8001762 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
 800142e:	e06e      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001430:	68bc      	ldr	r4, [r7, #8]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f973 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800143a:	4603      	mov	r3, r0
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff fd9c 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d056      	beq.n	80014fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x22a>
	  iterator __after = __pos;
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001450:	69bc      	ldr	r4, [r7, #24]
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f000 f958 	bl	8001708 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001458:	4603      	mov	r3, r0
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	429c      	cmp	r4, r3
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00c      	beq.n	8001484 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f000 f94a 	bl	8001708 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>
 8001474:	4602      	mov	r2, r0
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f95b 	bl	8001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001482:	e044      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001484:	68bc      	ldr	r4, [r7, #8]
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fa24 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8001490:	4603      	mov	r3, r0
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f943 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fd6c 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01f      	beq.n	80014ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe01 	bl	80010b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf0c      	ite	eq
 80014ba:	2301      	moveq	r3, #1
 80014bc:	2300      	movne	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014c8:	f107 0218 	add.w	r2, r7, #24
 80014cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d0:	4619      	mov	r1, r3
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f930 	bl	8001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 80014d8:	e019      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80014da:	f107 0210 	add.w	r2, r7, #16
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 f9cd 	bl	8001884 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80014ea:	e010      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f935 	bl	8001762 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
 80014f8:	e009      	b.n	800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014fe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f915 	bl	8001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	3734      	adds	r7, #52	@ 0x34
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}

08001516 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f9e9 	bl	80018fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8001528:	4603      	mov	r3, r0
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSJ_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f000 f9e8 	bl	8001920 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E>
 8001550:	4603      	mov	r3, r0
 8001552:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
	  return __it;
 800155a:	697b      	ldr	r3, [r7, #20]
	}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001582:	b590      	push	{r4, r7, lr}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fa04 	bl	800199a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8001592:	4604      	mov	r4, r0
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff fdf6 	bl	8001186 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE9_M_valptrEv>
 800159a:	4603      	mov	r3, r0
 800159c:	4619      	mov	r1, r3
 800159e:	4620      	mov	r0, r4
 80015a0:	f000 fa06 	bl	80019b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE7destroyISB_EEvRSD_PT_>
      }
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f9ef 	bl	800199a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80015bc:	4603      	mov	r3, r0
 80015be:	2201      	movs	r2, #1
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fa01 	bl	80019ca <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE10deallocateERSD_PSC_j>
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3304      	adds	r3, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80015f6:	e01a      	b.n	800162e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80015f8:	68fc      	ldr	r4, [r7, #12]
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f000 f97d 	bl	80018fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8001600:	4603      	mov	r3, r0
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fcb9 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800160c:	4603      	mov	r3, r0
 800160e:	f083 0301 	eor.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	68b8      	ldr	r0, [r7, #8]
 800161e:	f7ff fd56 	bl	80010ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001622:	60b8      	str	r0, [r7, #8]
 8001624:	e003      	b.n	800162e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff fd45 	bl	80010b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 800162c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e1      	bne.n	80015f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff92 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
 8001640:	697b      	ldr	r3, [r7, #20]
    }
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}

0800164a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f9c8 	bl	80019e8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE7_M_addrEv>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8001662:	b590      	push	{r4, r7, lr}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800166c:	687c      	ldr	r4, [r7, #4]
 800166e:	6838      	ldr	r0, [r7, #0]
 8001670:	f7ff fda7 	bl	80011c2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001674:	4603      	mov	r3, r0
 8001676:	4619      	mov	r1, r3
 8001678:	4620      	mov	r0, r4
 800167a:	f000 f9c0 	bl	80019fe <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f9c1 	bl	8001a1e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>
 800169c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f7ff fdbd 	bl	800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80016a4:	4604      	mov	r4, r0
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fdc4 	bl	8001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80016ac:	4605      	mov	r5, r0
 80016ae:	6838      	ldr	r0, [r7, #0]
 80016b0:	f7ff fdcb 	bl	800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80016b4:	4603      	mov	r3, r0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	462b      	mov	r3, r5
 80016ba:	4622      	mov	r2, r4
 80016bc:	6979      	ldr	r1, [r7, #20]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f9be 	bl	8001a40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_>
	  return __tmp;
 80016c4:	697b      	ldr	r3, [r7, #20]
	}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdb0      	pop	{r4, r5, r7, pc}

080016ce <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff3f 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3310      	adds	r3, #16
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f8e6 	bl	80018fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001762:	b590      	push	{r4, r7, lr}
 8001764:	b08b      	sub	sp, #44	@ 0x2c
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f7ff fbae 	bl	8000ed0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8001774:	4603      	mov	r3, r0
 8001776:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f7ff ff29 	bl	80015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 800177e:	4603      	mov	r3, r0
 8001780:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8001788:	e01f      	b.n	80017ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x68>
	  __y = __x;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800178e:	68bc      	ldr	r4, [r7, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f8b1 	bl	80018fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fbed 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80017aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x5c>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fc8a 	bl	80010ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 80017ba:	4603      	mov	r3, r0
 80017bc:	e004      	b.n	80017c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x66>
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc78 	bl	80010b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 80017c6:	4603      	mov	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1dc      	bne.n	800178a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x28>
      iterator __j = iterator(__y);
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fec3 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80017de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01d      	beq.n	8001822 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f000 f957 	bl	8001a9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 80017ec:	4603      	mov	r3, r0
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	f107 021c 	add.w	r2, r7, #28
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fb90 	bl	8000f20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8001806:	f107 0214 	add.w	r2, r7, #20
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	4619      	mov	r1, r3
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f953 	bl	8001abc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEERS1_Lb1EEEOT_OT0_>
 8001816:	e025      	b.n	8001864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f84a 	bl	80018b6 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001822:	68bc      	ldr	r4, [r7, #8]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff7a 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800182c:	4603      	mov	r3, r0
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4619      	mov	r1, r3
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fba3 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 800183e:	f107 0214 	add.w	r2, r7, #20
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	4619      	mov	r1, r3
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f937 	bl	8001abc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEERS1_Lb1EEEOT_OT0_>
 800184e:	e009      	b.n	8001864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	f107 0220 	add.w	r2, r7, #32
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff ff6a 	bl	8001738 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	372c      	adds	r7, #44	@ 0x2c
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	330c      	adds	r3, #12
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	f000 f92c 	bl	8001aee <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001896:	4603      	mov	r3, r0
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f925 	bl	8001aee <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80018a4:	4603      	mov	r3, r0
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 f91c 	bl	8006b00 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80018c8:	4602      	mov	r2, r0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
	return *this;
 80018ce:	687b      	ldr	r3, [r7, #4]
      }
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f005 f909 	bl	8006afc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80018ea:	4602      	mov	r2, r0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]
	return *this;
 80018f0:	687b      	ldr	r3, [r7, #4]
      }
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>:
      _S_key(_Const_Link_type __x)
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8fe 	bl	8001b04 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE9_M_valptrEv>
 8001908:	4602      	mov	r2, r0
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f905 	bl	8001b20 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEclERKSA_>
 8001916:	4603      	mov	r3, r0
      }
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d117      	bne.n	8001964 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fe4b 	bl	80015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4293      	cmp	r3, r2
 8001940:	d010      	beq.n	8001964 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001942:	68fc      	ldr	r4, [r7, #12]
 8001944:	6838      	ldr	r0, [r7, #0]
 8001946:	f7ff ffd8 	bl	80018fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 800194a:	4605      	mov	r5, r0
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fee7 	bl	8001720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	4629      	mov	r1, r5
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fb10 	bl	8000f7e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x48>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E+0x4a>
 8001968:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800196a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001970:	7df8      	ldrb	r0, [r7, #23]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	f005 f8c5 	bl	8006b04 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fdea 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
 8001990:	693b      	ldr	r3, [r7, #16]
    }
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bdb0      	pop	{r4, r5, r7, pc}

0800199a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE7destroyISB_EEvRSD_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f8c8 	bl	8001b52 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE7destroyISB_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE10deallocateERSD_PSC_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f8c5 	bl	8001b6a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE10deallocateEPSC_j>
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE7_M_addrEv>:
      _M_addr() noexcept
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f7ff fbda 	bl	80011c2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>:
      _M_get_node()
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffb7 	bl	800199a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8ac 	bl	8001b8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE8allocateERSD_j>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af02      	add	r7, sp, #8
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4619      	mov	r1, r3
 8001a54:	202c      	movs	r0, #44	@ 0x2c
 8001a56:	f7fe fdfd 	bl	8000654 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff9d 	bl	800199a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8001a60:	4604      	mov	r4, r0
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f7ff fb8f 	bl	8001186 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE9_M_valptrEv>
 8001a68:	4605      	mov	r5, r0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fbd7 	bl	800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a70:	4606      	mov	r6, r0
 8001a72:	6838      	ldr	r0, [r7, #0]
 8001a74:	f7ff fbde 	bl	8001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001a78:	4680      	mov	r8, r0
 8001a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a7c:	f7ff fbe5 	bl	800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001a80:	4603      	mov	r3, r0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4643      	mov	r3, r8
 8001a86:	4632      	mov	r2, r6
 8001a88:	4629      	mov	r1, r5
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f000 f88e 	bl	8001bac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESJ_IJEEEEEvRSD_PT_DpOT0_>
	}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fd59 	bl	8001564 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEC1EPSt18_Rb_tree_node_base>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f000 f88d 	bl	8001be8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEOT_RNSt16remove_referenceISF_E4typeE>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f809 	bl	8001aee <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001adc:	4603      	mov	r3, r0
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE9_M_valptrEv>:
      _M_valptr() const
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f874 	bl	8001bfe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE6_M_ptrEv>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEclERKSA_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDED1Ev>:
    struct pair
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f005 f91b 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE7destroyISB_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7ff ffeb 	bl	8001b38 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDED1Ev>
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	222c      	movs	r2, #44	@ 0x2c
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	f004 ff51 	bl	8006a28 <_ZdlPvj>
      }
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE8allocateERSD_j>:
      allocate(allocator_type& __a, size_type __n)
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f83b 	bl	8001c18 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE8allocateEjPKv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESJ_IJEEEEEvRSD_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fb2f 	bl	800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f7ff fb36 	bl	8001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001bc8:	4605      	mov	r5, r0
 8001bca:	6a38      	ldr	r0, [r7, #32]
 8001bcc:	f7ff fb3d 	bl	800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f84a 	bl	8001c74 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESI_IJEEEEEvPT_DpOT0_>
	}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}

08001be8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f85c 	bl	8001cc4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE7_M_addrEv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f859 	bl	8001cdc <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE11_M_max_sizeEv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	bf8c      	ite	hi
 8001c32:	2301      	movhi	r3, #1
 8001c34:	2300      	movls	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE8allocateEjPKv+0x58>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001c4e:	f004 ffc0 	bl	8006bd2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001c52:	f004 ffbb 	bl	8006bcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	222c      	movs	r2, #44	@ 0x2c
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fee4 	bl	8006a2c <_Znwj>
 8001c64:	4603      	mov	r3, r0
      }
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	05d1745d 	.word	0x05d1745d

08001c74 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESI_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4619      	mov	r1, r3
 8001c86:	201c      	movs	r0, #28
 8001c88:	f7fe fce4 	bl	8000654 <_ZnwjPv>
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fac5 	bl	800121e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f7ff facd 	bl	8001234 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f985 	bl	8000fb2 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
 8001ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001caa:	f7ff face 	bl	800124a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001cae:	f107 0214 	add.w	r2, r7, #20
 8001cb2:	4633      	mov	r3, r6
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f000 f81e 	bl	8001cf8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE>
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEE7_M_addrEv>:
      _M_addr() const noexcept
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	02e8ba2e 	.word	0x02e8ba2e

08001cf8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	7239      	strb	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8001d06:	463a      	mov	r2, r7
 8001d08:	f88d 4000 	strb.w	r4, [sp]
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f805 	bl	8001d20 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEC1IJOS5_EJLj0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE>
      { }
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdb0      	pop	{r4, r5, r7, pc}

08001d20 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEC1IJOS5_EJLj0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8001d2e:	68fc      	ldr	r4, [r7, #12]
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f000 f811 	bl	8001d58 <_ZSt3getILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f81a 	bl	8001d72 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4620      	mov	r0, r4
 8001d44:	f004 fffc 	bl	8006d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
      { }
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}

08001d58 <_ZSt3getILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f810 	bl	8001d88 <_ZSt12__get_helperILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_ZSt12__get_helperILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f805 	bl	8001da0 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZNSt11_Tuple_implILj0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f805 	bl	8001dba <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_ZNSt10_Head_baseILj0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>:
      ~map() = default;
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffc0 	bl	8000d62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d102      	bne.n	8001e0c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::map<std::string, OLED*> oleds_map;
 8001e06:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e08:	f7fe fc6e 	bl	80006e8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001e1c:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e1e:	f7ff ffd8 	bl	8001dd2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000088 	.word	0x20000088

08001e30 <_GLOBAL__sub_I_display1>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ffd7 	bl	8001dec <_Z41__static_initialization_and_destruction_0ii>
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_GLOBAL__sub_D_display1>:
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ffcf 	bl	8001dec <_Z41__static_initialization_and_destruction_0ii>
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f994 	bl	8002188 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE12_Vector_implC1Ev>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZNSt6vectorI12bitmapStructSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ffeb 	bl	8001e50 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EEC1Ev>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZN4OLEDC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
 *      Author: user
 */

#include "oled.hpp"

OLED::OLED(SPI_HandleTypeDef* _spi_port, GPIO_TypeDef* _cs_port, uint16_t _cs_pin,
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	807b      	strh	r3, [r7, #2]
	 GPIO_TypeDef* _dc_port, uint16_t _dc_pin, GPIO_TypeDef* _reset_port, uint16_t _reset_pin)
	: spi_port(_spi_port), cs_port(_cs_port), cs_pin(_cs_pin),
	  dc_port(_dc_port), dc_pin(_dc_pin), reset_port(_reset_port), reset_pin(_reset_pin), current_segment(0)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
	: spi_port(_spi_port), cs_port(_cs_port), cs_pin(_cs_pin),
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	819a      	strh	r2, [r3, #12]
	  dc_port(_dc_port), dc_pin(_dc_pin), reset_port(_reset_port), reset_pin(_reset_pin), current_segment(0)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8bba      	ldrh	r2, [r7, #28]
 8001eb4:	829a      	strh	r2, [r3, #20]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ec0:	839a      	strh	r2, [r3, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3320      	adds	r3, #32
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffcf 	bl	8001e6a <_ZNSt6vectorI12bitmapStructSaIS0_EEC1Ev>
{}
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_ZN12bitmapStructC1Ev>:
#include <vector>

constexpr uint8_t x_default = 100;
constexpr uint8_t y_default = 60;

struct bitmapStruct{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_ZN4OLED10addSegmentEPKhhhhh>:

void OLED::addSegment(const unsigned char* bmp_name, uint8_t x_position, uint8_t y_position, uint8_t x_size, uint8_t y_size){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	460b      	mov	r3, r1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	4613      	mov	r3, r2
 8001f18:	71bb      	strb	r3, [r7, #6]
	bitmapStruct bmp;
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ffd9 	bl	8001ed6 <_ZN12bitmapStructC1Ev>

	bmp.bitmap = bmp_name;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	617b      	str	r3, [r7, #20]
	bmp.xpos = x_position;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	61bb      	str	r3, [r7, #24]
	bmp.ypos = y_position;
 8001f2c:	79bb      	ldrb	r3, [r7, #6]
 8001f2e:	61fb      	str	r3, [r7, #28]
	bmp.xsize = x_size;
 8001f30:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f34:	623b      	str	r3, [r7, #32]
	bmp.ysize = y_size;
 8001f36:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24

	bitmaps.push_back(bmp);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	f107 0214 	add.w	r2, r7, #20
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f92e 	bl	80021a8 <_ZNSt6vectorI12bitmapStructSaIS0_EE9push_backERKS0_>
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	@ 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN4OLED8jumpNextEv>:

void OLED::jumpNext(){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	uint8_t size = static_cast<uint8_t>(bitmaps.size() - 1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3320      	adds	r3, #32
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f947 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
	current_segment++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
	if (current_segment > size){
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dd02      	ble.n	8001f88 <_ZN4OLED8jumpNextEv+0x34>
		current_segment = 0;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
	}
	draw();
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f834 	bl	8001ff6 <_ZN4OLED4drawEv>
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZN4OLED12jumpPreviousEv>:

void OLED::jumpPrevious(){
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	uint8_t size = static_cast<uint8_t>(bitmaps.size() - 1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3320      	adds	r3, #32
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f926 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]

	current_segment--;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	1e5a      	subs	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	601a      	str	r2, [r3, #0]
	if (current_segment < 0){
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da02      	bge.n	8001fc8 <_ZN4OLED12jumpPreviousEv+0x32>
		current_segment = size;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	601a      	str	r2, [r3, #0]
	}
	draw();
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f814 	bl	8001ff6 <_ZN4OLED4drawEv>
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_ZN4OLED10setSegmentEh>:

void OLED::setSegment(uint8_t target_segment){
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	70fb      	strb	r3, [r7, #3]
	current_segment = target_segment;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
	draw();
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f804 	bl	8001ff6 <_ZN4OLED4drawEv>
};
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZN4OLED4drawEv>:

void OLED::draw(){
 8001ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff8:	b087      	sub	sp, #28
 8001ffa:	af04      	add	r7, sp, #16
 8001ffc:	6078      	str	r0, [r7, #4]
	fill(Black);
 8001ffe:	2100      	movs	r1, #0
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f86c 	bl	80020de <_ZN4OLED4fillE13SSD1306_COLOR>

	drawBitmap(
			bitmaps.at(current_segment).xpos,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f103 0220 	add.w	r2, r3, #32
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f000 f904 	bl	8002220 <_ZNSt6vectorI12bitmapStructSaIS0_EE2atEj>
 8002018:	4603      	mov	r3, r0
 800201a:	685b      	ldr	r3, [r3, #4]
	drawBitmap(
 800201c:	b2dd      	uxtb	r5, r3
			bitmaps.at(current_segment).ypos,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 0220 	add.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 f8f8 	bl	8002220 <_ZNSt6vectorI12bitmapStructSaIS0_EE2atEj>
 8002030:	4603      	mov	r3, r0
 8002032:	689b      	ldr	r3, [r3, #8]
	drawBitmap(
 8002034:	b2de      	uxtb	r6, r3
			bitmaps.at(current_segment).bitmap,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0220 	add.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 f8ec 	bl	8002220 <_ZNSt6vectorI12bitmapStructSaIS0_EE2atEj>
 8002048:	4603      	mov	r3, r0
	drawBitmap(
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	603b      	str	r3, [r7, #0]
			bitmaps.at(current_segment).xsize,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0220 	add.w	r2, r3, #32
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	f000 f8e0 	bl	8002220 <_ZNSt6vectorI12bitmapStructSaIS0_EE2atEj>
 8002060:	4603      	mov	r3, r0
 8002062:	68db      	ldr	r3, [r3, #12]
	drawBitmap(
 8002064:	b2dc      	uxtb	r4, r3
			bitmaps.at(current_segment).ysize,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f103 0220 	add.w	r2, r3, #32
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 f8d4 	bl	8002220 <_ZNSt6vectorI12bitmapStructSaIS0_EE2atEj>
 8002078:	4603      	mov	r3, r0
 800207a:	691b      	ldr	r3, [r3, #16]
	drawBitmap(
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2201      	movs	r2, #1
 8002080:	9202      	str	r2, [sp, #8]
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9400      	str	r4, [sp, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4632      	mov	r2, r6
 800208a:	4629      	mov	r1, r5
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f837 	bl	8002100 <_ZN4OLED10drawBitmapEhhPKhhh13SSD1306_COLOR>
			White);
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800209a <_ZN4OLED4initEv>:

void OLED::init() {
 800209a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209c:	b087      	sub	sp, #28
 800209e:	af04      	add	r7, sp, #16
 80020a0:	6078      	str	r0, [r7, #4]
    ssd1306_Init(spi_port, cs_port, cs_pin, dc_port, dc_pin, reset_port, reset_pin);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6858      	ldr	r0, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689c      	ldr	r4, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	899d      	ldrh	r5, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691e      	ldr	r6, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8a9b      	ldrh	r3, [r3, #20]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6992      	ldr	r2, [r2, #24]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	8b89      	ldrh	r1, [r1, #28]
 80020be:	9102      	str	r1, [sp, #8]
 80020c0:	9201      	str	r2, [sp, #4]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4633      	mov	r3, r6
 80020c6:	462a      	mov	r2, r5
 80020c8:	4621      	mov	r1, r4
 80020ca:	f000 ff1f 	bl	8002f0c <ssd1306_Init>
    fill(Black);
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f804 	bl	80020de <_ZN4OLED4fillE13SSD1306_COLOR>
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020de <_ZN4OLED4fillE13SSD1306_COLOR>:

void OLED::fill(SSD1306_COLOR color) {
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
    ssd1306_Fill(color);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 f849 	bl	8003184 <ssd1306_Fill>
    updateScreen();
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f832 	bl	800215c <_ZN4OLED12updateScreenEv>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_ZN4OLED10drawBitmapEhhPKhhh13SSD1306_COLOR>:

void OLED::drawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t width, uint8_t height, SSD1306_COLOR color) {
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b08c      	sub	sp, #48	@ 0x30
 8002104:	af08      	add	r7, sp, #32
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	72fb      	strb	r3, [r7, #11]
 800210e:	4613      	mov	r3, r2
 8002110:	72bb      	strb	r3, [r7, #10]
    ssd1306_DrawBitmap(spi_port , cs_port, cs_pin, dc_port, dc_pin, x, y, bitmap, width, height, color);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6858      	ldr	r0, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	899c      	ldrh	r4, [r3, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691d      	ldr	r5, [r3, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8a9b      	ldrh	r3, [r3, #20]
 8002126:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800212a:	9206      	str	r2, [sp, #24]
 800212c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002130:	9205      	str	r2, [sp, #20]
 8002132:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002136:	9204      	str	r2, [sp, #16]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	9203      	str	r2, [sp, #12]
 800213c:	7aba      	ldrb	r2, [r7, #10]
 800213e:	9202      	str	r2, [sp, #8]
 8002140:	7afa      	ldrb	r2, [r7, #11]
 8002142:	9201      	str	r2, [sp, #4]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	462b      	mov	r3, r5
 8002148:	4622      	mov	r2, r4
 800214a:	f001 f8cf 	bl	80032ec <ssd1306_DrawBitmap>
    updateScreen();
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f804 	bl	800215c <_ZN4OLED12updateScreenEv>
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bdb0      	pop	{r4, r5, r7, pc}

0800215c <_ZN4OLED12updateScreenEv>:

void OLED::updateScreen() {
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
    ssd1306_UpdateScreen(spi_port, cs_port, cs_pin, dc_port, dc_pin);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6858      	ldr	r0, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	899a      	ldrh	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691c      	ldr	r4, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8a9b      	ldrh	r3, [r3, #20]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4623      	mov	r3, r4
 800217c:	f001 f81a 	bl	80031b4 <ssd1306_UpdateScreen>
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f857 	bl	8002244 <_ZNSaI12bitmapStructEC1Ev>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f85f 	bl	800225c <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZNSt6vectorI12bitmapStructSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d00d      	beq.n	80021da <_ZNSt6vectorI12bitmapStructSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	f000 f888 	bl	80022dc <_ZNSt16allocator_traitsISaI12bitmapStructEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f103 0214 	add.w	r2, r3, #20
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80021d8:	e008      	b.n	80021ec <_ZNSt6vectorI12bitmapStructSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f891 	bl	8002302 <_ZNSt6vectorI12bitmapStructSaIS0_EE3endEv>
 80021e0:	4603      	mov	r3, r0
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8b2 	bl	8002350 <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	109b      	asrs	r3, r3, #2
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv+0x28>)
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	cccccccd 	.word	0xcccccccd

08002220 <_ZNSt6vectorI12bitmapStructSaIS0_EE2atEj>:
      at(size_type __n)
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f957 	bl	80024e0 <_ZNKSt6vectorI12bitmapStructSaIS0_EE14_M_range_checkEj>
	return (*this)[__n];
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f973 	bl	8002520 <_ZNSt6vectorI12bitmapStructSaIS0_EEixEj>
 800223a:	4603      	mov	r3, r0
      }
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZNSaI12bitmapStructEC1Ev>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f97a 	bl	8002546 <_ZNSt15__new_allocatorI12bitmapStructEC1Ev>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
	{ }
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
	if (__p)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f95d 	bl	800255c <_ZNSt16allocator_traitsISaI12bitmapStructEE10deallocateERS1_PS0_j>
      }
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_ZSt8_DestroyIP12bitmapStructS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f953 	bl	800257a <_ZSt8_DestroyIP12bitmapStructEvT_S2_>
    }
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_ZNSt16allocator_traitsISaI12bitmapStructEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f953 	bl	8002594 <_ZSt7forwardIRK12bitmapStructEOT_RNSt16remove_referenceIS3_E4typeE>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f958 	bl	80025aa <_ZNSt15__new_allocatorI12bitmapStructE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZNSt6vectorI12bitmapStructSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1d1a      	adds	r2, r3, #4
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f961 	bl	80025dc <_ZN9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZNSt6vectorI12bitmapStructSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f805 	bl	800233a <_ZNSt6vectorI12bitmapStructSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002330:	4603      	mov	r3, r0
      }
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_ZNSt6vectorI12bitmapStructSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002342:	2301      	movs	r3, #1
      }
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b08c      	sub	sp, #48	@ 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800235c:	4a5e      	ldr	r2, [pc, #376]	@ (80024d8 <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 800235e:	2101      	movs	r1, #1
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f94b 	bl	80025fc <_ZNKSt6vectorI12bitmapStructSaIS0_EE12_M_check_lenEjPKc>
 8002366:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f988 	bl	800268a <_ZNSt6vectorI12bitmapStructSaIS0_EE5beginEv>
 800237a:	4603      	mov	r3, r0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	f107 0214 	add.w	r2, r7, #20
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f98f 	bl	80026ac <_ZN9__gnu_cxxmiIP12bitmapStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800238e:	4603      	mov	r3, r0
 8002390:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f9a2 	bl	80026e0 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE11_M_allocateEj>
 800239c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80023a2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	189d      	adds	r5, r3, r2
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8ed 	bl	8002594 <_ZSt7forwardIRK12bitmapStructEOT_RNSt16remove_referenceIS3_E4typeE>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	4629      	mov	r1, r5
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff ff8b 	bl	80022dc <_ZNSt16allocator_traitsISaI12bitmapStructEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80023ca:	f7ff ffab 	bl	8002324 <_ZNSt6vectorI12bitmapStructSaIS0_EE15_S_use_relocateEv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d027      	beq.n	8002424 <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f9a9 	bl	8002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>
 80023de:	4603      	mov	r3, r0
 80023e0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff60 	bl	80022aa <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>
 80023ea:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4621      	mov	r1, r4
 80023f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023f2:	f000 f989 	bl	8002708 <_ZNSt6vectorI12bitmapStructSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80023f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	3314      	adds	r3, #20
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f994 	bl	8002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002408:	4603      	mov	r3, r0
 800240a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff4b 	bl	80022aa <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002414:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	4620      	mov	r0, r4
 800241c:	f000 f974 	bl	8002708 <_ZNSt6vectorI12bitmapStructSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002420:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002422:	e026      	b.n	8002472 <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f981 	bl	8002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>
 800242e:	4603      	mov	r3, r0
 8002430:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff38 	bl	80022aa <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>
 800243a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4621      	mov	r1, r4
 8002440:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002442:	f000 f980 	bl	8002746 <_ZSt34__uninitialized_move_if_noexcept_aIP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002446:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	3314      	adds	r3, #20
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f96c 	bl	8002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002458:	4603      	mov	r3, r0
 800245a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff23 	bl	80022aa <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002464:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002468:	6a39      	ldr	r1, [r7, #32]
 800246a:	4620      	mov	r0, r4
 800246c:	f000 f96b 	bl	8002746 <_ZSt34__uninitialized_move_if_noexcept_aIP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002470:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002472:	f7ff ff57 	bl	8002324 <_ZNSt6vectorI12bitmapStructSaIS0_EE15_S_use_relocateEv>
 8002476:	4603      	mov	r3, r0
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff10 	bl	80022aa <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	6a39      	ldr	r1, [r7, #32]
 8002490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002492:	f7ff ff15 	bl	80022c0 <_ZSt8_DestroyIP12bitmapStructS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8002496:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	109b      	asrs	r3, r3, #2
 80024a2:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <_ZNSt6vectorI12bitmapStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 80024a8:	461a      	mov	r2, r3
 80024aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ac:	f7ff feea 	bl	8002284 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80024bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
    }
 80024d0:	bf00      	nop
 80024d2:	3730      	adds	r7, #48	@ 0x30
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bdb0      	pop	{r4, r5, r7, pc}
 80024d8:	08007640 	.word	0x08007640
 80024dc:	cccccccd 	.word	0xcccccccd

080024e0 <_ZNKSt6vectorI12bitmapStructSaIS0_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fe82 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 80024f0:	4602      	mov	r2, r0
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf2c      	ite	cs
 80024f8:	2301      	movcs	r3, #1
 80024fa:	2300      	movcc	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <_ZNKSt6vectorI12bitmapStructSaIS0_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fe76 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	4803      	ldr	r0, [pc, #12]	@ (800251c <_ZNKSt6vectorI12bitmapStructSaIS0_EE14_M_range_checkEj+0x3c>)
 8002510:	f004 fb6e 	bl	8006bf0 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	0800765c 	.word	0x0800765c

08002520 <_ZNSt6vectorI12bitmapStructSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
      }
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_ZNSt15__new_allocatorI12bitmapStructEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_ZNSt16allocator_traitsISaI12bitmapStructEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f910 	bl	8002792 <_ZNSt15__new_allocatorI12bitmapStructE10deallocateEPS0_j>
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_ZSt8_DestroyIP12bitmapStructEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f916 	bl	80027b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12bitmapStructEEvT_S4_>
    }
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZSt7forwardIRK12bitmapStructEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_ZNSt15__new_allocatorI12bitmapStructE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80025aa:	b5b0      	push	{r4, r5, r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4619      	mov	r1, r3
 80025ba:	2014      	movs	r0, #20
 80025bc:	f7fe f84a 	bl	8000654 <_ZnwjPv>
 80025c0:	4604      	mov	r4, r0
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffe6 	bl	8002594 <_ZSt7forwardIRK12bitmapStructEOT_RNSt16remove_referenceIS3_E4typeE>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461d      	mov	r5, r3
 80025cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d0:	682b      	ldr	r3, [r5, #0]
 80025d2:	6023      	str	r3, [r4, #0]
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bdb0      	pop	{r4, r5, r7, pc}

080025dc <_ZN9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_ZNKSt6vectorI12bitmapStructSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f8e0 	bl	80027ce <_ZNKSt6vectorI12bitmapStructSaIS0_EE8max_sizeEv>
 800260e:	4604      	mov	r4, r0
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fdef 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 8002616:	4603      	mov	r3, r0
 8002618:	1ae2      	subs	r2, r4, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	bf34      	ite	cc
 8002620:	2301      	movcc	r3, #1
 8002622:	2300      	movcs	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <_ZNKSt6vectorI12bitmapStructSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f004 fada 	bl	8006be4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff fddf 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 8002636:	4604      	mov	r4, r0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fddb 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 800263e:	4603      	mov	r3, r0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	f107 0208 	add.w	r2, r7, #8
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f8cf 	bl	80027f0 <_ZSt3maxIjERKT_S2_S2_>
 8002652:	4603      	mov	r3, r0
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4423      	add	r3, r4
 8002658:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff fdca 	bl	80021f4 <_ZNKSt6vectorI12bitmapStructSaIS0_EE4sizeEv>
 8002660:	4602      	mov	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4293      	cmp	r3, r2
 8002666:	d306      	bcc.n	8002676 <_ZNKSt6vectorI12bitmapStructSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f8b0 	bl	80027ce <_ZNKSt6vectorI12bitmapStructSaIS0_EE8max_sizeEv>
 800266e:	4602      	mov	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4293      	cmp	r3, r2
 8002674:	d904      	bls.n	8002680 <_ZNKSt6vectorI12bitmapStructSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8a9 	bl	80027ce <_ZNKSt6vectorI12bitmapStructSaIS0_EE8max_sizeEv>
 800267c:	4603      	mov	r3, r0
 800267e:	e000      	b.n	8002682 <_ZNKSt6vectorI12bitmapStructSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002680:	697b      	ldr	r3, [r7, #20]
      }
 8002682:	4618      	mov	r0, r3
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}

0800268a <_ZNSt6vectorI12bitmapStructSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff9e 	bl	80025dc <_ZN9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <_ZN9__gnu_cxxmiIP12bitmapStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f83a 	bl	8002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>
 80026bc:	4603      	mov	r3, r0
 80026be:	681c      	ldr	r4, [r3, #0]
 80026c0:	6838      	ldr	r0, [r7, #0]
 80026c2:	f000 f835 	bl	8002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>
 80026c6:	4603      	mov	r3, r0
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1ae3      	subs	r3, r4, r3
 80026cc:	109b      	asrs	r3, r3, #2
 80026ce:	4a03      	ldr	r2, [pc, #12]	@ (80026dc <_ZN9__gnu_cxxmiIP12bitmapStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	cccccccd 	.word	0xcccccccd

080026e0 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE11_M_allocateEj+0x1e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f88f 	bl	8002818 <_ZNSt16allocator_traitsISaI12bitmapStructEE8allocateERS1_j>
 80026fa:	4603      	mov	r3, r0
 80026fc:	e000      	b.n	8002700 <_ZNSt12_Vector_baseI12bitmapStructSaIS0_EE11_M_allocateEj+0x20>
 80026fe:	2300      	movs	r3, #0
      }
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_ZNSt6vectorI12bitmapStructSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b087      	sub	sp, #28
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002716:	f88d 4000 	strb.w	r4, [sp]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f888 	bl	8002836 <_ZNSt6vectorI12bitmapStructSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8002726:	4603      	mov	r3, r0
      }
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <_ZNK9__gnu_cxx17__normal_iteratorIP12bitmapStructSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_ZSt34__uninitialized_move_if_noexcept_aIP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002746:	b590      	push	{r4, r7, lr}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f880 	bl	800285a <_ZSt32__make_move_if_noexcept_iteratorI12bitmapStructSt13move_iteratorIPS0_EET0_PT_>
 800275a:	4604      	mov	r4, r0
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f000 f87c 	bl	800285a <_ZSt32__make_move_if_noexcept_iteratorI12bitmapStructSt13move_iteratorIPS0_EET0_PT_>
 8002762:	4601      	mov	r1, r0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4620      	mov	r0, r4
 800276a:	f000 f885 	bl	8002878 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP12bitmapStructES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800276e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}

08002778 <_ZNSt16allocator_traitsISaI12bitmapStructEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f888 	bl	800289a <_ZNSt15__new_allocatorI12bitmapStructE7destroyIS0_EEvPT_>
	}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_ZNSt15__new_allocatorI12bitmapStructE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4619      	mov	r1, r3
 80027aa:	68b8      	ldr	r0, [r7, #8]
 80027ac:	f004 f93c 	bl	8006a28 <_ZdlPvj>
      }
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12bitmapStructEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_ZNKSt6vectorI12bitmapStructSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f885 	bl	80028e8 <_ZNKSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>
 80027de:	4603      	mov	r3, r0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f865 	bl	80028b0 <_ZNSt6vectorI12bitmapStructSaIS0_EE11_S_max_sizeERKS1_>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d201      	bcs.n	800280a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	e000      	b.n	800280c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800280a:	687b      	ldr	r3, [r7, #4]
    }
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_ZNSt16allocator_traitsISaI12bitmapStructEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002822:	2200      	movs	r2, #0
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f86a 	bl	8002900 <_ZNSt15__new_allocatorI12bitmapStructE8allocateEjPKv>
 800282c:	4603      	mov	r3, r0
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_ZNSt6vectorI12bitmapStructSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f886 	bl	800295c <_ZSt12__relocate_aIP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002850:	4603      	mov	r3, r0
      }
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_ZSt32__make_move_if_noexcept_iteratorI12bitmapStructSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f894 	bl	8002996 <_ZNSt13move_iteratorIP12bitmapStructEC1ES1_>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP12bitmapStructES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f895 	bl	80029ba <_ZSt18uninitialized_copyISt13move_iteratorIP12bitmapStructES2_ET0_T_S5_S4_>
 8002890:	4603      	mov	r3, r0
    }
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_ZNSt15__new_allocatorI12bitmapStructE7destroyIS0_EEvPT_>:
	destroy(_Up* __p)
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_ZNSt6vectorI12bitmapStructSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <_ZNSt6vectorI12bitmapStructSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80028ba:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f890 	bl	80029e2 <_ZNSt16allocator_traitsISaI12bitmapStructEE8max_sizeERKS1_>
 80028c2:	4603      	mov	r3, r0
 80028c4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80028c6:	f107 0208 	add.w	r2, r7, #8
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 f892 	bl	80029fa <_ZSt3minIjERKT_S2_S2_>
 80028d6:	4603      	mov	r3, r0
 80028d8:	681b      	ldr	r3, [r3, #0]
      }
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	06666666 	.word	0x06666666

080028e8 <_ZNKSt12_Vector_baseI12bitmapStructSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <_ZNSt15__new_allocatorI12bitmapStructE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f889 	bl	8002a24 <_ZNKSt15__new_allocatorI12bitmapStructE11_M_max_sizeEv>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4293      	cmp	r3, r2
 8002918:	bf8c      	ite	hi
 800291a:	2301      	movhi	r3, #1
 800291c:	2300      	movls	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <_ZNSt15__new_allocatorI12bitmapStructE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <_ZNSt15__new_allocatorI12bitmapStructE8allocateEjPKv+0x58>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <_ZNSt15__new_allocatorI12bitmapStructE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002936:	f004 f94c 	bl	8006bd2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800293a:	f004 f947 	bl	8006bcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4618      	mov	r0, r3
 800294a:	f004 f86f 	bl	8006a2c <_Znwj>
 800294e:	4603      	mov	r3, r0
      }
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	0ccccccc 	.word	0x0ccccccc

0800295c <_ZSt12__relocate_aIP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f868 	bl	8002a40 <_ZSt12__niter_baseIP12bitmapStructET_S2_>
 8002970:	4604      	mov	r4, r0
 8002972:	68b8      	ldr	r0, [r7, #8]
 8002974:	f000 f864 	bl	8002a40 <_ZSt12__niter_baseIP12bitmapStructET_S2_>
 8002978:	4605      	mov	r5, r0
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f860 	bl	8002a40 <_ZSt12__niter_baseIP12bitmapStructET_S2_>
 8002980:	4602      	mov	r2, r0
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4629      	mov	r1, r5
 8002986:	4620      	mov	r0, r4
 8002988:	f000 f865 	bl	8002a56 <_ZSt14__relocate_a_1IP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 800298c:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bdb0      	pop	{r4, r5, r7, pc}

08002996 <_ZNSt13move_iteratorIP12bitmapStructEC1ES1_>:
      move_iterator(iterator_type __i)
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80029a0:	463b      	mov	r3, r7
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f87d 	bl	8002aa2 <_ZSt4moveIRP12bitmapStructEONSt16remove_referenceIT_E4typeEOS4_>
 80029a8:	4603      	mov	r3, r0
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_ZSt18uninitialized_copyISt13move_iteratorIP12bitmapStructES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 80029ca:	2300      	movs	r3, #0
 80029cc:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f870 	bl	8002ab8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP12bitmapStructES4_EET0_T_S7_S6_>
 80029d8:	4603      	mov	r3, r0
    }
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZNSt16allocator_traitsISaI12bitmapStructEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f874 	bl	8002ad8 <_ZNKSt15__new_allocatorI12bitmapStructE8max_sizeEv>
 80029f0:	4603      	mov	r3, r0
      }
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d201      	bcs.n	8002a14 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	e000      	b.n	8002a16 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002a14:	687b      	ldr	r3, [r7, #4]
    }
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_ZNKSt15__new_allocatorI12bitmapStructE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <_ZNKSt15__new_allocatorI12bitmapStructE11_M_max_sizeEv+0x18>)
      }
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	06666666 	.word	0x06666666

08002a40 <_ZSt12__niter_baseIP12bitmapStructET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_ZSt14__relocate_a_1IP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002a56:	b590      	push	{r4, r7, lr}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002a68:	e012      	b.n	8002a90 <_ZSt14__relocate_a_1IP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f000 f840 	bl	8002af0 <_ZSt11__addressofI12bitmapStructEPT_RS1_>
 8002a70:	4604      	mov	r4, r0
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f83c 	bl	8002af0 <_ZSt11__addressofI12bitmapStructEPT_RS1_>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f000 f841 	bl	8002b06 <_ZSt19__relocate_object_aI12bitmapStructS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3314      	adds	r3, #20
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1e8      	bne.n	8002a6a <_ZSt14__relocate_a_1IP12bitmapStructS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 8002a98:	697b      	ldr	r3, [r7, #20]
    }
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}

08002aa2 <_ZSt4moveIRP12bitmapStructEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP12bitmapStructES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f837 	bl	8002b3c <_ZSt16__do_uninit_copyISt13move_iteratorIP12bitmapStructES2_ET0_T_S5_S4_>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZNKSt15__new_allocatorI12bitmapStructE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff9f 	bl	8002a24 <_ZNKSt15__new_allocatorI12bitmapStructE11_M_max_sizeEv>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZSt11__addressofI12bitmapStructEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_ZSt19__relocate_object_aI12bitmapStructS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002b12:	68b8      	ldr	r0, [r7, #8]
 8002b14:	f000 f841 	bl	8002b9a <_ZSt4moveIR12bitmapStructEONSt16remove_referenceIT_E4typeEOS3_>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f846 	bl	8002bb0 <_ZNSt16allocator_traitsISaI12bitmapStructEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002b24:	68b8      	ldr	r0, [r7, #8]
 8002b26:	f7ff ffe3 	bl	8002af0 <_ZSt11__addressofI12bitmapStructEPT_RS1_>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fe22 	bl	8002778 <_ZNSt16allocator_traitsISaI12bitmapStructEE7destroyIS0_EEvRS1_PT_>
    }
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_ZSt16__do_uninit_copyISt13move_iteratorIP12bitmapStructES2_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8002b4c:	e015      	b.n	8002b7a <_ZSt16__do_uninit_copyISt13move_iteratorIP12bitmapStructES2_ET0_T_S5_S4_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ffce 	bl	8002af0 <_ZSt11__addressofI12bitmapStructEPT_RS1_>
 8002b54:	4604      	mov	r4, r0
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f85d 	bl	8002c1a <_ZNKSt13move_iteratorIP12bitmapStructEdeEv>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4619      	mov	r1, r3
 8002b64:	4620      	mov	r0, r4
 8002b66:	f000 f864 	bl	8002c32 <_ZSt10_ConstructI12bitmapStructJS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f842 	bl	8002bf8 <_ZNSt13move_iteratorIP12bitmapStructEppEv>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3314      	adds	r3, #20
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	f107 0208 	add.w	r2, r7, #8
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f826 	bl	8002bd6 <_ZStneIP12bitmapStructEbRKSt13move_iteratorIT_ES6_>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1de      	bne.n	8002b4e <_ZSt16__do_uninit_copyISt13move_iteratorIP12bitmapStructES2_ET0_T_S5_S4_+0x12>
	  return __cur;
 8002b90:	697b      	ldr	r3, [r7, #20]
    }
 8002b92:	4618      	mov	r0, r3
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}

08002b9a <_ZSt4moveIR12bitmapStructEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_ZNSt16allocator_traitsISaI12bitmapStructEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f850 	bl	8002c62 <_ZSt7forwardI12bitmapStructEOT_RNSt16remove_referenceIS1_E4typeE>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f855 	bl	8002c78 <_ZNSt15__new_allocatorI12bitmapStructE9constructIS0_JS0_EEEvPT_DpOT0_>
	}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_ZStneIP12bitmapStructEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8002be0:	6839      	ldr	r1, [r7, #0]
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f861 	bl	8002caa <_ZSteqIP12bitmapStructEbRKSt13move_iteratorIT_ES6_>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNSt13move_iteratorIP12bitmapStructEppEv>:
      operator++()
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f103 0214 	add.w	r2, r3, #20
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	601a      	str	r2, [r3, #0]
	return *this;
 8002c0c:	687b      	ldr	r3, [r7, #4]
      }
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <_ZNKSt13move_iteratorIP12bitmapStructEdeEv>:
      operator*() const
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZSt10_ConstructI12bitmapStructJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002c32:	b5b0      	push	{r4, r5, r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	2014      	movs	r0, #20
 8002c42:	f7fd fd07 	bl	8000654 <_ZnwjPv>
 8002c46:	4604      	mov	r4, r0
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f000 f80a 	bl	8002c62 <_ZSt7forwardI12bitmapStructEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461d      	mov	r5, r3
 8002c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	6023      	str	r3, [r4, #0]
    }
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bdb0      	pop	{r4, r5, r7, pc}

08002c62 <_ZSt7forwardI12bitmapStructEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_ZNSt15__new_allocatorI12bitmapStructE9constructIS0_JS0_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4619      	mov	r1, r3
 8002c88:	2014      	movs	r0, #20
 8002c8a:	f7fd fce3 	bl	8000654 <_ZnwjPv>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ffe6 	bl	8002c62 <_ZSt7forwardI12bitmapStructEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461d      	mov	r5, r3
 8002c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c9e:	682b      	ldr	r3, [r5, #0]
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdb0      	pop	{r4, r5, r7, pc}

08002caa <_ZSteqIP12bitmapStructEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002caa:	b590      	push	{r4, r7, lr}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f80e 	bl	8002cd6 <_ZNKSt13move_iteratorIP12bitmapStructE4baseEv>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	6838      	ldr	r0, [r7, #0]
 8002cbe:	f000 f80a 	bl	8002cd6 <_ZNKSt13move_iteratorIP12bitmapStructE4baseEv>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}

08002cd6 <_ZNKSt13move_iteratorIP12bitmapStructE4baseEv>:
      base() const
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002cf6:	4a18      	ldr	r2, [pc, #96]	@ (8002d58 <MX_SPI1_Init+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cfa:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d02:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d22:	4b0c      	ldr	r3, [pc, #48]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d24:	2220      	movs	r2, #32
 8002d26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d34:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d3c:	220a      	movs	r2, #10
 8002d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d40:	4804      	ldr	r0, [pc, #16]	@ (8002d54 <MX_SPI1_Init+0x64>)
 8002d42:	f002 fc53 	bl	80055ec <HAL_SPI_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d4c:	f7fd ffe2 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200000a0 	.word	0x200000a0
 8002d58:	40013000 	.word	0x40013000

08002d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a28      	ldr	r2, [pc, #160]	@ (8002e1c <HAL_SPI_MspInit+0xc0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d149      	bne.n	8002e12 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b27      	ldr	r3, [pc, #156]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002d88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <HAL_SPI_MspInit+0xc4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002dd2:	2360      	movs	r3, #96	@ 0x60
 8002dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002de2:	2305      	movs	r3, #5
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4619      	mov	r1, r3
 8002dec:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <HAL_SPI_MspInit+0xc8>)
 8002dee:	f001 fe07 	bl	8004a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002df2:	2320      	movs	r3, #32
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e02:	2305      	movs	r3, #5
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4806      	ldr	r0, [pc, #24]	@ (8002e28 <HAL_SPI_MspInit+0xcc>)
 8002e0e:	f001 fdf7 	bl	8004a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40013000 	.word	0x40013000
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020000 	.word	0x40020000
 8002e28:	40020400 	.word	0x40020400

08002e2c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* reset_port, uint16_t reset_pin, GPIO_TypeDef* cs_port, uint16_t cs_pin) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
    // CS = High (not selected)
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8002e3c:	8b3b      	ldrh	r3, [r7, #24]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4619      	mov	r1, r3
 8002e42:	6838      	ldr	r0, [r7, #0]
 8002e44:	f001 ff60 	bl	8004d08 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(reset_port, reset_pin, GPIO_PIN_RESET);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68b8      	ldr	r0, [r7, #8]
 8002e50:	f001 ff5a 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002e54:	200a      	movs	r0, #10
 8002e56:	f001 fc0b 	bl	8004670 <HAL_Delay>
    HAL_GPIO_WritePin(reset_port, reset_pin, GPIO_PIN_SET);
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68b8      	ldr	r0, [r7, #8]
 8002e62:	f001 ff51 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002e66:	200a      	movs	r0, #10
 8002e68:	f001 fc02 	bl	8004670 <HAL_Delay>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin, uint8_t byte) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET); // select OLED
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	2200      	movs	r2, #0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	f001 ff3c 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(dc_port, dc_pin, GPIO_PIN_RESET); // command
 8002e90:	8b3b      	ldrh	r3, [r7, #24]
 8002e92:	2200      	movs	r2, #0
 8002e94:	4619      	mov	r1, r3
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f001 ff36 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi_port, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002e9c:	f107 011c 	add.w	r1, r7, #28
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f002 fc29 	bl	80056fe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET); // un-select OLED
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68b8      	ldr	r0, [r7, #8]
 8002eb4:	f001 ff28 	bl	8004d08 <HAL_GPIO_WritePin>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin, uint8_t* buffer, size_t buff_size) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET); // select OLED
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	f001 ff16 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(dc_port, dc_pin, GPIO_PIN_SET); // data
 8002edc:	8b3b      	ldrh	r3, [r7, #24]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	f001 ff10 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi_port, buffer, buff_size, HAL_MAX_DELAY);
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	69f9      	ldr	r1, [r7, #28]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f002 fc03 	bl	80056fe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET); // un-select OLED
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4619      	mov	r1, r3
 8002efe:	68b8      	ldr	r0, [r7, #8]
 8002f00:	f001 ff02 	bl	8004d08 <HAL_GPIO_WritePin>
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin, GPIO_TypeDef* reset_port, uint16_t reset_pin) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
    // Reset OLED
    ssd1306_Reset(spi_port, reset_port, reset_pin, cs_port, cs_pin);
 8002f1c:	8c3a      	ldrh	r2, [r7, #32]
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff80 	bl	8002e2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002f2c:	2064      	movs	r0, #100	@ 0x64
 8002f2e:	f001 fb9f 	bl	8004670 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0); //display off
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	8b3b      	ldrh	r3, [r7, #24]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa57 	bl	80033f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand( spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x20); //Set Memory Addressing Mode
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	2320      	movs	r3, #32
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	8b3b      	ldrh	r3, [r7, #24]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff ff8d 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand( spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	8b3b      	ldrh	r3, [r7, #24]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff ff83 	bl	8002e74 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	23b0      	movs	r3, #176	@ 0xb0
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	8b3b      	ldrh	r3, [r7, #24]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff79 	bl	8002e74 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xC8); //Set COM Output Scan Direction
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	23c8      	movs	r3, #200	@ 0xc8
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	8b3b      	ldrh	r3, [r7, #24]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff ff6f 	bl	8002e74 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x00); //---set low column address
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	8b3b      	ldrh	r3, [r7, #24]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff ff65 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x10); //---set high column address
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	2310      	movs	r3, #16
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	8b3b      	ldrh	r3, [r7, #24]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff ff5b 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x40); //--set start line address - CHECK
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	2340      	movs	r3, #64	@ 0x40
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	8b3b      	ldrh	r3, [r7, #24]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff ff51 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_SetContrast(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xFF);
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	23ff      	movs	r3, #255	@ 0xff
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	8b3b      	ldrh	r3, [r7, #24]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f9e4 	bl	80033ae <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xA1); //--set segment re-map 0 to 127 - CHECK
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	23a1      	movs	r3, #161	@ 0xa1
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	8b3b      	ldrh	r3, [r7, #24]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff ff3d 	bl	8002e74 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xA6); //--set normal color
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	23a6      	movs	r3, #166	@ 0xa6
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	8b3b      	ldrh	r3, [r7, #24]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7ff ff33 	bl	8002e74 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xFF);
#else
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	23a8      	movs	r3, #168	@ 0xa8
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	8b3b      	ldrh	r3, [r7, #24]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff ff29 	bl	8002e74 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x3F); //
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	233f      	movs	r3, #63	@ 0x3f
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	8b3b      	ldrh	r3, [r7, #24]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff ff1f 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	23a4      	movs	r3, #164	@ 0xa4
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	8b3b      	ldrh	r3, [r7, #24]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff ff15 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xD3); //-set display offset - CHECK
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	23d3      	movs	r3, #211	@ 0xd3
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	8b3b      	ldrh	r3, [r7, #24]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7ff ff0b 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x00); //-not offset
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	2300      	movs	r3, #0
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	8b3b      	ldrh	r3, [r7, #24]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff ff01 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xD5); //--set display clock divide ratio/oscillator frequency
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	23d5      	movs	r3, #213	@ 0xd5
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	8b3b      	ldrh	r3, [r7, #24]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fef7 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xF0); //--set divide ratio
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	23f0      	movs	r3, #240	@ 0xf0
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	8b3b      	ldrh	r3, [r7, #24]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff feed 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xD9); //--set pre-charge period
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	23d9      	movs	r3, #217	@ 0xd9
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	8b3b      	ldrh	r3, [r7, #24]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fee3 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x22); //
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	2322      	movs	r3, #34	@ 0x22
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	8b3b      	ldrh	r3, [r7, #24]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff fed9 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xDA); //--set com pins hardware configuration - CHECK
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	23da      	movs	r3, #218	@ 0xda
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	8b3b      	ldrh	r3, [r7, #24]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff fecf 	bl	8002e74 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x12);
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	2312      	movs	r3, #18
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	8b3b      	ldrh	r3, [r7, #24]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fec5 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xDB); //--set vcomh
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	23db      	movs	r3, #219	@ 0xdb
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	8b3b      	ldrh	r3, [r7, #24]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff febb 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x20); //0x20,0.77xVcc
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	2320      	movs	r3, #32
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	8b3b      	ldrh	r3, [r7, #24]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff feb1 	bl	8002e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x8D); //--set DC-DC enable
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	238d      	movs	r3, #141	@ 0x8d
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	8b3b      	ldrh	r3, [r7, #24]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff fea7 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x14); //
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	2314      	movs	r3, #20
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	8b3b      	ldrh	r3, [r7, #24]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fe9d 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(spi_port, cs_port, cs_pin, dc_port, dc_pin, 1); //--turn on SSD1306 panel
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	2301      	movs	r3, #1
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	8b3b      	ldrh	r3, [r7, #24]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f953 	bl	80033f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800314e:	2000      	movs	r0, #0
 8003150:	f000 f818 	bl	8003184 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen(spi_port, cs_port, cs_pin, dc_port, dc_pin);
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	8b3b      	ldrh	r3, [r7, #24]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f828 	bl	80031b4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <ssd1306_Init+0x274>)
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <ssd1306_Init+0x274>)
 800316c:	2200      	movs	r2, #0
 800316e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003170:	4b03      	ldr	r3, [pc, #12]	@ (8003180 <ssd1306_Init+0x274>)
 8003172:	2201      	movs	r2, #1
 8003174:	711a      	strb	r2, [r3, #4]
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200004f8 	.word	0x200004f8

08003184 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <ssd1306_Fill+0x14>
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <ssd1306_Fill+0x16>
 8003198:	23ff      	movs	r3, #255	@ 0xff
 800319a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800319e:	4619      	mov	r1, r3
 80031a0:	4803      	ldr	r0, [pc, #12]	@ (80031b0 <ssd1306_Fill+0x2c>)
 80031a2:	f004 f959 	bl	8007458 <memset>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200000f8 	.word	0x200000f8

080031b4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	@ 0x28
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
 80031c8:	e031      	b.n	800322e <ssd1306_UpdateScreen+0x7a>
        ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0xB0 + i); // Set the current RAM page address.
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	3b50      	subs	r3, #80	@ 0x50
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	88fa      	ldrh	r2, [r7, #6]
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	8c3b      	ldrh	r3, [r7, #32]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff fe49 	bl	8002e74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x00 + SSD1306_X_OFFSET_LOWER);
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	8c3b      	ldrh	r3, [r7, #32]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fe3f 	bl	8002e74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, 0x10 + SSD1306_X_OFFSET_UPPER);
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	2310      	movs	r3, #16
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	8c3b      	ldrh	r3, [r7, #32]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff fe35 	bl	8002e74 <ssd1306_WriteCommand>
        ssd1306_WriteData(spi_port, cs_port, cs_pin, dc_port, dc_pin, &SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	01db      	lsls	r3, r3, #7
 800320e:	4a0c      	ldr	r2, [pc, #48]	@ (8003240 <ssd1306_UpdateScreen+0x8c>)
 8003210:	4413      	add	r3, r2
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	9102      	str	r1, [sp, #8]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	8c3b      	ldrh	r3, [r7, #32]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fe4c 	bl	8002ec0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	3301      	adds	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b07      	cmp	r3, #7
 8003232:	d9ca      	bls.n	80031ca <ssd1306_UpdateScreen+0x16>
    }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200000f8 	.word	0x200000f8

08003244 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	460b      	mov	r3, r1
 8003250:	71bb      	strb	r3, [r7, #6]
 8003252:	4613      	mov	r3, r2
 8003254:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db3d      	blt.n	80032da <ssd1306_DrawPixel+0x96>
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	2b3f      	cmp	r3, #63	@ 0x3f
 8003262:	d83a      	bhi.n	80032da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003264:	797b      	ldrb	r3, [r7, #5]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11a      	bne.n	80032a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800326a:	79fa      	ldrb	r2, [r7, #7]
 800326c:	79bb      	ldrb	r3, [r7, #6]
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	b2d8      	uxtb	r0, r3
 8003272:	4603      	mov	r3, r0
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4413      	add	r3, r2
 8003278:	4a1b      	ldr	r2, [pc, #108]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	b25a      	sxtb	r2, r3
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	b25b      	sxtb	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b259      	sxtb	r1, r3
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	4603      	mov	r3, r0
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	4413      	add	r3, r2
 8003298:	b2c9      	uxtb	r1, r1
 800329a:	4a13      	ldr	r2, [pc, #76]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 800329c:	54d1      	strb	r1, [r2, r3]
 800329e:	e01d      	b.n	80032dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032a0:	79fa      	ldrb	r2, [r7, #7]
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	b2d8      	uxtb	r0, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	4413      	add	r3, r2
 80032ae:	4a0e      	ldr	r2, [pc, #56]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	4013      	ands	r3, r2
 80032c8:	b259      	sxtb	r1, r3
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	4603      	mov	r3, r0
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	4413      	add	r3, r2
 80032d2:	b2c9      	uxtb	r1, r1
 80032d4:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 80032d6:	54d1      	strb	r1, [r2, r3]
 80032d8:	e000      	b.n	80032dc <ssd1306_DrawPixel+0x98>
        return;
 80032da:	bf00      	nop
    }
}
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	200000f8 	.word	0x200000f8

080032ec <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin, uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80032fc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003300:	3307      	adds	r3, #7
 8003302:	2b00      	cmp	r3, #0
 8003304:	da00      	bge.n	8003308 <ssd1306_DrawBitmap+0x1c>
 8003306:	3307      	adds	r3, #7
 8003308:	10db      	asrs	r3, r3, #3
 800330a:	827b      	strh	r3, [r7, #18]
    uint8_t byte = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003310:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	db46      	blt.n	80033a6 <ssd1306_DrawBitmap+0xba>
 8003318:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800331c:	2b3f      	cmp	r3, #63	@ 0x3f
 800331e:	d842      	bhi.n	80033a6 <ssd1306_DrawBitmap+0xba>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003320:	2300      	movs	r3, #0
 8003322:	75bb      	strb	r3, [r7, #22]
 8003324:	e039      	b.n	800339a <ssd1306_DrawBitmap+0xae>
        for (uint8_t i = 0; i < w; i++) {
 8003326:	2300      	movs	r3, #0
 8003328:	757b      	strb	r3, [r7, #21]
 800332a:	e029      	b.n	8003380 <ssd1306_DrawBitmap+0x94>
            if (i & 7) {
 800332c:	7d7b      	ldrb	r3, [r7, #21]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <ssd1306_DrawBitmap+0x52>
                byte <<= 1;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
 800333c:	e00d      	b.n	800335a <ssd1306_DrawBitmap+0x6e>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800333e:	7dbb      	ldrb	r3, [r7, #22]
 8003340:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	7d7a      	ldrb	r2, [r7, #21]
 800334a:	08d2      	lsrs	r2, r2, #3
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	4413      	add	r3, r2
 8003350:	461a      	mov	r2, r3
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	4413      	add	r3, r2
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	75fb      	strb	r3, [r7, #23]
            }

            if (byte & 0x80) {
 800335a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da0b      	bge.n	800337a <ssd1306_DrawBitmap+0x8e>
                ssd1306_DrawPixel(x + i, y, color);
 8003362:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003366:	7d7b      	ldrb	r3, [r7, #21]
 8003368:	4413      	add	r3, r2
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003370:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff65 	bl	8003244 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800337a:	7d7b      	ldrb	r3, [r7, #21]
 800337c:	3301      	adds	r3, #1
 800337e:	757b      	strb	r3, [r7, #21]
 8003380:	7d7a      	ldrb	r2, [r7, #21]
 8003382:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003386:	429a      	cmp	r2, r3
 8003388:	d3d0      	bcc.n	800332c <ssd1306_DrawBitmap+0x40>
    for (uint8_t j = 0; j < h; j++, y++) {
 800338a:	7dbb      	ldrb	r3, [r7, #22]
 800338c:	3301      	adds	r3, #1
 800338e:	75bb      	strb	r3, [r7, #22]
 8003390:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003394:	3301      	adds	r3, #1
 8003396:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800339a:	7dba      	ldrb	r2, [r7, #22]
 800339c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3c0      	bcc.n	8003326 <ssd1306_DrawBitmap+0x3a>
            }
        }
    }
    return;
 80033a4:	e000      	b.n	80033a8 <ssd1306_DrawBitmap+0xbc>
        return;
 80033a6:	bf00      	nop
}
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <ssd1306_SetContrast>:

void ssd1306_SetContrast(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin, const uint8_t value) {
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af02      	add	r7, sp, #8
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
    const uint8_t kSetContrastControlRegister = 0x81;
 80033be:	2381      	movs	r3, #129	@ 0x81
 80033c0:	75fb      	strb	r3, [r7, #23]
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, kSetContrastControlRegister);
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	2381      	movs	r3, #129	@ 0x81
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	8c3b      	ldrh	r3, [r7, #32]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff fd4f 	bl	8002e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, value);
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	8c3b      	ldrh	r3, [r7, #32]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff fd44 	bl	8002e74 <ssd1306_WriteCommand>
}
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(SPI_HandleTypeDef* spi_port, GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* dc_port, uint16_t dc_pin, const uint8_t on) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
    uint8_t value;
    if (on) {
 8003404:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 800340c:	23af      	movs	r3, #175	@ 0xaf
 800340e:	75fb      	strb	r3, [r7, #23]
        SSD1306.DisplayOn = 1;
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <ssd1306_SetDisplayOn+0x4c>)
 8003412:	2201      	movs	r2, #1
 8003414:	715a      	strb	r2, [r3, #5]
 8003416:	e004      	b.n	8003422 <ssd1306_SetDisplayOn+0x2e>
    } else {
        value = 0xAE;   // Display off
 8003418:	23ae      	movs	r3, #174	@ 0xae
 800341a:	75fb      	strb	r3, [r7, #23]
        SSD1306.DisplayOn = 0;
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <ssd1306_SetDisplayOn+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(spi_port, cs_port, cs_pin, dc_port, dc_pin, value);
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	8c3b      	ldrh	r3, [r7, #32]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd1f 	bl	8002e74 <ssd1306_WriteCommand>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200004f8 	.word	0x200004f8

08003444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_MspInit+0x4c>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4a0f      	ldr	r2, [pc, #60]	@ (8003490 <HAL_MspInit+0x4c>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003458:	6453      	str	r3, [r2, #68]	@ 0x44
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <HAL_MspInit+0x4c>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_MspInit+0x4c>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <HAL_MspInit+0x4c>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_MspInit+0x4c>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <NMI_Handler+0x4>

0800349c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <HardFault_Handler+0x4>

080034a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a8:	bf00      	nop
 80034aa:	e7fd      	b.n	80034a8 <MemManage_Handler+0x4>

080034ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <BusFault_Handler+0x4>

080034b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <UsageFault_Handler+0x4>

080034bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ea:	f001 f8a1 	bl	8004630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034f8:	4802      	ldr	r0, [pc, #8]	@ (8003504 <USART2_IRQHandler+0x10>)
 80034fa:	f002 fb97 	bl	8005c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000564 	.word	0x20000564

08003508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return 1;
 800350c:	2301      	movs	r3, #1
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_kill>:

int _kill(int pid, int sig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003522:	f003 fff5 	bl	8007510 <__errno>
 8003526:	4603      	mov	r3, r0
 8003528:	2216      	movs	r2, #22
 800352a:	601a      	str	r2, [r3, #0]
  return -1;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_exit>:

void _exit (int status)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ffe7 	bl	8003518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800354a:	bf00      	nop
 800354c:	e7fd      	b.n	800354a <_exit+0x12>
	...

08003550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <_sbrk+0x5c>)
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <_sbrk+0x60>)
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <_sbrk+0x64>)
 800356e:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <_sbrk+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <_sbrk+0x64>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d207      	bcs.n	8003590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003580:	f003 ffc6 	bl	8007510 <__errno>
 8003584:	4603      	mov	r3, r0
 8003586:	220c      	movs	r2, #12
 8003588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e009      	b.n	80035a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003590:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <_sbrk+0x64>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	4a05      	ldr	r2, [pc, #20]	@ (80035b4 <_sbrk+0x64>)
 80035a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20020000 	.word	0x20020000
 80035b0:	00000400 	.word	0x00000400
 80035b4:	20000500 	.word	0x20000500
 80035b8:	20000700 	.word	0x20000700

080035bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <SystemInit+0x20>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <SystemInit+0x20>)
 80035c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e006      	b.n	8003604 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f003 ff02 	bl	8007404 <memcmp>
 8003600:	4603      	mov	r3, r0
 8003602:	bf00      	nop
      }
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f003 fcd2 	bl	8006fc2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800361e:	4602      	mov	r2, r0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4904      	ldr	r1, [pc, #16]	@ (8003638 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8003628:	4804      	ldr	r0, [pc, #16]	@ (800363c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800362a:	f000 fc3b 	bl	8003ea4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800362e:	4603      	mov	r3, r0
					__idx, __base); }
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	080076a8 	.word	0x080076a8
 800363c:	080073f1 	.word	0x080073f1

08003640 <_ZN11DataPackageC1Ev>:
#include <string>
#include <algorithm>
#include <cstdlib>

// Raw data information structure:
struct DataPackage
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	f003 fb71 	bl	8006d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3318      	adds	r3, #24
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fb6c 	bl	8006d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3330      	adds	r3, #48	@ 0x30
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fb67 	bl	8006d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_UART_RxCpltCallback>:
DataPackage data_pack;
extern std::map<std::string, OLED*> oleds_map;


// UART Callback handling:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b0a9      	sub	sp, #164	@ 0xa4
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a86      	ldr	r2, [pc, #536]	@ (8003898 <HAL_UART_RxCpltCallback+0x228>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f040 8106 	bne.w	8003890 <HAL_UART_RxCpltCallback+0x220>
    {
    	// Increment data_index in every single byte receiving callback:
    	data_package[data_index++] = single_byte;
 8003684:	4b85      	ldr	r3, [pc, #532]	@ (800389c <HAL_UART_RxCpltCallback+0x22c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	b2d1      	uxtb	r1, r2
 800368c:	4a83      	ldr	r2, [pc, #524]	@ (800389c <HAL_UART_RxCpltCallback+0x22c>)
 800368e:	7011      	strb	r1, [r2, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	4b83      	ldr	r3, [pc, #524]	@ (80038a0 <HAL_UART_RxCpltCallback+0x230>)
 8003694:	7819      	ldrb	r1, [r3, #0]
 8003696:	4b83      	ldr	r3, [pc, #524]	@ (80038a4 <HAL_UART_RxCpltCallback+0x234>)
 8003698:	5499      	strb	r1, [r3, r2]

    	// Receive single bytes until single_byte = '\n':
    	if (single_byte == '\n' || data_index >= sizeof(data_package))
 800369a:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_UART_RxCpltCallback+0x230>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b0a      	cmp	r3, #10
 80036a0:	d004      	beq.n	80036ac <HAL_UART_RxCpltCallback+0x3c>
 80036a2:	4b7e      	ldr	r3, [pc, #504]	@ (800389c <HAL_UART_RxCpltCallback+0x22c>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b13      	cmp	r3, #19
 80036a8:	f240 80e6 	bls.w	8003878 <HAL_UART_RxCpltCallback+0x208>
    	{
    		// Start data parsing:
    		is_parsing = true;
 80036ac:	4b7e      	ldr	r3, [pc, #504]	@ (80038a8 <HAL_UART_RxCpltCallback+0x238>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]

    		std::string data(data_package);
 80036b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 f9c9 	bl	8006a4e <_ZNSaIcEC1Ev>
 80036bc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	4977      	ldr	r1, [pc, #476]	@ (80038a4 <HAL_UART_RxCpltCallback+0x234>)
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fd30 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 f9bd 	bl	8006a50 <_ZNSaIcED1Ev>

    		// Delete "\r\n":
    		data.erase(std::remove(data.begin(), data.end(), '\r'), data.end());
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 fb83 	bl	8006de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80036e0:	4604      	mov	r4, r0
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fb7f 	bl	8006dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80036ec:	4601      	mov	r1, r0
 80036ee:	230d      	movs	r3, #13
 80036f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80036f4:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80036f8:	461a      	mov	r2, r3
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fc17 	bl	8003f2e <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcET_SA_SA_RKT0_>
 8003700:	4603      	mov	r3, r0
 8003702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003704:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003708:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fc21 	bl	8003f56 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fb66 	bl	8006dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 800371e:	4603      	mov	r3, r0
 8003720:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003722:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003726:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fc12 	bl	8003f56 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373a:	4618      	mov	r0, r3
 800373c:	f003 fb9f 	bl	8006e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
    		data.erase(std::remove(data.begin(), data.end(), '\n'), data.end());
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fb4e 	bl	8006de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800374a:	4604      	mov	r4, r0
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	4618      	mov	r0, r3
 8003752:	f003 fb4a 	bl	8006dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8003756:	4601      	mov	r1, r0
 8003758:	230a      	movs	r3, #10
 800375a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800375e:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8003762:	461a      	mov	r2, r3
 8003764:	4620      	mov	r0, r4
 8003766:	f000 fbe2 	bl	8003f2e <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcET_SA_SA_RKT0_>
 800376a:	4603      	mov	r3, r0
 800376c:	643b      	str	r3, [r7, #64]	@ 0x40
 800376e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003772:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fbec 	bl	8003f56 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fb31 	bl	8006dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8003788:	4603      	mov	r3, r0
 800378a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800378c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003790:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fbdd 	bl	8003f56 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 fb6a 	bl	8006e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>

    		// Find colons:
    		size_t colon1_position = data.find(':');
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	2200      	movs	r2, #0
 80037b0:	213a      	movs	r1, #58	@ 0x3a
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 fc09 	bl	8006fca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80037b8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
			size_t colon2_position = data.find(':' , colon1_position + 1);
 80037bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	213a      	movs	r1, #58	@ 0x3a
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fbfe 	bl	8006fca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80037ce:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
//				data_pack.display_info = data.substr(0, colon1_position);
//			}
//			else
//			{

			data_pack.display_info = data.substr(0, colon1_position);
 80037d2:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80037d6:	f107 010c 	add.w	r1, r7, #12
 80037da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037de:	2200      	movs	r2, #0
 80037e0:	f003 fc90 	bl	8007104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80037e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80037e8:	4619      	mov	r1, r3
 80037ea:	4830      	ldr	r0, [pc, #192]	@ (80038ac <HAL_UART_RxCpltCallback+0x23c>)
 80037ec:	f003 facd 	bl	8006d8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80037f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fac2 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			data_pack.command_info = data.substr(colon1_position + 1, colon2_position - colon1_position - 1);
 80037fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037fe:	1c5c      	adds	r4, r3, #1
 8003800:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003810:	f107 010c 	add.w	r1, r7, #12
 8003814:	4622      	mov	r2, r4
 8003816:	f003 fc75 	bl	8007104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800381a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800381e:	4619      	mov	r1, r3
 8003820:	4823      	ldr	r0, [pc, #140]	@ (80038b0 <HAL_UART_RxCpltCallback+0x240>)
 8003822:	f003 fab2 	bl	8006d8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003826:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800382a:	4618      	mov	r0, r3
 800382c:	f003 faa7 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			data_pack.parameter_info = data.substr(colon2_position + 1);
 8003830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800383a:	f107 010c 	add.w	r1, r7, #12
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	f003 fc5f 	bl	8007104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003846:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800384a:	4619      	mov	r1, r3
 800384c:	4819      	ldr	r0, [pc, #100]	@ (80038b4 <HAL_UART_RxCpltCallback+0x244>)
 800384e:	f003 fa9c 	bl	8006d8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003852:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fa91 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//			}

    		// Finish data parsing:
    		is_parsing = false;
 800385c:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_UART_RxCpltCallback+0x238>)
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]

    		data_index = 0;
 8003862:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_UART_RxCpltCallback+0x22c>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
    		data_package[20] = {0};
 8003868:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <HAL_UART_RxCpltCallback+0x234>)
 800386a:	2200      	movs	r2, #0
 800386c:	751a      	strb	r2, [r3, #20]
    	}
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fa83 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

        // Init next data receiving if parsing finished:
        if (!is_parsing) HAL_UART_Receive_IT(&huart2, (uint8_t*)&single_byte, sizeof(single_byte));
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_UART_RxCpltCallback+0x238>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <HAL_UART_RxCpltCallback+0x220>
 8003886:	2201      	movs	r2, #1
 8003888:	4905      	ldr	r1, [pc, #20]	@ (80038a0 <HAL_UART_RxCpltCallback+0x230>)
 800388a:	480b      	ldr	r0, [pc, #44]	@ (80038b8 <HAL_UART_RxCpltCallback+0x248>)
 800388c:	f002 f9a8 	bl	8005be0 <HAL_UART_Receive_IT>
    }
}
 8003890:	bf00      	nop
 8003892:	37a4      	adds	r7, #164	@ 0xa4
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	40004400 	.word	0x40004400
 800389c:	20000519 	.word	0x20000519
 80038a0:	20000518 	.word	0x20000518
 80038a4:	20000504 	.word	0x20000504
 80038a8:	2000051a 	.word	0x2000051a
 80038ac:	2000051c 	.word	0x2000051c
 80038b0:	20000534 	.word	0x20000534
 80038b4:	2000054c 	.word	0x2000054c
 80038b8:	20000564 	.word	0x20000564

080038bc <_Z15uart_CmdHandlerv>:


// UART data handling function:
void uart_CmdHandler()
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b0af      	sub	sp, #188	@ 0xbc
 80038c0:	af00      	add	r7, sp, #0
	std::string command = data_pack.command_info;
 80038c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038c6:	49ab      	ldr	r1, [pc, #684]	@ (8003b74 <_Z15uart_CmdHandlerv+0x2b8>)
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fbcf 	bl	800706c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	std::string display_data = data_pack.display_info;
 80038ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80038d2:	49a9      	ldr	r1, [pc, #676]	@ (8003b78 <_Z15uart_CmdHandlerv+0x2bc>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 fbc9 	bl	800706c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	std::string parameter = data_pack.parameter_info;
 80038da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038de:	49a7      	ldr	r1, [pc, #668]	@ (8003b7c <_Z15uart_CmdHandlerv+0x2c0>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 fbc3 	bl	800706c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

	// All displays handling commands:
	if (display_data[1] == 'A' || display_data[1] == 'a')
 80038e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f003 fac3 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80038f2:	4603      	mov	r3, r0
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b41      	cmp	r3, #65	@ 0x41
 80038f8:	d009      	beq.n	800390e <_Z15uart_CmdHandlerv+0x52>
 80038fa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fab9 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003906:	4603      	mov	r3, r0
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b61      	cmp	r3, #97	@ 0x61
 800390c:	d101      	bne.n	8003912 <_Z15uart_CmdHandlerv+0x56>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <_Z15uart_CmdHandlerv+0x58>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8105 	beq.w	8003b24 <_Z15uart_CmdHandlerv+0x268>
	{
		// State Move:
		if (command == "MOVE" || command == "move")
 800391a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800391e:	4998      	ldr	r1, [pc, #608]	@ (8003b80 <_Z15uart_CmdHandlerv+0x2c4>)
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fb29 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <_Z15uart_CmdHandlerv+0x82>
 800392c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003930:	4994      	ldr	r1, [pc, #592]	@ (8003b84 <_Z15uart_CmdHandlerv+0x2c8>)
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb20 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <_Z15uart_CmdHandlerv+0x86>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <_Z15uart_CmdHandlerv+0x88>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03a      	beq.n	80039be <_Z15uart_CmdHandlerv+0x102>

//			first_parameter = data_pack.parameter_info.substr(comma_position - 1, 1);
//			second_parameter = data_pack.parameter_info.substr(comma_position + 1);


			for (auto& oled : oleds_map){
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <_Z15uart_CmdHandlerv+0x2cc>)
 800394a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800394e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003952:	f000 fb24 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003956:	4603      	mov	r3, r0
 8003958:	637b      	str	r3, [r7, #52]	@ 0x34
 800395a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800395e:	f7fd fad2 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003962:	4603      	mov	r3, r0
 8003964:	633b      	str	r3, [r7, #48]	@ 0x30
 8003966:	e01b      	b.n	80039a0 <_Z15uart_CmdHandlerv+0xe4>
 8003968:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd faf8 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003972:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
				oled.second->setSegment(static_cast<uint8_t>(std::stoi(parameter)));
 8003976:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800397a:	699c      	ldr	r4, [r3, #24]
 800397c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003980:	220a      	movs	r2, #10
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fe41 	bl	800360c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800398a:	4603      	mov	r3, r0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4619      	mov	r1, r3
 8003990:	4620      	mov	r0, r4
 8003992:	f7fe fb20 	bl	8001fd6 <_ZN4OLED10setSegmentEh>
			for (auto& oled : oleds_map){
 8003996:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd ff9c 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 80039a0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80039a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fb04 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1d8      	bne.n	8003968 <_Z15uart_CmdHandlerv+0xac>
//				display.second->segment = static_cast<uint8_t>(std::stoi(first_parameter));
//				if (second_parameter[0] == '+') display.second->direction = Direction_ClockWise;
//				if (second_parameter[0] == '-') display.second->direction = Direction_CounterClockWise;
//				display.second->state = State_Move;
			}
			data_pack.command_info = "";
 80039b6:	4975      	ldr	r1, [pc, #468]	@ (8003b8c <_Z15uart_CmdHandlerv+0x2d0>)
 80039b8:	486e      	ldr	r0, [pc, #440]	@ (8003b74 <_Z15uart_CmdHandlerv+0x2b8>)
 80039ba:	f003 fafe 	bl	8006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
		// State Jump:
		if (command == "JUMP" || command == "jump")
 80039be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039c2:	4973      	ldr	r1, [pc, #460]	@ (8003b90 <_Z15uart_CmdHandlerv+0x2d4>)
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fad7 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <_Z15uart_CmdHandlerv+0x126>
 80039d0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039d4:	496f      	ldr	r1, [pc, #444]	@ (8003b94 <_Z15uart_CmdHandlerv+0x2d8>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 face 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <_Z15uart_CmdHandlerv+0x12a>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <_Z15uart_CmdHandlerv+0x12c>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d050      	beq.n	8003a8e <_Z15uart_CmdHandlerv+0x1d2>
		{
			for (auto& oled : oleds_map)
 80039ec:	4b66      	ldr	r3, [pc, #408]	@ (8003b88 <_Z15uart_CmdHandlerv+0x2cc>)
 80039ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039f2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80039f6:	f000 fad2 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 80039fa:	4603      	mov	r3, r0
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fe:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003a02:	f7fd fa80 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0a:	e031      	b.n	8003a70 <_Z15uart_CmdHandlerv+0x1b4>
 8003a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd faa6 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003a16:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			{
				if(data_pack.parameter_info[0] == '+') oled.second->jumpNext();
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4857      	ldr	r0, [pc, #348]	@ (8003b7c <_Z15uart_CmdHandlerv+0x2c0>)
 8003a1e:	f003 fa2b 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003a22:	4603      	mov	r3, r0
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b2b      	cmp	r3, #43	@ 0x2b
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <_Z15uart_CmdHandlerv+0x184>
 8003a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fa8a 	bl	8001f54 <_ZN4OLED8jumpNextEv>
				if(data_pack.parameter_info[0] == '-') oled.second->jumpPrevious();
 8003a40:	2100      	movs	r1, #0
 8003a42:	484e      	ldr	r0, [pc, #312]	@ (8003b7c <_Z15uart_CmdHandlerv+0x2c0>)
 8003a44:	f003 fa18 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <_Z15uart_CmdHandlerv+0x1aa>
 8003a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fa98 	bl	8001f96 <_ZN4OLED12jumpPreviousEv>
			for (auto& oled : oleds_map)
 8003a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd ff34 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8003a70:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fa9c 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1c2      	bne.n	8003a0c <_Z15uart_CmdHandlerv+0x150>
//				if (data_pack.parameter_info[0] == '+') display.second->direction = Direction_ClockWise;
//				if (data_pack.parameter_info[0] == '-') display.second->direction = Direction_CounterClockWise;
//				display.second->state = State_Jump;
			}
			data_pack.command_info = "";
 8003a86:	4941      	ldr	r1, [pc, #260]	@ (8003b8c <_Z15uart_CmdHandlerv+0x2d0>)
 8003a88:	483a      	ldr	r0, [pc, #232]	@ (8003b74 <_Z15uart_CmdHandlerv+0x2b8>)
 8003a8a:	f003 fa96 	bl	8006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
		// State Reset:
		if (command == "RESET" || command == "reset")
 8003a8e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a92:	4941      	ldr	r1, [pc, #260]	@ (8003b98 <_Z15uart_CmdHandlerv+0x2dc>)
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fa6f 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <_Z15uart_CmdHandlerv+0x1f6>
 8003aa0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003aa4:	493d      	ldr	r1, [pc, #244]	@ (8003b9c <_Z15uart_CmdHandlerv+0x2e0>)
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fa66 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <_Z15uart_CmdHandlerv+0x1fa>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <_Z15uart_CmdHandlerv+0x1fc>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8195 	beq.w	8003de8 <_Z15uart_CmdHandlerv+0x52c>
		{
			for (auto& oled : oleds_map)
 8003abe:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <_Z15uart_CmdHandlerv+0x2cc>)
 8003ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ac4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003ac8:	f000 fa69 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003acc:	4603      	mov	r3, r0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003ad4:	f7fd fa17 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	e012      	b.n	8003b04 <_Z15uart_CmdHandlerv+0x248>
 8003ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fa3d 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003ae8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
			{
//				display.second->state = State_Reset;
				oled.second->fill(Black);
 8003aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe faf2 	bl	80020de <_ZN4OLED4fillE13SSD1306_COLOR>
			for (auto& oled : oleds_map)
 8003afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd feea 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8003b04:	f107 0220 	add.w	r2, r7, #32
 8003b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa52 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e1      	bne.n	8003ade <_Z15uart_CmdHandlerv+0x222>
			}
			data_pack.command_info = "";
 8003b1a:	491c      	ldr	r1, [pc, #112]	@ (8003b8c <_Z15uart_CmdHandlerv+0x2d0>)
 8003b1c:	4815      	ldr	r0, [pc, #84]	@ (8003b74 <_Z15uart_CmdHandlerv+0x2b8>)
 8003b1e:	f003 fa4c 	bl	8006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 8003b22:	e161      	b.n	8003de8 <_Z15uart_CmdHandlerv+0x52c>
	}
	else
	{
		// For single display handling command:
		// State Reset:
		if (command == "RESET" || command == "reset")
 8003b24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003b28:	491b      	ldr	r1, [pc, #108]	@ (8003b98 <_Z15uart_CmdHandlerv+0x2dc>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa24 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <_Z15uart_CmdHandlerv+0x28c>
 8003b36:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003b3a:	4918      	ldr	r1, [pc, #96]	@ (8003b9c <_Z15uart_CmdHandlerv+0x2e0>)
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fa1b 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <_Z15uart_CmdHandlerv+0x290>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <_Z15uart_CmdHandlerv+0x292>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d053      	beq.n	8003bfa <_Z15uart_CmdHandlerv+0x33e>
		{
			for(auto& oled : oleds_map)
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <_Z15uart_CmdHandlerv+0x2cc>)
 8003b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b58:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8003b5c:	f000 fa1f 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003b60:	4603      	mov	r3, r0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8003b68:	f7fd f9cd 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	e034      	b.n	8003bdc <_Z15uart_CmdHandlerv+0x320>
 8003b72:	bf00      	nop
 8003b74:	20000534 	.word	0x20000534
 8003b78:	2000051c 	.word	0x2000051c
 8003b7c:	2000054c 	.word	0x2000054c
 8003b80:	080076b0 	.word	0x080076b0
 8003b84:	080076b8 	.word	0x080076b8
 8003b88:	20000088 	.word	0x20000088
 8003b8c:	080076c0 	.word	0x080076c0
 8003b90:	080076c4 	.word	0x080076c4
 8003b94:	080076cc 	.word	0x080076cc
 8003b98:	080076d4 	.word	0x080076d4
 8003b9c:	080076dc 	.word	0x080076dc
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd f9dc 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003baa:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
			{
				if (oled.first == display_data)
 8003bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bb2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fa11 	bl	8003fe0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <_Z15uart_CmdHandlerv+0x316>
				{
					oled.second->fill(Black);
 8003bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fa86 	bl	80020de <_ZN4OLED4fillE13SSD1306_COLOR>
			for(auto& oled : oleds_map)
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fe7e 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8003bdc:	f107 0218 	add.w	r2, r7, #24
 8003be0:	f107 031c 	add.w	r3, r7, #28
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f9e6 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d6      	bne.n	8003ba0 <_Z15uart_CmdHandlerv+0x2e4>
//					display.second->state = State_Reset;
				}
			}
			data_pack.command_info = "";
 8003bf2:	4986      	ldr	r1, [pc, #536]	@ (8003e0c <_Z15uart_CmdHandlerv+0x550>)
 8003bf4:	4886      	ldr	r0, [pc, #536]	@ (8003e10 <_Z15uart_CmdHandlerv+0x554>)
 8003bf6:	f003 f9e0 	bl	8006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
		// State Move:
		if (command == "MOVE" || command == "move")
 8003bfa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bfe:	4985      	ldr	r1, [pc, #532]	@ (8003e14 <_Z15uart_CmdHandlerv+0x558>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f9b9 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d108      	bne.n	8003c1e <_Z15uart_CmdHandlerv+0x362>
 8003c0c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c10:	4981      	ldr	r1, [pc, #516]	@ (8003e18 <_Z15uart_CmdHandlerv+0x55c>)
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f9b0 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <_Z15uart_CmdHandlerv+0x366>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <_Z15uart_CmdHandlerv+0x368>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d045      	beq.n	8003cb4 <_Z15uart_CmdHandlerv+0x3f8>
//			size_t comma_position = data_pack.parameter_info.find(',');
//
//			first_parameter = data_pack.parameter_info.substr(comma_position - 1, 1);
//			second_parameter = data_pack.parameter_info.substr(comma_position + 1);

			for (auto& oled : oleds_map)
 8003c28:	4b7c      	ldr	r3, [pc, #496]	@ (8003e1c <_Z15uart_CmdHandlerv+0x560>)
 8003c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c2e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003c32:	f000 f9b4 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003c36:	4603      	mov	r3, r0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003c3e:	f7fd f962 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003c42:	4603      	mov	r3, r0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e026      	b.n	8003c96 <_Z15uart_CmdHandlerv+0x3da>
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd f988 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003c52:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
			{
				if(oled.first == display_data)
 8003c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c5a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f9bd 	bl	8003fe0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00f      	beq.n	8003c8c <_Z15uart_CmdHandlerv+0x3d0>
				{
					oled.second->setSegment(static_cast<uint8_t>(std::stoi(parameter)));
 8003c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c70:	699c      	ldr	r4, [r3, #24]
 8003c72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c76:	220a      	movs	r2, #10
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fcc6 	bl	800360c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8003c80:	4603      	mov	r3, r0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7fe f9a5 	bl	8001fd6 <_ZN4OLED10setSegmentEh>
			for (auto& oled : oleds_map)
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd fe21 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8003c96:	f107 0210 	add.w	r2, r7, #16
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f989 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1cd      	bne.n	8003c48 <_Z15uart_CmdHandlerv+0x38c>
////				if (display.first == display_data)
////				{
////					display.second->state = State_Move;
////				}
			}
			data_pack.command_info = "";
 8003cac:	4957      	ldr	r1, [pc, #348]	@ (8003e0c <_Z15uart_CmdHandlerv+0x550>)
 8003cae:	4858      	ldr	r0, [pc, #352]	@ (8003e10 <_Z15uart_CmdHandlerv+0x554>)
 8003cb0:	f003 f983 	bl	8006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
		// State Jump:
		if (command == "JUMP" || command == "jump")
 8003cb4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003cb8:	4959      	ldr	r1, [pc, #356]	@ (8003e20 <_Z15uart_CmdHandlerv+0x564>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f95c 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <_Z15uart_CmdHandlerv+0x41c>
 8003cc6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003cca:	4956      	ldr	r1, [pc, #344]	@ (8003e24 <_Z15uart_CmdHandlerv+0x568>)
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f953 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <_Z15uart_CmdHandlerv+0x420>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <_Z15uart_CmdHandlerv+0x422>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8082 	beq.w	8003de8 <_Z15uart_CmdHandlerv+0x52c>
		{
			if (parameter == "+")
 8003ce4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ce8:	494f      	ldr	r1, [pc, #316]	@ (8003e28 <_Z15uart_CmdHandlerv+0x56c>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f944 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d037      	beq.n	8003d66 <_Z15uart_CmdHandlerv+0x4aa>
			{
				for (auto& oled : oleds_map)
 8003cf6:	4b49      	ldr	r3, [pc, #292]	@ (8003e1c <_Z15uart_CmdHandlerv+0x560>)
 8003cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003cfc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003d00:	f000 f94d 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003d04:	4603      	mov	r3, r0
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003d0c:	f7fd f8fb 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003d10:	4603      	mov	r3, r0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	e01c      	b.n	8003d50 <_Z15uart_CmdHandlerv+0x494>
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd f921 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003d20:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
				{
					if (oled.first == display_data)
 8003d24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d28:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f956 	bl	8003fe0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <_Z15uart_CmdHandlerv+0x48a>
					{
						oled.second->jumpNext();
 8003d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe f907 	bl	8001f54 <_ZN4OLED8jumpNextEv>
				for (auto& oled : oleds_map)
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fdc4 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	f107 030c 	add.w	r3, r7, #12
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f92c 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1d7      	bne.n	8003d16 <_Z15uart_CmdHandlerv+0x45a>
					}
				}
			}
			if (parameter == "-")
 8003d66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d6a:	4930      	ldr	r1, [pc, #192]	@ (8003e2c <_Z15uart_CmdHandlerv+0x570>)
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f903 	bl	8003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d033      	beq.n	8003de0 <_Z15uart_CmdHandlerv+0x524>
			{
				for (auto& oled : oleds_map)
 8003d78:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <_Z15uart_CmdHandlerv+0x560>)
 8003d7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d7e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003d82:	f000 f90c 	bl	8003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>
 8003d86:	4603      	mov	r3, r0
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003d8e:	f7fd f8ba 	bl	8000f06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	e01a      	b.n	8003dce <_Z15uart_CmdHandlerv+0x512>
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd f8e1 	bl	8000f62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEdeEv>
 8003da0:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				{
					if (oled.first == display_data)
 8003da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003da8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f916 	bl	8003fe0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <_Z15uart_CmdHandlerv+0x50a>
					{
						oled.second->jumpPrevious();
 8003dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe f8e8 	bl	8001f96 <_ZN4OLED12jumpPreviousEv>
				for (auto& oled : oleds_map)
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd fd85 	bl	80018d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEEppEv>
 8003dce:	463a      	mov	r2, r7
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f8ef 	bl	8003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1db      	bne.n	8003d98 <_Z15uart_CmdHandlerv+0x4dc>
////				{
////					display.second->state = State_Jump;
////				}
//			}

			data_pack.command_info = "";
 8003de0:	490a      	ldr	r1, [pc, #40]	@ (8003e0c <_Z15uart_CmdHandlerv+0x550>)
 8003de2:	480b      	ldr	r0, [pc, #44]	@ (8003e10 <_Z15uart_CmdHandlerv+0x554>)
 8003de4:	f003 f8e9 	bl	8006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		}
	}
}
 8003de8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 ffc6 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003df2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 ffc1 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dfc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003e00:	4618      	mov	r0, r3
 8003e02:	f002 ffbc 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e06:	37bc      	adds	r7, #188	@ 0xbc
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}
 8003e0c:	080076c0 	.word	0x080076c0
 8003e10:	20000534 	.word	0x20000534
 8003e14:	080076b0 	.word	0x080076b0
 8003e18:	080076b8 	.word	0x080076b8
 8003e1c:	20000088 	.word	0x20000088
 8003e20:	080076c4 	.word	0x080076c4
 8003e24:	080076cc 	.word	0x080076cc
 8003e28:	080076e4 	.word	0x080076e4
 8003e2c:	080076e8 	.word	0x080076e8

08003e30 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	f003 fb6a 	bl	8007510 <__errno>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f003 fb64 	bl	8007510 <__errno>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	f003 fb56 	bl	8007510 <__errno>
 8003e64:	4603      	mov	r3, r0
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8003e76:	f003 fb4b 	bl	8007510 <__errno>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8003e96:	2300      	movs	r3, #0
	  }
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b08b      	sub	sp, #44	@ 0x2c
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ffba 	bl	8003e30 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8003ebc:	f107 0118 	add.w	r1, r7, #24
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
 8003ec8:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d102      	bne.n	8003ed8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8003ed2:	68b8      	ldr	r0, [r7, #8]
 8003ed4:	f002 fe83 	bl	8006bde <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8003ed8:	f003 fb1a 	bl	8007510 <__errno>
 8003edc:	4603      	mov	r3, r0
 8003ede:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8003ee0:	2b22      	cmp	r3, #34	@ 0x22
 8003ee2:	d006      	beq.n	8003ef2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ee8:	f7ff ffd0 	bl	8003e8c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8003ef6:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f002 fe74 	bl	8006bea <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	623b      	str	r3, [r7, #32]

      if (__idx)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	601a      	str	r2, [r3, #0]

      return __ret;
 8003f18:	6a3c      	ldr	r4, [r7, #32]
    }
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff9a 	bl	8003e58 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8003f24:	4623      	mov	r3, r4
    }
 8003f26:	4618      	mov	r0, r3
 8003f28:	372c      	adds	r7, #44	@ 0x2c
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}

08003f2e <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcET_SA_SA_RKT0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f87a 	bl	8004034 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f883 	bl	8004052 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>
 8003f4c:	4603      	mov	r3, r0
		__gnu_cxx::__ops::__iter_equals_val(__value));
    }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcvEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8003f60:	6838      	ldr	r0, [r7, #0]
 8003f62:	f000 f8cf 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f66:	4603      	mov	r3, r0
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f003 f843 	bl	8007010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fd fd76 	bl	8001a9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4OLEDESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4OLEDEESD_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    operator==(const basic_string<_CharT>& __lhs,
 8003fe0:	b5b0      	push	{r4, r5, r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
    { return (__lhs.size() == __rhs.size()
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f002 ff01 	bl	8006df2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	f002 fefd 	bl	8006df2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003ff8:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8003ffa:	429c      	cmp	r4, r3
 8003ffc:	d115      	bne.n	800402a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f002 ffe1 	bl	8006fc6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8004004:	4604      	mov	r4, r0
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f002 ffdd 	bl	8006fc6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800400c:	4605      	mov	r5, r0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f002 feef 	bl	8006df2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	4629      	mov	r1, r5
 800401a:	4620      	mov	r0, r4
 800401c:	f7ff fae0 	bl	80035e0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 800402a:	2300      	movs	r3, #0
						    __lhs.size())); }
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bdb0      	pop	{r4, r5, r7, pc}

08004034 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f869 	bl	800411a <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b087      	sub	sp, #28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f868 	bl	8004138 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>
 8004068:	4603      	mov	r3, r0
 800406a:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 800406c:	f107 0208 	add.w	r2, r7, #8
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f874 	bl	8004164 <_ZN9__gnu_cxxeqIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x34>
	return __first;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	e03a      	b.n	80040fc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0xaa>
      _ForwardIterator __result = __first;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	617b      	str	r3, [r7, #20]
      ++__first;
 800408a:	f107 030c 	add.w	r3, r7, #12
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f880 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
      for (; __first != __last; ++__first)
 8004094:	e026      	b.n	80040e4 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x92>
	if (!__pred(__first))
 8004096:	1d3b      	adds	r3, r7, #4
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f8a2 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f083 0301 	eor.w	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x88>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f8ae 	bl	8004212 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f8b6 	bl	800422a <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 80040be:	4604      	mov	r4, r0
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f8a4 	bl	8004212 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80040ca:	4603      	mov	r3, r0
 80040cc:	7822      	ldrb	r2, [r4, #0]
 80040ce:	701a      	strb	r2, [r3, #0]
	    ++__result;
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f85d 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
      for (; __first != __last; ++__first)
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f858 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80040e4:	f107 0208 	add.w	r2, r7, #8
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f860 	bl	80041b4 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1cd      	bne.n	8004096 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_+0x44>
	  }
      return __result;
 80040fa:	697b      	ldr	r3, [r7, #20]
    }
 80040fc:	4618      	mov	r0, r3
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}

08004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	601a      	str	r2, [r3, #0]
      { }
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f879 	bl	8004240 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 800414e:	4623      	mov	r3, r4
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f87e 	bl	8004256 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag>
 800415a:	4603      	mov	r3, r0
    }
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bd90      	pop	{r4, r7, pc}

08004164 <_ZN9__gnu_cxxeqIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ffc8 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004174:	4603      	mov	r3, r0
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	f7ff ffc3 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800417e:	4603      	mov	r3, r0
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	429c      	cmp	r4, r3
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}

08004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
	return *this;
 80041a6:	687b      	ldr	r3, [r7, #4]
      }
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ffa0 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	681c      	ldr	r4, [r3, #0]
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	f7ff ff9b 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80041ce:	4603      	mov	r3, r0
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	429c      	cmp	r4, r3
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}

080041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>:
	operator()(_Iterator __it)
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 80041ee:	463b      	mov	r3, r7
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f80e 	bl	8004212 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004248:	bf00      	nop
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8004264:	f107 020c 	add.w	r2, r7, #12
 8004268:	f107 0308 	add.w	r3, r7, #8
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f88a 	bl	8004388 <_ZN9__gnu_cxxmiIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8004274:	4603      	mov	r3, r0
 8004276:	109b      	asrs	r3, r3, #2
 8004278:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800427a:	e03e      	b.n	80042fa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ffaf 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	e077      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff7d 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ffa0 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	e068      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff ff6e 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff91 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	e059      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ff5f 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff82 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	e04a      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80042ea:	f107 030c 	add.w	r3, r7, #12
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff50 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	dcbd      	bgt.n	800427c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 8004300:	f107 020c 	add.w	r2, r7, #12
 8004304:	f107 0308 	add.w	r3, r7, #8
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f83c 	bl	8004388 <_ZN9__gnu_cxxmiIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8004310:	4603      	mov	r3, r0
 8004312:	2b03      	cmp	r3, #3
 8004314:	d006      	beq.n	8004324 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xce>
 8004316:	2b03      	cmp	r3, #3
 8004318:	dc31      	bgt.n	800437e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x128>
 800431a:	2b01      	cmp	r3, #1
 800431c:	d020      	beq.n	8004360 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x10a>
 800431e:	2b02      	cmp	r3, #2
 8004320:	d00f      	beq.n	8004342 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xec>
 8004322:	e02c      	b.n	800437e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8004324:	1d3b      	adds	r3, r7, #4
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff5b 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e023      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff29 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ff4c 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	e014      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004356:	f107 030c 	add.w	r3, r7, #12
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff1a 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  if (__pred(__first))
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff3d 	bl	80041e4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	e005      	b.n	8004380 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEET_SE_SE_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff0b 	bl	8004194 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
	  return __last;
 800437e:	68bb      	ldr	r3, [r7, #8]
    }
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN9__gnu_cxxmiIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff feb6 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004398:	4603      	mov	r3, r0
 800439a:	681c      	ldr	r4, [r3, #0]
 800439c:	6838      	ldr	r0, [r7, #0]
 800439e:	f7ff feb1 	bl	8004104 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80043a2:	4603      	mov	r3, r0
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1ae3      	subs	r3, r4, r3
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}

080043b0 <_ZN11DataPackageD1Ev>:
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3330      	adds	r3, #48	@ 0x30
 80043bc:	4618      	mov	r0, r3
 80043be:	f002 fcde 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3318      	adds	r3, #24
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 fcd9 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 fcd5 	bl	8006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <_Z41__static_initialization_and_destruction_0ii>:
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d102      	bne.n	8004400 <_Z41__static_initialization_and_destruction_0ii+0x20>
DataPackage data_pack;
 80043fa:	4809      	ldr	r0, [pc, #36]	@ (8004420 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80043fc:	f7ff f920 	bl	8003640 <_ZN11DataPackageC1Ev>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d107      	bne.n	8004416 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800440c:	4293      	cmp	r3, r2
 800440e:	d102      	bne.n	8004416 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004410:	4803      	ldr	r0, [pc, #12]	@ (8004420 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004412:	f7ff ffcd 	bl	80043b0 <_ZN11DataPackageD1Ev>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2000051c 	.word	0x2000051c

08004424 <_GLOBAL__sub_I_data_package>:
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
 8004428:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800442c:	2001      	movs	r0, #1
 800442e:	f7ff ffd7 	bl	80043e0 <_Z41__static_initialization_and_destruction_0ii>
 8004432:	bd80      	pop	{r7, pc}

08004434 <_GLOBAL__sub_D_data_package>:
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
 8004438:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800443c:	2000      	movs	r0, #0
 800443e:	f7ff ffcf 	bl	80043e0 <_Z41__static_initialization_and_destruction_0ii>
 8004442:	bd80      	pop	{r7, pc}

08004444 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004448:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <MX_USART2_UART_Init+0x50>)
 800444c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 8004450:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004456:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800445c:	4b0c      	ldr	r3, [pc, #48]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004462:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004468:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 800446a:	220c      	movs	r2, #12
 800446c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800446e:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 8004470:	2200      	movs	r2, #0
 8004472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800447a:	4805      	ldr	r0, [pc, #20]	@ (8004490 <MX_USART2_UART_Init+0x4c>)
 800447c:	f001 fb60 	bl	8005b40 <HAL_UART_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004486:	f7fc fc45 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000564 	.word	0x20000564
 8004494:	40004400 	.word	0x40004400

08004498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <HAL_UART_MspInit+0x94>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d133      	bne.n	8004522 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	4b1c      	ldr	r3, [pc, #112]	@ (8004530 <HAL_UART_MspInit+0x98>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004530 <HAL_UART_MspInit+0x98>)
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ca:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_UART_MspInit+0x98>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <HAL_UART_MspInit+0x98>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	4a14      	ldr	r2, [pc, #80]	@ (8004530 <HAL_UART_MspInit+0x98>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <HAL_UART_MspInit+0x98>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044f2:	230c      	movs	r3, #12
 80044f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fe:	2303      	movs	r3, #3
 8004500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004502:	2307      	movs	r3, #7
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4619      	mov	r1, r3
 800450c:	4809      	ldr	r0, [pc, #36]	@ (8004534 <HAL_UART_MspInit+0x9c>)
 800450e:	f000 fa77 	bl	8004a00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	2026      	movs	r0, #38	@ 0x26
 8004518:	f000 f9a9 	bl	800486e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800451c:	2026      	movs	r0, #38	@ 0x26
 800451e:	f000 f9c2 	bl	80048a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004522:	bf00      	nop
 8004524:	3728      	adds	r7, #40	@ 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40004400 	.word	0x40004400
 8004530:	40023800 	.word	0x40023800
 8004534:	40020000 	.word	0x40020000

08004538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004570 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800453c:	f7ff f83e 	bl	80035bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004540:	480c      	ldr	r0, [pc, #48]	@ (8004574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004542:	490d      	ldr	r1, [pc, #52]	@ (8004578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004544:	4a0d      	ldr	r2, [pc, #52]	@ (800457c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004548:	e002      	b.n	8004550 <LoopCopyDataInit>

0800454a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800454a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800454c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800454e:	3304      	adds	r3, #4

08004550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004554:	d3f9      	bcc.n	800454a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004558:	4c0a      	ldr	r4, [pc, #40]	@ (8004584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800455a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800455c:	e001      	b.n	8004562 <LoopFillZerobss>

0800455e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800455e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004560:	3204      	adds	r2, #4

08004562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004564:	d3fb      	bcc.n	800455e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004566:	f002 ffd9 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800456a:	f7fc f8cb 	bl	8000704 <main>
  bx  lr    
 800456e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004578:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800457c:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 8004580:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8004584:	200006fc 	.word	0x200006fc

08004588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004588:	e7fe      	b.n	8004588 <ADC_IRQHandler>
	...

0800458c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004590:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_Init+0x40>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0d      	ldr	r2, [pc, #52]	@ (80045cc <HAL_Init+0x40>)
 8004596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800459a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <HAL_Init+0x40>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <HAL_Init+0x40>)
 80045a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045a8:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <HAL_Init+0x40>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a07      	ldr	r2, [pc, #28]	@ (80045cc <HAL_Init+0x40>)
 80045ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045b4:	2003      	movs	r0, #3
 80045b6:	f000 f94f 	bl	8004858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ba:	200f      	movs	r0, #15
 80045bc:	f000 f808 	bl	80045d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045c0:	f7fe ff40 	bl	8003444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00

080045d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045d8:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_InitTick+0x54>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <HAL_InitTick+0x58>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f967 	bl	80048c2 <HAL_SYSTICK_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00e      	b.n	800461c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d80a      	bhi.n	800461a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004604:	2200      	movs	r2, #0
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f000 f92f 	bl	800486e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004610:	4a06      	ldr	r2, [pc, #24]	@ (800462c <HAL_InitTick+0x5c>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000000 	.word	0x20000000
 8004628:	20000008 	.word	0x20000008
 800462c:	20000004 	.word	0x20000004

08004630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_IncTick+0x20>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_IncTick+0x24>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4413      	add	r3, r2
 8004640:	4a04      	ldr	r2, [pc, #16]	@ (8004654 <HAL_IncTick+0x24>)
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000008 	.word	0x20000008
 8004654:	200005ac 	.word	0x200005ac

08004658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return uwTick;
 800465c:	4b03      	ldr	r3, [pc, #12]	@ (800466c <HAL_GetTick+0x14>)
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	200005ac 	.word	0x200005ac

08004670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004678:	f7ff ffee 	bl	8004658 <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d005      	beq.n	8004696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800468a:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <HAL_Delay+0x44>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004696:	bf00      	nop
 8004698:	f7ff ffde 	bl	8004658 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d8f7      	bhi.n	8004698 <HAL_Delay+0x28>
  {
  }
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000008 	.word	0x20000008

080046b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c8:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <__NVIC_SetPriorityGrouping+0x44>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046d4:	4013      	ands	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ea:	4a04      	ldr	r2, [pc, #16]	@ (80046fc <__NVIC_SetPriorityGrouping+0x44>)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	60d3      	str	r3, [r2, #12]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004704:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <__NVIC_GetPriorityGrouping+0x18>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 0307 	and.w	r3, r3, #7
}
 800470e:	4618      	mov	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db0b      	blt.n	8004746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	4907      	ldr	r1, [pc, #28]	@ (8004754 <__NVIC_EnableIRQ+0x38>)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2001      	movs	r0, #1
 800473e:	fa00 f202 	lsl.w	r2, r0, r2
 8004742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	e000e100 	.word	0xe000e100

08004758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004768:	2b00      	cmp	r3, #0
 800476a:	db0a      	blt.n	8004782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	b2da      	uxtb	r2, r3
 8004770:	490c      	ldr	r1, [pc, #48]	@ (80047a4 <__NVIC_SetPriority+0x4c>)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	440b      	add	r3, r1
 800477c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004780:	e00a      	b.n	8004798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	4908      	ldr	r1, [pc, #32]	@ (80047a8 <__NVIC_SetPriority+0x50>)
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	3b04      	subs	r3, #4
 8004790:	0112      	lsls	r2, r2, #4
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	440b      	add	r3, r1
 8004796:	761a      	strb	r2, [r3, #24]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	e000e100 	.word	0xe000e100
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	@ 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f1c3 0307 	rsb	r3, r3, #7
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	bf28      	it	cs
 80047ca:	2304      	movcs	r3, #4
 80047cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d902      	bls.n	80047dc <NVIC_EncodePriority+0x30>
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3b03      	subs	r3, #3
 80047da:	e000      	b.n	80047de <NVIC_EncodePriority+0x32>
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e0:	f04f 32ff 	mov.w	r2, #4294967295
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43da      	mvns	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	401a      	ands	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f4:	f04f 31ff 	mov.w	r1, #4294967295
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	fa01 f303 	lsl.w	r3, r1, r3
 80047fe:	43d9      	mvns	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004804:	4313      	orrs	r3, r2
         );
}
 8004806:	4618      	mov	r0, r3
 8004808:	3724      	adds	r7, #36	@ 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3b01      	subs	r3, #1
 8004820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004824:	d301      	bcc.n	800482a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004826:	2301      	movs	r3, #1
 8004828:	e00f      	b.n	800484a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800482a:	4a0a      	ldr	r2, [pc, #40]	@ (8004854 <SysTick_Config+0x40>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3b01      	subs	r3, #1
 8004830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004832:	210f      	movs	r1, #15
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	f7ff ff8e 	bl	8004758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <SysTick_Config+0x40>)
 800483e:	2200      	movs	r2, #0
 8004840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004842:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <SysTick_Config+0x40>)
 8004844:	2207      	movs	r2, #7
 8004846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	e000e010 	.word	0xe000e010

08004858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ff29 	bl	80046b8 <__NVIC_SetPriorityGrouping>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	4603      	mov	r3, r0
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004880:	f7ff ff3e 	bl	8004700 <__NVIC_GetPriorityGrouping>
 8004884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	6978      	ldr	r0, [r7, #20]
 800488c:	f7ff ff8e 	bl	80047ac <NVIC_EncodePriority>
 8004890:	4602      	mov	r2, r0
 8004892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff5d 	bl	8004758 <__NVIC_SetPriority>
}
 800489e:	bf00      	nop
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff31 	bl	800471c <__NVIC_EnableIRQ>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ffa2 	bl	8004814 <SysTick_Config>
 80048d0:	4603      	mov	r3, r0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7ff feb6 	bl	8004658 <HAL_GetTick>
 80048ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d008      	beq.n	800490c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e052      	b.n	80049b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0216 	bic.w	r2, r2, #22
 800491a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800492a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <HAL_DMA_Abort+0x62>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0208 	bic.w	r2, r2, #8
 800494a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800495c:	e013      	b.n	8004986 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800495e:	f7ff fe7b 	bl	8004658 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b05      	cmp	r3, #5
 800496a:	d90c      	bls.n	8004986 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2203      	movs	r2, #3
 8004976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e015      	b.n	80049b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e4      	bne.n	800495e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	223f      	movs	r2, #63	@ 0x3f
 800499a:	409a      	lsls	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d004      	beq.n	80049d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2280      	movs	r2, #128	@ 0x80
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e00c      	b.n	80049f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2205      	movs	r2, #5
 80049dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	@ 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e159      	b.n	8004cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	f040 8148 	bne.w	8004cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d005      	beq.n	8004a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d130      	bne.n	8004ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a88:	2201      	movs	r2, #1
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 0201 	and.w	r2, r3, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d017      	beq.n	8004af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d123      	bne.n	8004b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	220f      	movs	r2, #15
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	08da      	lsrs	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3208      	adds	r2, #8
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a2 	beq.w	8004cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4b57      	ldr	r3, [pc, #348]	@ (8004ce8 <HAL_GPIO_Init+0x2e8>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	4a56      	ldr	r2, [pc, #344]	@ (8004ce8 <HAL_GPIO_Init+0x2e8>)
 8004b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b96:	4b54      	ldr	r3, [pc, #336]	@ (8004ce8 <HAL_GPIO_Init+0x2e8>)
 8004b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ba2:	4a52      	ldr	r2, [pc, #328]	@ (8004cec <HAL_GPIO_Init+0x2ec>)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	089b      	lsrs	r3, r3, #2
 8004ba8:	3302      	adds	r3, #2
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	220f      	movs	r2, #15
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a49      	ldr	r2, [pc, #292]	@ (8004cf0 <HAL_GPIO_Init+0x2f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d019      	beq.n	8004c02 <HAL_GPIO_Init+0x202>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a48      	ldr	r2, [pc, #288]	@ (8004cf4 <HAL_GPIO_Init+0x2f4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_GPIO_Init+0x1fe>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a47      	ldr	r2, [pc, #284]	@ (8004cf8 <HAL_GPIO_Init+0x2f8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00d      	beq.n	8004bfa <HAL_GPIO_Init+0x1fa>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a46      	ldr	r2, [pc, #280]	@ (8004cfc <HAL_GPIO_Init+0x2fc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <HAL_GPIO_Init+0x1f6>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a45      	ldr	r2, [pc, #276]	@ (8004d00 <HAL_GPIO_Init+0x300>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d101      	bne.n	8004bf2 <HAL_GPIO_Init+0x1f2>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	e008      	b.n	8004c04 <HAL_GPIO_Init+0x204>
 8004bf2:	2307      	movs	r3, #7
 8004bf4:	e006      	b.n	8004c04 <HAL_GPIO_Init+0x204>
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e004      	b.n	8004c04 <HAL_GPIO_Init+0x204>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e002      	b.n	8004c04 <HAL_GPIO_Init+0x204>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_GPIO_Init+0x204>
 8004c02:	2300      	movs	r3, #0
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	f002 0203 	and.w	r2, r2, #3
 8004c0a:	0092      	lsls	r2, r2, #2
 8004c0c:	4093      	lsls	r3, r2
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c14:	4935      	ldr	r1, [pc, #212]	@ (8004cec <HAL_GPIO_Init+0x2ec>)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	089b      	lsrs	r3, r3, #2
 8004c1a:	3302      	adds	r3, #2
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c22:	4b38      	ldr	r3, [pc, #224]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c46:	4a2f      	ldr	r2, [pc, #188]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c70:	4a24      	ldr	r2, [pc, #144]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c76:	4b23      	ldr	r3, [pc, #140]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d04 <HAL_GPIO_Init+0x304>)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	f67f aea2 	bls.w	8004a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	3724      	adds	r7, #36	@ 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40013800 	.word	0x40013800
 8004cf0:	40020000 	.word	0x40020000
 8004cf4:	40020400 	.word	0x40020400
 8004cf8:	40020800 	.word	0x40020800
 8004cfc:	40020c00 	.word	0x40020c00
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40013c00 	.word	0x40013c00

08004d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
 8004d14:	4613      	mov	r3, r2
 8004d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d18:	787b      	ldrb	r3, [r7, #1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d24:	e003      	b.n	8004d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d26:	887b      	ldrh	r3, [r7, #2]
 8004d28:	041a      	lsls	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	619a      	str	r2, [r3, #24]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e267      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d075      	beq.n	8004e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d5a:	4b88      	ldr	r3, [pc, #544]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d00c      	beq.n	8004d80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d66:	4b85      	ldr	r3, [pc, #532]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d112      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d72:	4b82      	ldr	r3, [pc, #520]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d7e:	d10b      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	4b7e      	ldr	r3, [pc, #504]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05b      	beq.n	8004e44 <HAL_RCC_OscConfig+0x108>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d157      	bne.n	8004e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e242      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da0:	d106      	bne.n	8004db0 <HAL_RCC_OscConfig+0x74>
 8004da2:	4b76      	ldr	r3, [pc, #472]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a75      	ldr	r2, [pc, #468]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e01d      	b.n	8004dec <HAL_RCC_OscConfig+0xb0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x98>
 8004dba:	4b70      	ldr	r3, [pc, #448]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6c      	ldr	r2, [pc, #432]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e00b      	b.n	8004dec <HAL_RCC_OscConfig+0xb0>
 8004dd4:	4b69      	ldr	r3, [pc, #420]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a68      	ldr	r2, [pc, #416]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	4b66      	ldr	r3, [pc, #408]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7ff fc30 	bl	8004658 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7ff fc2c 	bl	8004658 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	@ 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e207      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0xc0>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7ff fc1c 	bl	8004658 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7ff fc18 	bl	8004658 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	@ 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e1f3      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e36:	4b51      	ldr	r3, [pc, #324]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0xe8>
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d063      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e52:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5e:	4b47      	ldr	r3, [pc, #284]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d11c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d116      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	4b41      	ldr	r3, [pc, #260]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_RCC_OscConfig+0x152>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1c7      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4937      	ldr	r1, [pc, #220]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	e03a      	b.n	8004f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eac:	4b34      	ldr	r3, [pc, #208]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7ff fbd1 	bl	8004658 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eba:	f7ff fbcd 	bl	8004658 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e1a8      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4925      	ldr	r1, [pc, #148]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
 8004eec:	e015      	b.n	8004f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7ff fbb0 	bl	8004658 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efc:	f7ff fbac 	bl	8004658 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e187      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d036      	beq.n	8004f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2e:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <HAL_RCC_OscConfig+0x248>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7ff fb90 	bl	8004658 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7ff fb8c 	bl	8004658 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e167      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCC_OscConfig+0x240>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x200>
 8004f5a:	e01b      	b.n	8004f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_RCC_OscConfig+0x248>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f62:	f7ff fb79 	bl	8004658 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	e00e      	b.n	8004f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6a:	f7ff fb75 	bl	8004658 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d907      	bls.n	8004f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e150      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	42470000 	.word	0x42470000
 8004f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	4b88      	ldr	r3, [pc, #544]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ea      	bne.n	8004f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8097 	beq.w	80050d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa6:	4b81      	ldr	r3, [pc, #516]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	4a7c      	ldr	r2, [pc, #496]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd2:	4b77      	ldr	r3, [pc, #476]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d118      	bne.n	8005010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fde:	4b74      	ldr	r3, [pc, #464]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a73      	ldr	r2, [pc, #460]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fea:	f7ff fb35 	bl	8004658 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff2:	f7ff fb31 	bl	8004658 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e10c      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	4b6a      	ldr	r3, [pc, #424]	@ (80051b0 <HAL_RCC_OscConfig+0x474>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x2ea>
 8005018:	4b64      	ldr	r3, [pc, #400]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a63      	ldr	r2, [pc, #396]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
 8005024:	e01c      	b.n	8005060 <HAL_RCC_OscConfig+0x324>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x30c>
 800502e:	4b5f      	ldr	r3, [pc, #380]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	4a5e      	ldr	r2, [pc, #376]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
 800503a:	4b5c      	ldr	r3, [pc, #368]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a5b      	ldr	r2, [pc, #364]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0x324>
 8005048:	4b58      	ldr	r3, [pc, #352]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504c:	4a57      	ldr	r2, [pc, #348]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	@ 0x70
 8005054:	4b55      	ldr	r3, [pc, #340]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005058:	4a54      	ldr	r2, [pc, #336]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 800505a:	f023 0304 	bic.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7ff faf6 	bl	8004658 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7ff faf2 	bl	8004658 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0cb      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005086:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ee      	beq.n	8005070 <HAL_RCC_OscConfig+0x334>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005094:	f7ff fae0 	bl	8004658 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7ff fadc 	bl	8004658 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0b5      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ee      	bne.n	800509c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b39      	ldr	r3, [pc, #228]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	4a38      	ldr	r2, [pc, #224]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80a1 	beq.w	800521c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050da:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d05c      	beq.n	80051a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d141      	bne.n	8005172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b31      	ldr	r3, [pc, #196]	@ (80051b4 <HAL_RCC_OscConfig+0x478>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7ff fab0 	bl	8004658 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7ff faac 	bl	8004658 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e087      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	4b27      	ldr	r3, [pc, #156]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	3b01      	subs	r3, #1
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	491b      	ldr	r1, [pc, #108]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005144:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <HAL_RCC_OscConfig+0x478>)
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7ff fa85 	bl	8004658 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7ff fa81 	bl	8004658 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e05c      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005164:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x416>
 8005170:	e054      	b.n	800521c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_RCC_OscConfig+0x478>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7ff fa6e 	bl	8004658 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7ff fa6a 	bl	8004658 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e045      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005192:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <HAL_RCC_OscConfig+0x470>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x444>
 800519e:	e03d      	b.n	800521c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e038      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40007000 	.word	0x40007000
 80051b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <HAL_RCC_OscConfig+0x4ec>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d028      	beq.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d121      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d11a      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d111      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	3b01      	subs	r3, #1
 8005202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d107      	bne.n	8005218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0cc      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	4b68      	ldr	r3, [pc, #416]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d90c      	bls.n	8005268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b65      	ldr	r3, [pc, #404]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b63      	ldr	r3, [pc, #396]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0b8      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005280:	4b59      	ldr	r3, [pc, #356]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a58      	ldr	r2, [pc, #352]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800528a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005298:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4a52      	ldr	r2, [pc, #328]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	494d      	ldr	r1, [pc, #308]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d044      	beq.n	800534c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b47      	ldr	r3, [pc, #284]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	4b3f      	ldr	r3, [pc, #252]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e06f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b3b      	ldr	r3, [pc, #236]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e067      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b37      	ldr	r3, [pc, #220]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4934      	ldr	r1, [pc, #208]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7ff f99c 	bl	8004658 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7ff f998 	bl	8004658 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e04f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b2b      	ldr	r3, [pc, #172]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d20c      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b20      	ldr	r3, [pc, #128]	@ (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e032      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b19      	ldr	r3, [pc, #100]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4916      	ldr	r1, [pc, #88]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	490e      	ldr	r1, [pc, #56]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053b2:	f000 f821 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	490a      	ldr	r1, [pc, #40]	@ (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	5ccb      	ldrb	r3, [r1, r3]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053ce:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f8fc 	bl	80045d0 <HAL_InitTick>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023c00 	.word	0x40023c00
 80053e8:	40023800 	.word	0x40023800
 80053ec:	08008c44 	.word	0x08008c44
 80053f0:	20000000 	.word	0x20000000
 80053f4:	20000004 	.word	0x20000004

080053f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053fc:	b090      	sub	sp, #64	@ 0x40
 80053fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005410:	4b59      	ldr	r3, [pc, #356]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x180>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	2b08      	cmp	r3, #8
 800541a:	d00d      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x40>
 800541c:	2b08      	cmp	r3, #8
 800541e:	f200 80a1 	bhi.w	8005564 <HAL_RCC_GetSysClockFreq+0x16c>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x34>
 8005426:	2b04      	cmp	r3, #4
 8005428:	d003      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x3a>
 800542a:	e09b      	b.n	8005564 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <HAL_RCC_GetSysClockFreq+0x184>)
 800542e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005430:	e09b      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005432:	4b53      	ldr	r3, [pc, #332]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x188>)
 8005434:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005436:	e098      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005438:	4b4f      	ldr	r3, [pc, #316]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x180>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005440:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005442:	4b4d      	ldr	r3, [pc, #308]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x180>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d028      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544e:	4b4a      	ldr	r3, [pc, #296]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x180>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	2200      	movs	r2, #0
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	627a      	str	r2, [r7, #36]	@ 0x24
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005460:	2100      	movs	r1, #0
 8005462:	4b47      	ldr	r3, [pc, #284]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x188>)
 8005464:	fb03 f201 	mul.w	r2, r3, r1
 8005468:	2300      	movs	r3, #0
 800546a:	fb00 f303 	mul.w	r3, r0, r3
 800546e:	4413      	add	r3, r2
 8005470:	4a43      	ldr	r2, [pc, #268]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x188>)
 8005472:	fba0 1202 	umull	r1, r2, r0, r2
 8005476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005478:	460a      	mov	r2, r1
 800547a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800547c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800547e:	4413      	add	r3, r2
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005484:	2200      	movs	r2, #0
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	61fa      	str	r2, [r7, #28]
 800548a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800548e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005492:	f7fa fefd 	bl	8000290 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4613      	mov	r3, r2
 800549c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800549e:	e053      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a0:	4b35      	ldr	r3, [pc, #212]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	099b      	lsrs	r3, r3, #6
 80054a6:	2200      	movs	r2, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	617a      	str	r2, [r7, #20]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054b2:	f04f 0b00 	mov.w	fp, #0
 80054b6:	4652      	mov	r2, sl
 80054b8:	465b      	mov	r3, fp
 80054ba:	f04f 0000 	mov.w	r0, #0
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	0159      	lsls	r1, r3, #5
 80054c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c8:	0150      	lsls	r0, r2, #5
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	ebb2 080a 	subs.w	r8, r2, sl
 80054d2:	eb63 090b 	sbc.w	r9, r3, fp
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054ea:	ebb2 0408 	subs.w	r4, r2, r8
 80054ee:	eb63 0509 	sbc.w	r5, r3, r9
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	00eb      	lsls	r3, r5, #3
 80054fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005500:	00e2      	lsls	r2, r4, #3
 8005502:	4614      	mov	r4, r2
 8005504:	461d      	mov	r5, r3
 8005506:	eb14 030a 	adds.w	r3, r4, sl
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	eb45 030b 	adc.w	r3, r5, fp
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800551e:	4629      	mov	r1, r5
 8005520:	028b      	lsls	r3, r1, #10
 8005522:	4621      	mov	r1, r4
 8005524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005528:	4621      	mov	r1, r4
 800552a:	028a      	lsls	r2, r1, #10
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005532:	2200      	movs	r2, #0
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	60fa      	str	r2, [r7, #12]
 8005538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800553c:	f7fa fea8 	bl	8000290 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4613      	mov	r3, r2
 8005546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x180>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	3301      	adds	r3, #1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005558:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005562:	e002      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <HAL_RCC_GetSysClockFreq+0x184>)
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800556c:	4618      	mov	r0, r3
 800556e:	3740      	adds	r7, #64	@ 0x40
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800
 800557c:	00f42400 	.word	0x00f42400
 8005580:	017d7840 	.word	0x017d7840

08005584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005588:	4b03      	ldr	r3, [pc, #12]	@ (8005598 <HAL_RCC_GetHCLKFreq+0x14>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000000 	.word	0x20000000

0800559c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055a0:	f7ff fff0 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0a9b      	lsrs	r3, r3, #10
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4903      	ldr	r1, [pc, #12]	@ (80055c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40023800 	.word	0x40023800
 80055c0:	08008c54 	.word	0x08008c54

080055c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055c8:	f7ff ffdc 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0b5b      	lsrs	r3, r3, #13
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4903      	ldr	r1, [pc, #12]	@ (80055e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40023800 	.word	0x40023800
 80055e8:	08008c54 	.word	0x08008c54

080055ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e07b      	b.n	80056f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800560e:	d009      	beq.n	8005624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
 8005616:	e005      	b.n	8005624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fd fb8c 	bl	8002d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800565a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a8:	ea42 0103 	orr.w	r1, r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f003 0104 	and.w	r1, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	f003 0210 	and.w	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b088      	sub	sp, #32
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800570e:	f7fe ffa3 	bl	8004658 <HAL_GetTick>
 8005712:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
 8005726:	e12a      	b.n	800597e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Transmit+0x36>
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e122      	b.n	800597e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_SPI_Transmit+0x48>
 8005742:	2302      	movs	r3, #2
 8005744:	e11b      	b.n	800597e <HAL_SPI_Transmit+0x280>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2203      	movs	r2, #3
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	88fa      	ldrh	r2, [r7, #6]
 8005766:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005794:	d10f      	bne.n	80057b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c0:	2b40      	cmp	r3, #64	@ 0x40
 80057c2:	d007      	beq.n	80057d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057dc:	d152      	bne.n	8005884 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_Transmit+0xee>
 80057e6:	8b7b      	ldrh	r3, [r7, #26]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d145      	bne.n	8005878 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	881a      	ldrh	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005810:	e032      	b.n	8005878 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d112      	bne.n	8005846 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005844:	e018      	b.n	8005878 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005846:	f7fe ff07 	bl	8004658 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d803      	bhi.n	800585e <HAL_SPI_Transmit+0x160>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d102      	bne.n	8005864 <HAL_SPI_Transmit+0x166>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d109      	bne.n	8005878 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e082      	b.n	800597e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1c7      	bne.n	8005812 <HAL_SPI_Transmit+0x114>
 8005882:	e053      	b.n	800592c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x194>
 800588c:	8b7b      	ldrh	r3, [r7, #26]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d147      	bne.n	8005922 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058b8:	e033      	b.n	8005922 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d113      	bne.n	80058f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058ee:	e018      	b.n	8005922 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f0:	f7fe feb2 	bl	8004658 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d803      	bhi.n	8005908 <HAL_SPI_Transmit+0x20a>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d102      	bne.n	800590e <HAL_SPI_Transmit+0x210>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e02d      	b.n	800597e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1c6      	bne.n	80058ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f8b1 	bl	8005a98 <SPI_EndRxTxTransaction>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800597c:	2300      	movs	r3, #0
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005998:	f7fe fe5e 	bl	8004658 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059a8:	f7fe fe56 	bl	8004658 <HAL_GetTick>
 80059ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ae:	4b39      	ldr	r3, [pc, #228]	@ (8005a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	015b      	lsls	r3, r3, #5
 80059b4:	0d1b      	lsrs	r3, r3, #20
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	fb02 f303 	mul.w	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059be:	e054      	b.n	8005a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d050      	beq.n	8005a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059c8:	f7fe fe46 	bl	8004658 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d902      	bls.n	80059de <SPI_WaitFlagStateUntilTimeout+0x56>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d13d      	bne.n	8005a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f6:	d111      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a00:	d004      	beq.n	8005a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0a:	d107      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a24:	d10f      	bne.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e017      	b.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4013      	ands	r3, r2
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d19b      	bne.n	80059c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000000 	.word	0x20000000

08005a98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2102      	movs	r1, #2
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff ff6a 	bl	8005988 <SPI_WaitFlagStateUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	f043 0220 	orr.w	r2, r3, #32
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e032      	b.n	8005b30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aca:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <SPI_EndRxTxTransaction+0xa0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <SPI_EndRxTxTransaction+0xa4>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	0d5b      	lsrs	r3, r3, #21
 8005ad6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae8:	d112      	bne.n	8005b10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	2180      	movs	r1, #128	@ 0x80
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff ff47 	bl	8005988 <SPI_WaitFlagStateUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d016      	beq.n	8005b2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00f      	b.n	8005b30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	2b80      	cmp	r3, #128	@ 0x80
 8005b28:	d0f2      	beq.n	8005b10 <SPI_EndRxTxTransaction+0x78>
 8005b2a:	e000      	b.n	8005b2e <SPI_EndRxTxTransaction+0x96>
        break;
 8005b2c:	bf00      	nop
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000000 	.word	0x20000000
 8005b3c:	165e9f81 	.word	0x165e9f81

08005b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e042      	b.n	8005bd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fe fc96 	bl	8004498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	@ 0x24
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fcdb 	bl	8006540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d112      	bne.n	8005c20 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_UART_Receive_IT+0x26>
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e00b      	b.n	8005c22 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 faba 	bl	8006190 <UART_Start_Receive_IT>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	e000      	b.n	8005c22 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10f      	bne.n	8005c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_UART_IRQHandler+0x66>
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fb99 	bl	80063c2 <UART_Receive_IT>
      return;
 8005c90:	e25b      	b.n	800614a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80de 	beq.w	8005e58 <HAL_UART_IRQHandler+0x22c>
 8005c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80d1 	beq.w	8005e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_UART_IRQHandler+0xae>
 8005cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_UART_IRQHandler+0xd2>
 8005ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	f043 0202 	orr.w	r2, r3, #2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <HAL_UART_IRQHandler+0xf6>
 8005d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f043 0204 	orr.w	r2, r3, #4
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d011      	beq.n	8005d52 <HAL_UART_IRQHandler+0x126>
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d105      	bne.n	8005d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	f043 0208 	orr.w	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 81f2 	beq.w	8006140 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_UART_IRQHandler+0x14e>
 8005d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fb24 	bl	80063c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <HAL_UART_IRQHandler+0x17a>
 8005d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d04f      	beq.n	8005e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa2c 	bl	8006204 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d141      	bne.n	8005e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005de6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1d9      	bne.n	8005dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d013      	beq.n	8005e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e12:	4a7e      	ldr	r2, [pc, #504]	@ (800600c <HAL_UART_IRQHandler+0x3e0>)
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fdcd 	bl	80049ba <HAL_DMA_Abort_IT>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d016      	beq.n	8005e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e00e      	b.n	8005e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f994 	bl	8006164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	e00a      	b.n	8005e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f990 	bl	8006164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	e006      	b.n	8005e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f98c 	bl	8006164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e52:	e175      	b.n	8006140 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	bf00      	nop
    return;
 8005e56:	e173      	b.n	8006140 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 814f 	bne.w	8006100 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8148 	beq.w	8006100 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8141 	beq.w	8006100 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	f040 80b6 	bne.w	8006010 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8145 	beq.w	8006144 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	f080 813e 	bcs.w	8006144 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eda:	f000 8088 	beq.w	8005fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1d9      	bne.n	8005ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3314      	adds	r3, #20
 8005f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e1      	bne.n	8005f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3314      	adds	r3, #20
 8005f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e3      	bne.n	8005f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fbe:	f023 0310 	bic.w	r3, r3, #16
 8005fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005fd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005fd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e3      	bne.n	8005fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fc76 	bl	80048da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	b29b      	uxth	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8b7 	bl	8006178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800600a:	e09b      	b.n	8006144 <HAL_UART_IRQHandler+0x518>
 800600c:	080062cb 	.word	0x080062cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006018:	b29b      	uxth	r3, r3
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 808e 	beq.w	8006148 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800602c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8089 	beq.w	8006148 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800604c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800605a:	647a      	str	r2, [r7, #68]	@ 0x44
 800605c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e3      	bne.n	8006036 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	623b      	str	r3, [r7, #32]
   return(result);
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3314      	adds	r3, #20
 800608e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006092:	633a      	str	r2, [r7, #48]	@ 0x30
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e3      	bne.n	800606e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0310 	bic.w	r3, r3, #16
 80060ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80060d8:	61fa      	str	r2, [r7, #28]
 80060da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	69b9      	ldr	r1, [r7, #24]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	617b      	str	r3, [r7, #20]
   return(result);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e3      	bne.n	80060b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f83d 	bl	8006178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060fe:	e023      	b.n	8006148 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_UART_IRQHandler+0x4f4>
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f8ea 	bl	80062f2 <UART_Transmit_IT>
    return;
 800611e:	e014      	b.n	800614a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <HAL_UART_IRQHandler+0x51e>
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f92a 	bl	8006392 <UART_EndTransmit_IT>
    return;
 800613e:	e004      	b.n	800614a <HAL_UART_IRQHandler+0x51e>
    return;
 8006140:	bf00      	nop
 8006142:	e002      	b.n	800614a <HAL_UART_IRQHandler+0x51e>
      return;
 8006144:	bf00      	nop
 8006146:	e000      	b.n	800614a <HAL_UART_IRQHandler+0x51e>
      return;
 8006148:	bf00      	nop
  }
}
 800614a:	37e8      	adds	r7, #232	@ 0xe8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2222      	movs	r2, #34	@ 0x22
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0220 	orr.w	r2, r2, #32
 80061f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b095      	sub	sp, #84	@ 0x54
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800622c:	643a      	str	r2, [r7, #64]	@ 0x40
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3314      	adds	r3, #20
 8006246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3314      	adds	r3, #20
 800625e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e5      	bne.n	8006240 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006278:	2b01      	cmp	r3, #1
 800627a:	d119      	bne.n	80062b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	60bb      	str	r3, [r7, #8]
   return(result);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 0310 	bic.w	r3, r3, #16
 8006292:	647b      	str	r3, [r7, #68]	@ 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800629c:	61ba      	str	r2, [r7, #24]
 800629e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6979      	ldr	r1, [r7, #20]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	613b      	str	r3, [r7, #16]
   return(result);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e5      	bne.n	800627c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062be:	bf00      	nop
 80062c0:	3754      	adds	r7, #84	@ 0x54
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ff3d 	bl	8006164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b21      	cmp	r3, #33	@ 0x21
 8006304:	d13e      	bne.n	8006384 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630e:	d114      	bne.n	800633a <UART_Transmit_IT+0x48>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d110      	bne.n	800633a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800632c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	621a      	str	r2, [r3, #32]
 8006338:	e008      	b.n	800634c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6211      	str	r1, [r2, #32]
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29b      	uxth	r3, r3
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4619      	mov	r1, r3
 800635a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10f      	bne.n	8006380 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800636e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800637e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fecc 	bl	8006150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b08c      	sub	sp, #48	@ 0x30
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b22      	cmp	r3, #34	@ 0x22
 80063d4:	f040 80ae 	bne.w	8006534 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e0:	d117      	bne.n	8006412 <UART_Receive_IT+0x50>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d113      	bne.n	8006412 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006400:	b29a      	uxth	r2, r3
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	1c9a      	adds	r2, r3, #2
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006410:	e026      	b.n	8006460 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006424:	d007      	beq.n	8006436 <UART_Receive_IT+0x74>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <UART_Receive_IT+0x82>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e008      	b.n	8006456 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4619      	mov	r1, r3
 800646e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006470:	2b00      	cmp	r3, #0
 8006472:	d15d      	bne.n	8006530 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0220 	bic.w	r2, r2, #32
 8006482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d135      	bne.n	8006526 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	613b      	str	r3, [r7, #16]
   return(result);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f023 0310 	bic.w	r3, r3, #16
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e0:	623a      	str	r2, [r7, #32]
 80064e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e5      	bne.n	80064c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d10a      	bne.n	8006518 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fe2a 	bl	8006178 <HAL_UARTEx_RxEventCallback>
 8006524:	e002      	b.n	800652c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fd f8a2 	bl	8003670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e002      	b.n	8006536 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3730      	adds	r7, #48	@ 0x30
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006544:	b0c0      	sub	sp, #256	@ 0x100
 8006546:	af00      	add	r7, sp, #0
 8006548:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	68d9      	ldr	r1, [r3, #12]
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	ea40 0301 	orr.w	r3, r0, r1
 8006568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	431a      	orrs	r2, r3
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	431a      	orrs	r2, r3
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006598:	f021 010c 	bic.w	r1, r1, #12
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065a6:	430b      	orrs	r3, r1
 80065a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	6999      	ldr	r1, [r3, #24]
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	ea40 0301 	orr.w	r3, r0, r1
 80065c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b8f      	ldr	r3, [pc, #572]	@ (800680c <UART_SetConfig+0x2cc>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d005      	beq.n	80065e0 <UART_SetConfig+0xa0>
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b8d      	ldr	r3, [pc, #564]	@ (8006810 <UART_SetConfig+0x2d0>)
 80065dc:	429a      	cmp	r2, r3
 80065de:	d104      	bne.n	80065ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7fe fff0 	bl	80055c4 <HAL_RCC_GetPCLK2Freq>
 80065e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065e8:	e003      	b.n	80065f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fe ffd7 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 80065ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065fc:	f040 810c 	bne.w	8006818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006604:	2200      	movs	r2, #0
 8006606:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800660a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800660e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	1891      	adds	r1, r2, r2
 8006618:	65b9      	str	r1, [r7, #88]	@ 0x58
 800661a:	415b      	adcs	r3, r3
 800661c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800661e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006622:	4621      	mov	r1, r4
 8006624:	eb12 0801 	adds.w	r8, r2, r1
 8006628:	4629      	mov	r1, r5
 800662a:	eb43 0901 	adc.w	r9, r3, r1
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800663a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800663e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006642:	4690      	mov	r8, r2
 8006644:	4699      	mov	r9, r3
 8006646:	4623      	mov	r3, r4
 8006648:	eb18 0303 	adds.w	r3, r8, r3
 800664c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006650:	462b      	mov	r3, r5
 8006652:	eb49 0303 	adc.w	r3, r9, r3
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006666:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800666a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800666e:	460b      	mov	r3, r1
 8006670:	18db      	adds	r3, r3, r3
 8006672:	653b      	str	r3, [r7, #80]	@ 0x50
 8006674:	4613      	mov	r3, r2
 8006676:	eb42 0303 	adc.w	r3, r2, r3
 800667a:	657b      	str	r3, [r7, #84]	@ 0x54
 800667c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006684:	f7f9 fe04 	bl	8000290 <__aeabi_uldivmod>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4b61      	ldr	r3, [pc, #388]	@ (8006814 <UART_SetConfig+0x2d4>)
 800668e:	fba3 2302 	umull	r2, r3, r3, r2
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	011c      	lsls	r4, r3, #4
 8006696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800669a:	2200      	movs	r2, #0
 800669c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066a8:	4642      	mov	r2, r8
 80066aa:	464b      	mov	r3, r9
 80066ac:	1891      	adds	r1, r2, r2
 80066ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066b0:	415b      	adcs	r3, r3
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066b8:	4641      	mov	r1, r8
 80066ba:	eb12 0a01 	adds.w	sl, r2, r1
 80066be:	4649      	mov	r1, r9
 80066c0:	eb43 0b01 	adc.w	fp, r3, r1
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066d8:	4692      	mov	sl, r2
 80066da:	469b      	mov	fp, r3
 80066dc:	4643      	mov	r3, r8
 80066de:	eb1a 0303 	adds.w	r3, sl, r3
 80066e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066e6:	464b      	mov	r3, r9
 80066e8:	eb4b 0303 	adc.w	r3, fp, r3
 80066ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006704:	460b      	mov	r3, r1
 8006706:	18db      	adds	r3, r3, r3
 8006708:	643b      	str	r3, [r7, #64]	@ 0x40
 800670a:	4613      	mov	r3, r2
 800670c:	eb42 0303 	adc.w	r3, r2, r3
 8006710:	647b      	str	r3, [r7, #68]	@ 0x44
 8006712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800671a:	f7f9 fdb9 	bl	8000290 <__aeabi_uldivmod>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4611      	mov	r1, r2
 8006724:	4b3b      	ldr	r3, [pc, #236]	@ (8006814 <UART_SetConfig+0x2d4>)
 8006726:	fba3 2301 	umull	r2, r3, r3, r1
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	2264      	movs	r2, #100	@ 0x64
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	1acb      	subs	r3, r1, r3
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800673a:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <UART_SetConfig+0x2d4>)
 800673c:	fba3 2302 	umull	r2, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006748:	441c      	add	r4, r3
 800674a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006754:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	1891      	adds	r1, r2, r2
 8006762:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006764:	415b      	adcs	r3, r3
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800676c:	4641      	mov	r1, r8
 800676e:	1851      	adds	r1, r2, r1
 8006770:	6339      	str	r1, [r7, #48]	@ 0x30
 8006772:	4649      	mov	r1, r9
 8006774:	414b      	adcs	r3, r1
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006784:	4659      	mov	r1, fp
 8006786:	00cb      	lsls	r3, r1, #3
 8006788:	4651      	mov	r1, sl
 800678a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678e:	4651      	mov	r1, sl
 8006790:	00ca      	lsls	r2, r1, #3
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	4603      	mov	r3, r0
 8006798:	4642      	mov	r2, r8
 800679a:	189b      	adds	r3, r3, r2
 800679c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067a0:	464b      	mov	r3, r9
 80067a2:	460a      	mov	r2, r1
 80067a4:	eb42 0303 	adc.w	r3, r2, r3
 80067a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067c0:	460b      	mov	r3, r1
 80067c2:	18db      	adds	r3, r3, r3
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c6:	4613      	mov	r3, r2
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067d6:	f7f9 fd5b 	bl	8000290 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <UART_SetConfig+0x2d4>)
 80067e0:	fba3 1302 	umull	r1, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	2164      	movs	r1, #100	@ 0x64
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	3332      	adds	r3, #50	@ 0x32
 80067f2:	4a08      	ldr	r2, [pc, #32]	@ (8006814 <UART_SetConfig+0x2d4>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 0207 	and.w	r2, r3, #7
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4422      	add	r2, r4
 8006806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006808:	e106      	b.n	8006a18 <UART_SetConfig+0x4d8>
 800680a:	bf00      	nop
 800680c:	40011000 	.word	0x40011000
 8006810:	40011400 	.word	0x40011400
 8006814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006822:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	1891      	adds	r1, r2, r2
 8006830:	6239      	str	r1, [r7, #32]
 8006832:	415b      	adcs	r3, r3
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
 8006836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800683a:	4641      	mov	r1, r8
 800683c:	1854      	adds	r4, r2, r1
 800683e:	4649      	mov	r1, r9
 8006840:	eb43 0501 	adc.w	r5, r3, r1
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	00eb      	lsls	r3, r5, #3
 800684e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006852:	00e2      	lsls	r2, r4, #3
 8006854:	4614      	mov	r4, r2
 8006856:	461d      	mov	r5, r3
 8006858:	4643      	mov	r3, r8
 800685a:	18e3      	adds	r3, r4, r3
 800685c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006860:	464b      	mov	r3, r9
 8006862:	eb45 0303 	adc.w	r3, r5, r3
 8006866:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800686a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006876:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006886:	4629      	mov	r1, r5
 8006888:	008b      	lsls	r3, r1, #2
 800688a:	4621      	mov	r1, r4
 800688c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006890:	4621      	mov	r1, r4
 8006892:	008a      	lsls	r2, r1, #2
 8006894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006898:	f7f9 fcfa 	bl	8000290 <__aeabi_uldivmod>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4b60      	ldr	r3, [pc, #384]	@ (8006a24 <UART_SetConfig+0x4e4>)
 80068a2:	fba3 2302 	umull	r2, r3, r3, r2
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	011c      	lsls	r4, r3, #4
 80068aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	1891      	adds	r1, r2, r2
 80068c2:	61b9      	str	r1, [r7, #24]
 80068c4:	415b      	adcs	r3, r3
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068cc:	4641      	mov	r1, r8
 80068ce:	1851      	adds	r1, r2, r1
 80068d0:	6139      	str	r1, [r7, #16]
 80068d2:	4649      	mov	r1, r9
 80068d4:	414b      	adcs	r3, r1
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e4:	4659      	mov	r1, fp
 80068e6:	00cb      	lsls	r3, r1, #3
 80068e8:	4651      	mov	r1, sl
 80068ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ee:	4651      	mov	r1, sl
 80068f0:	00ca      	lsls	r2, r1, #3
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	4642      	mov	r2, r8
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006900:	464b      	mov	r3, r9
 8006902:	460a      	mov	r2, r1
 8006904:	eb42 0303 	adc.w	r3, r2, r3
 8006908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006916:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006924:	4649      	mov	r1, r9
 8006926:	008b      	lsls	r3, r1, #2
 8006928:	4641      	mov	r1, r8
 800692a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800692e:	4641      	mov	r1, r8
 8006930:	008a      	lsls	r2, r1, #2
 8006932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006936:	f7f9 fcab 	bl	8000290 <__aeabi_uldivmod>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4611      	mov	r1, r2
 8006940:	4b38      	ldr	r3, [pc, #224]	@ (8006a24 <UART_SetConfig+0x4e4>)
 8006942:	fba3 2301 	umull	r2, r3, r3, r1
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2264      	movs	r2, #100	@ 0x64
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	1acb      	subs	r3, r1, r3
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	3332      	adds	r3, #50	@ 0x32
 8006954:	4a33      	ldr	r2, [pc, #204]	@ (8006a24 <UART_SetConfig+0x4e4>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006960:	441c      	add	r4, r3
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	673b      	str	r3, [r7, #112]	@ 0x70
 800696a:	677a      	str	r2, [r7, #116]	@ 0x74
 800696c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	1891      	adds	r1, r2, r2
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	415b      	adcs	r3, r3
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006980:	4641      	mov	r1, r8
 8006982:	1851      	adds	r1, r2, r1
 8006984:	6039      	str	r1, [r7, #0]
 8006986:	4649      	mov	r1, r9
 8006988:	414b      	adcs	r3, r1
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006998:	4659      	mov	r1, fp
 800699a:	00cb      	lsls	r3, r1, #3
 800699c:	4651      	mov	r1, sl
 800699e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a2:	4651      	mov	r1, sl
 80069a4:	00ca      	lsls	r2, r1, #3
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	4642      	mov	r2, r8
 80069ae:	189b      	adds	r3, r3, r2
 80069b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069b2:	464b      	mov	r3, r9
 80069b4:	460a      	mov	r2, r1
 80069b6:	eb42 0303 	adc.w	r3, r2, r3
 80069ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80069c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069d4:	4649      	mov	r1, r9
 80069d6:	008b      	lsls	r3, r1, #2
 80069d8:	4641      	mov	r1, r8
 80069da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069de:	4641      	mov	r1, r8
 80069e0:	008a      	lsls	r2, r1, #2
 80069e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069e6:	f7f9 fc53 	bl	8000290 <__aeabi_uldivmod>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006a24 <UART_SetConfig+0x4e4>)
 80069f0:	fba3 1302 	umull	r1, r3, r3, r2
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	2164      	movs	r1, #100	@ 0x64
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	3332      	adds	r3, #50	@ 0x32
 8006a02:	4a08      	ldr	r2, [pc, #32]	@ (8006a24 <UART_SetConfig+0x4e4>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	f003 020f 	and.w	r2, r3, #15
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4422      	add	r2, r4
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a24:	51eb851f 	.word	0x51eb851f

08006a28 <_ZdlPvj>:
 8006a28:	f000 bb98 	b.w	800715c <_ZdlPv>

08006a2c <_Znwj>:
 8006a2c:	2801      	cmp	r0, #1
 8006a2e:	bf38      	it	cc
 8006a30:	2001      	movcc	r0, #1
 8006a32:	b510      	push	{r4, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 fba2 	bl	8007180 <malloc>
 8006a3c:	b100      	cbz	r0, 8006a40 <_Znwj+0x14>
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	f000 fb8e 	bl	8007160 <_ZSt15get_new_handlerv>
 8006a44:	b908      	cbnz	r0, 8006a4a <_Znwj+0x1e>
 8006a46:	f000 fb93 	bl	8007170 <abort>
 8006a4a:	4780      	blx	r0
 8006a4c:	e7f3      	b.n	8006a36 <_Znwj+0xa>

08006a4e <_ZNSaIcEC1Ev>:
 8006a4e:	4770      	bx	lr

08006a50 <_ZNSaIcED1Ev>:
 8006a50:	4770      	bx	lr

08006a52 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8006a52:	68c3      	ldr	r3, [r0, #12]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	60c2      	str	r2, [r0, #12]
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	b102      	cbz	r2, 8006a5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8006a5c:	6050      	str	r0, [r2, #4]
 8006a5e:	6842      	ldr	r2, [r0, #4]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	680c      	ldr	r4, [r1, #0]
 8006a64:	4284      	cmp	r4, r0
 8006a66:	d103      	bne.n	8006a70 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8006a68:	600b      	str	r3, [r1, #0]
 8006a6a:	6098      	str	r0, [r3, #8]
 8006a6c:	6043      	str	r3, [r0, #4]
 8006a6e:	bd10      	pop	{r4, pc}
 8006a70:	6891      	ldr	r1, [r2, #8]
 8006a72:	4281      	cmp	r1, r0
 8006a74:	bf0c      	ite	eq
 8006a76:	6093      	streq	r3, [r2, #8]
 8006a78:	60d3      	strne	r3, [r2, #12]
 8006a7a:	e7f6      	b.n	8006a6a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08006a7c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8006a7c:	6883      	ldr	r3, [r0, #8]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	6082      	str	r2, [r0, #8]
 8006a82:	b510      	push	{r4, lr}
 8006a84:	b102      	cbz	r2, 8006a88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8006a86:	6050      	str	r0, [r2, #4]
 8006a88:	6842      	ldr	r2, [r0, #4]
 8006a8a:	605a      	str	r2, [r3, #4]
 8006a8c:	680c      	ldr	r4, [r1, #0]
 8006a8e:	4284      	cmp	r4, r0
 8006a90:	d103      	bne.n	8006a9a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8006a92:	600b      	str	r3, [r1, #0]
 8006a94:	60d8      	str	r0, [r3, #12]
 8006a96:	6043      	str	r3, [r0, #4]
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	68d1      	ldr	r1, [r2, #12]
 8006a9c:	4281      	cmp	r1, r0
 8006a9e:	bf0c      	ite	eq
 8006aa0:	60d3      	streq	r3, [r2, #12]
 8006aa2:	6093      	strne	r3, [r2, #8]
 8006aa4:	e7f6      	b.n	8006a94 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08006aa6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8006aa6:	68c3      	ldr	r3, [r0, #12]
 8006aa8:	b123      	cbz	r3, 8006ab4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8006aaa:	4618      	mov	r0, r3
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1fb      	bne.n	8006aaa <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8006ab2:	4770      	bx	lr
 8006ab4:	6843      	ldr	r3, [r0, #4]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	4282      	cmp	r2, r0
 8006aba:	d004      	beq.n	8006ac6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8006abc:	68c2      	ldr	r2, [r0, #12]
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	bf18      	it	ne
 8006ac2:	4618      	movne	r0, r3
 8006ac4:	4770      	bx	lr
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	e7f4      	b.n	8006ab6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08006acc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8006acc:	7802      	ldrb	r2, [r0, #0]
 8006ace:	4603      	mov	r3, r0
 8006ad0:	b92a      	cbnz	r2, 8006ade <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8006ad2:	6842      	ldr	r2, [r0, #4]
 8006ad4:	6852      	ldr	r2, [r2, #4]
 8006ad6:	4282      	cmp	r2, r0
 8006ad8:	d101      	bne.n	8006ade <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8006ada:	68d0      	ldr	r0, [r2, #12]
 8006adc:	4770      	bx	lr
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	b122      	cbz	r2, 8006aec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	68d2      	ldr	r2, [r2, #12]
 8006ae6:	2a00      	cmp	r2, #0
 8006ae8:	d1fb      	bne.n	8006ae2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8006aea:	4770      	bx	lr
 8006aec:	6858      	ldr	r0, [r3, #4]
 8006aee:	6882      	ldr	r2, [r0, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d000      	beq.n	8006af6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8006af4:	4770      	bx	lr
 8006af6:	4603      	mov	r3, r0
 8006af8:	6840      	ldr	r0, [r0, #4]
 8006afa:	e7f8      	b.n	8006aee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08006afc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8006afc:	f7ff bfd3 	b.w	8006aa6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08006b00 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8006b00:	f7ff bfe4 	b.w	8006acc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08006b04 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	461d      	mov	r5, r3
 8006b0a:	1d1f      	adds	r7, r3, #4
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8006b12:	460c      	mov	r4, r1
 8006b14:	604a      	str	r2, [r1, #4]
 8006b16:	700b      	strb	r3, [r1, #0]
 8006b18:	b1a0      	cbz	r0, 8006b44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8006b1a:	4295      	cmp	r5, r2
 8006b1c:	6091      	str	r1, [r2, #8]
 8006b1e:	d102      	bne.n	8006b26 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8006b20:	6069      	str	r1, [r5, #4]
 8006b22:	60ec      	str	r4, [r5, #12]
 8006b24:	e003      	b.n	8006b2e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8006b26:	68ab      	ldr	r3, [r5, #8]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	bf08      	it	eq
 8006b2c:	60a9      	streq	r1, [r5, #8]
 8006b2e:	f04f 0900 	mov.w	r9, #0
 8006b32:	f04f 0801 	mov.w	r8, #1
 8006b36:	686b      	ldr	r3, [r5, #4]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d132      	bne.n	8006ba2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b44:	60d1      	str	r1, [r2, #12]
 8006b46:	68eb      	ldr	r3, [r5, #12]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d1f0      	bne.n	8006b2e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8006b4c:	e7e9      	b.n	8006b22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8006b4e:	68c3      	ldr	r3, [r0, #12]
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	d103      	bne.n	8006b5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8006b54:	4639      	mov	r1, r7
 8006b56:	f7ff ff7c 	bl	8006a52 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f883 8000 	strb.w	r8, [r3]
 8006b64:	4630      	mov	r0, r6
 8006b66:	f886 9000 	strb.w	r9, [r6]
 8006b6a:	f7ff ff87 	bl	8006a7c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8006b6e:	e7e2      	b.n	8006b36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8006b70:	b133      	cbz	r3, 8006b80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	b922      	cbnz	r2, 8006b80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8006b76:	f880 8000 	strb.w	r8, [r0]
 8006b7a:	f883 8000 	strb.w	r8, [r3]
 8006b7e:	e021      	b.n	8006bc4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8006b80:	6883      	ldr	r3, [r0, #8]
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	d103      	bne.n	8006b8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7ff ff78 	bl	8006a7c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	6863      	ldr	r3, [r4, #4]
 8006b90:	4639      	mov	r1, r7
 8006b92:	f883 8000 	strb.w	r8, [r3]
 8006b96:	4630      	mov	r0, r6
 8006b98:	f886 9000 	strb.w	r9, [r6]
 8006b9c:	f7ff ff59 	bl	8006a52 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8006ba0:	e7c9      	b.n	8006b36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8006ba2:	6860      	ldr	r0, [r4, #4]
 8006ba4:	7802      	ldrb	r2, [r0, #0]
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	d1c8      	bne.n	8006b3c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8006baa:	6846      	ldr	r6, [r0, #4]
 8006bac:	68b3      	ldr	r3, [r6, #8]
 8006bae:	4283      	cmp	r3, r0
 8006bb0:	d1de      	bne.n	8006b70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8006bb2:	68f2      	ldr	r2, [r6, #12]
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	d0ca      	beq.n	8006b4e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8006bb8:	7811      	ldrb	r1, [r2, #0]
 8006bba:	2900      	cmp	r1, #0
 8006bbc:	d1c7      	bne.n	8006b4e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	7019      	strb	r1, [r3, #0]
 8006bc2:	7011      	strb	r1, [r2, #0]
 8006bc4:	f886 9000 	strb.w	r9, [r6]
 8006bc8:	4634      	mov	r4, r6
 8006bca:	e7b4      	b.n	8006b36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08006bcc <_ZSt17__throw_bad_allocv>:
 8006bcc:	b508      	push	{r3, lr}
 8006bce:	f000 facf 	bl	8007170 <abort>

08006bd2 <_ZSt28__throw_bad_array_new_lengthv>:
 8006bd2:	b508      	push	{r3, lr}
 8006bd4:	f000 facc 	bl	8007170 <abort>

08006bd8 <_ZSt19__throw_logic_errorPKc>:
 8006bd8:	b508      	push	{r3, lr}
 8006bda:	f000 fac9 	bl	8007170 <abort>

08006bde <_ZSt24__throw_invalid_argumentPKc>:
 8006bde:	b508      	push	{r3, lr}
 8006be0:	f000 fac6 	bl	8007170 <abort>

08006be4 <_ZSt20__throw_length_errorPKc>:
 8006be4:	b508      	push	{r3, lr}
 8006be6:	f000 fac3 	bl	8007170 <abort>

08006bea <_ZSt20__throw_out_of_rangePKc>:
 8006bea:	b508      	push	{r3, lr}
 8006bec:	f000 fac0 	bl	8007170 <abort>

08006bf0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8006bf0:	b40f      	push	{r0, r1, r2, r3}
 8006bf2:	b508      	push	{r3, lr}
 8006bf4:	f000 fabc 	bl	8007170 <abort>

08006bf8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006bf8:	b10a      	cbz	r2, 8006bfe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006bfa:	f000 bcb5 	b.w	8007568 <memcpy>
 8006bfe:	4770      	bx	lr

08006c00 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8006c00:	4613      	mov	r3, r2
 8006c02:	460a      	mov	r2, r1
 8006c04:	b111      	cbz	r1, 8006c0c <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8006c06:	7819      	ldrb	r1, [r3, #0]
 8006c08:	f7f9 baea 	b.w	80001e0 <memchr>
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4770      	bx	lr

08006c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8006c10:	f850 3b08 	ldr.w	r3, [r0], #8
 8006c14:	1a1b      	subs	r3, r3, r0
 8006c16:	4258      	negs	r0, r3
 8006c18:	4158      	adcs	r0, r3
 8006c1a:	4770      	bx	lr

08006c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006c1c:	b508      	push	{r3, lr}
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c24:	d302      	bcc.n	8006c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006c26:	480d      	ldr	r0, [pc, #52]	@ (8006c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006c28:	f7ff ffdc 	bl	8006be4 <_ZSt20__throw_length_errorPKc>
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d90b      	bls.n	8006c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006c30:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006c34:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006c38:	d206      	bcs.n	8006c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006c3a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006c3e:	bf2a      	itet	cs
 8006c40:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8006c44:	6008      	strcc	r0, [r1, #0]
 8006c46:	600b      	strcs	r3, [r1, #0]
 8006c48:	6808      	ldr	r0, [r1, #0]
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d501      	bpl.n	8006c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006c4e:	f7ff ffbd 	bl	8006bcc <_ZSt17__throw_bad_allocv>
 8006c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c56:	f7ff bee9 	b.w	8006a2c <_Znwj>
 8006c5a:	bf00      	nop
 8006c5c:	08008c5c 	.word	0x08008c5c

08006c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	4604      	mov	r4, r0
 8006c64:	f7ff ffd4 	bl	8006c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006c68:	b920      	cbnz	r0, 8006c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8006c6a:	6820      	ldr	r0, [r4, #0]
 8006c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c70:	f000 ba74 	b.w	800715c <_ZdlPv>
 8006c74:	bd10      	pop	{r4, pc}
	...

08006c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8006c78:	b508      	push	{r3, lr}
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4298      	cmp	r0, r3
 8006c82:	4611      	mov	r1, r2
 8006c84:	d903      	bls.n	8006c8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8006c86:	4602      	mov	r2, r0
 8006c88:	4801      	ldr	r0, [pc, #4]	@ (8006c90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8006c8a:	f7ff ffb1 	bl	8006bf0 <_ZSt24__throw_out_of_range_fmtPKcz>
 8006c8e:	bd08      	pop	{r3, pc}
 8006c90:	08008c74 	.word	0x08008c74

08006c94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006c94:	6840      	ldr	r0, [r0, #4]
 8006c96:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8006c9a:	3901      	subs	r1, #1
 8006c9c:	1a09      	subs	r1, r1, r0
 8006c9e:	4291      	cmp	r1, r2
 8006ca0:	b508      	push	{r3, lr}
 8006ca2:	d202      	bcs.n	8006caa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff9d 	bl	8006be4 <_ZSt20__throw_length_errorPKc>
 8006caa:	bd08      	pop	{r3, pc}

08006cac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8006cac:	6803      	ldr	r3, [r0, #0]
 8006cae:	428b      	cmp	r3, r1
 8006cb0:	d806      	bhi.n	8006cc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8006cb2:	6842      	ldr	r2, [r0, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	bf94      	ite	ls
 8006cba:	2000      	movls	r0, #0
 8006cbc:	2001      	movhi	r0, #1
 8006cbe:	4770      	bx	lr
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	4770      	bx	lr

08006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	b410      	push	{r4}
 8006cc8:	d104      	bne.n	8006cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006cca:	780a      	ldrb	r2, [r1, #0]
 8006ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd0:	7002      	strb	r2, [r0, #0]
 8006cd2:	4770      	bx	lr
 8006cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd8:	f7ff bf8e 	b.w	8006bf8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	b430      	push	{r4, r5}
 8006ce0:	d103      	bne.n	8006cea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8006ce2:	780b      	ldrb	r3, [r1, #0]
 8006ce4:	7003      	strb	r3, [r0, #0]
 8006ce6:	bc30      	pop	{r4, r5}
 8006ce8:	4770      	bx	lr
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	d0fb      	beq.n	8006ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8006cee:	bc30      	pop	{r4, r5}
 8006cf0:	f000 bb98 	b.w	8007424 <memmove>

08006cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8006cf4:	b508      	push	{r3, lr}
 8006cf6:	1a52      	subs	r2, r2, r1
 8006cf8:	f7ff ffe4 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006cfc:	bd08      	pop	{r3, pc}

08006cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006cfe:	b508      	push	{r3, lr}
 8006d00:	1a52      	subs	r2, r2, r1
 8006d02:	f7ff ffdf 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006d06:	bd08      	pop	{r3, pc}

08006d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4615      	mov	r5, r2
 8006d0e:	4608      	mov	r0, r1
 8006d10:	4411      	add	r1, r2
 8006d12:	6862      	ldr	r2, [r4, #4]
 8006d14:	1a52      	subs	r2, r2, r1
 8006d16:	d005      	beq.n	8006d24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8006d18:	b125      	cbz	r5, 8006d24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	4419      	add	r1, r3
 8006d1e:	4418      	add	r0, r3
 8006d20:	f7ff ffdc 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	1b5b      	subs	r3, r3, r5
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	6063      	str	r3, [r4, #4]
 8006d2e:	54d1      	strb	r1, [r2, r3]
 8006d30:	bd38      	pop	{r3, r4, r5, pc}

08006d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006d32:	f100 0208 	add.w	r2, r0, #8
 8006d36:	6002      	str	r2, [r0, #0]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	6042      	str	r2, [r0, #4]
 8006d3c:	7202      	strb	r2, [r0, #8]
 8006d3e:	4770      	bx	lr

08006d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	f100 0708 	add.w	r7, r0, #8
 8006d46:	6007      	str	r7, [r0, #0]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	4608      	mov	r0, r1
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	f7ff ff5f 	bl	8006c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006d52:	f104 0608 	add.w	r6, r4, #8
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	b160      	cbz	r0, 8006d74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8006d5a:	3201      	adds	r2, #1
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7ff ff4a 	bl	8006bf8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	606b      	str	r3, [r5, #4]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	7223      	strb	r3, [r4, #8]
 8006d6c:	6026      	str	r6, [r4, #0]
 8006d6e:	6063      	str	r3, [r4, #4]
 8006d70:	4628      	mov	r0, r5
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	60ab      	str	r3, [r5, #8]
 8006d7c:	e7f2      	b.n	8006d64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08006d7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	4604      	mov	r4, r0
 8006d82:	f7ff ff6d 	bl	8006c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006d86:	4620      	mov	r0, r4
 8006d88:	bd10      	pop	{r4, pc}

08006d8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8006d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	4605      	mov	r5, r0
 8006d90:	f7ff ff3e 	bl	8006c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006d94:	4606      	mov	r6, r0
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7ff ff3a 	bl	8006c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006d9c:	b190      	cbz	r0, 8006dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8006d9e:	42a5      	cmp	r5, r4
 8006da0:	d00a      	beq.n	8006db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8006da2:	6862      	ldr	r2, [r4, #4]
 8006da4:	b11a      	cbz	r2, 8006dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8006da6:	6821      	ldr	r1, [r4, #0]
 8006da8:	6828      	ldr	r0, [r5, #0]
 8006daa:	f7ff ff8b 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	682a      	ldr	r2, [r5, #0]
 8006db2:	606b      	str	r3, [r5, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	54d1      	strb	r1, [r2, r3]
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	7013      	strb	r3, [r2, #0]
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc4:	b90e      	cbnz	r6, 8006dca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8006dc6:	6828      	ldr	r0, [r5, #0]
 8006dc8:	68af      	ldr	r7, [r5, #8]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	602b      	str	r3, [r5, #0]
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	606b      	str	r3, [r5, #4]
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	60ab      	str	r3, [r5, #8]
 8006dd6:	b110      	cbz	r0, 8006dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8006dd8:	6020      	str	r0, [r4, #0]
 8006dda:	60a7      	str	r7, [r4, #8]
 8006ddc:	e7ec      	b.n	8006db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8006dde:	f104 0308 	add.w	r3, r4, #8
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	e7e8      	b.n	8006db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08006de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8006de6:	6800      	ldr	r0, [r0, #0]
 8006de8:	4770      	bx	lr

08006dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8006dea:	e9d0 2000 	ldrd	r2, r0, [r0]
 8006dee:	4410      	add	r0, r2
 8006df0:	4770      	bx	lr

08006df2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8006df2:	6840      	ldr	r0, [r0, #4]
 8006df4:	4770      	bx	lr

08006df6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8006df6:	b510      	push	{r4, lr}
 8006df8:	4604      	mov	r4, r0
 8006dfa:	f7ff ff09 	bl	8006c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006dfe:	b908      	cbnz	r0, 8006e04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8006e00:	68a0      	ldr	r0, [r4, #8]
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	200f      	movs	r0, #15
 8006e06:	e7fc      	b.n	8006e02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08006e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8006e08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006e0e:	461f      	mov	r7, r3
 8006e10:	6843      	ldr	r3, [r0, #4]
 8006e12:	eb01 0802 	add.w	r8, r1, r2
 8006e16:	1ab2      	subs	r2, r6, r2
 8006e18:	441a      	add	r2, r3
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	eba3 0908 	sub.w	r9, r3, r8
 8006e22:	9201      	str	r2, [sp, #4]
 8006e24:	f7ff ffe7 	bl	8006df6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006e28:	a901      	add	r1, sp, #4
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff fef5 	bl	8006c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006e32:	4682      	mov	sl, r0
 8006e34:	b11d      	cbz	r5, 8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	462a      	mov	r2, r5
 8006e3a:	f7ff ff43 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006e3e:	b137      	cbz	r7, 8006e4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8006e40:	b12e      	cbz	r6, 8006e4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8006e42:	4632      	mov	r2, r6
 8006e44:	4639      	mov	r1, r7
 8006e46:	eb0a 0005 	add.w	r0, sl, r5
 8006e4a:	f7ff ff3b 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006e4e:	f1b9 0f00 	cmp.w	r9, #0
 8006e52:	d007      	beq.n	8006e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8006e54:	6821      	ldr	r1, [r4, #0]
 8006e56:	4435      	add	r5, r6
 8006e58:	464a      	mov	r2, r9
 8006e5a:	4441      	add	r1, r8
 8006e5c:	eb0a 0005 	add.w	r0, sl, r5
 8006e60:	f7ff ff30 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff fefb 	bl	8006c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006e6a:	9b01      	ldr	r3, [sp, #4]
 8006e6c:	f8c4 a000 	str.w	sl, [r4]
 8006e70:	60a3      	str	r3, [r4, #8]
 8006e72:	b002      	add	sp, #8
 8006e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8006e78:	6800      	ldr	r0, [r0, #0]
 8006e7a:	4408      	add	r0, r1
 8006e7c:	4770      	bx	lr

08006e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>:
 8006e7e:	b570      	push	{r4, r5, r6, lr}
 8006e80:	6843      	ldr	r3, [r0, #4]
 8006e82:	6805      	ldr	r5, [r0, #0]
 8006e84:	1b4e      	subs	r6, r1, r5
 8006e86:	441d      	add	r5, r3
 8006e88:	42aa      	cmp	r2, r5
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	d105      	bne.n	8006e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_+0x1c>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	6046      	str	r6, [r0, #4]
 8006e92:	700a      	strb	r2, [r1, #0]
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	4430      	add	r0, r6
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	1a52      	subs	r2, r2, r1
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	f7ff ff33 	bl	8006d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8006ea2:	e7f7      	b.n	8006e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_+0x16>

08006ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	4680      	mov	r8, r0
 8006eac:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8006eae:	4614      	mov	r4, r2
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	4b37      	ldr	r3, [pc, #220]	@ (8006f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8006eba:	f7ff feeb 	bl	8006c94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8006ebe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	eba5 0b04 	sub.w	fp, r5, r4
 8006ec8:	4640      	mov	r0, r8
 8006eca:	eb03 0a0b 	add.w	sl, r3, fp
 8006ece:	f7ff ff92 	bl	8006df6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006ed2:	4550      	cmp	r0, sl
 8006ed4:	d354      	bcc.n	8006f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8006ed6:	f8d8 6000 	ldr.w	r6, [r8]
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	444e      	add	r6, r9
 8006ede:	4639      	mov	r1, r7
 8006ee0:	44a1      	add	r9, r4
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	eba3 0909 	sub.w	r9, r3, r9
 8006ee8:	f7ff fee0 	bl	8006cac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8006eec:	b180      	cbz	r0, 8006f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8006eee:	f1b9 0f00 	cmp.w	r9, #0
 8006ef2:	d006      	beq.n	8006f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8006ef4:	42ac      	cmp	r4, r5
 8006ef6:	d004      	beq.n	8006f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8006ef8:	464a      	mov	r2, r9
 8006efa:	1931      	adds	r1, r6, r4
 8006efc:	1970      	adds	r0, r6, r5
 8006efe:	f7ff feed 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006f02:	b315      	cbz	r5, 8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006f04:	462a      	mov	r2, r5
 8006f06:	4639      	mov	r1, r7
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fedb 	bl	8006cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f0e:	e01c      	b.n	8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006f10:	b135      	cbz	r5, 8006f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8006f12:	42ac      	cmp	r4, r5
 8006f14:	d33c      	bcc.n	8006f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8006f16:	462a      	mov	r2, r5
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff fede 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	d011      	beq.n	8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006f26:	42ac      	cmp	r4, r5
 8006f28:	d00f      	beq.n	8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006f2a:	464a      	mov	r2, r9
 8006f2c:	1931      	adds	r1, r6, r4
 8006f2e:	1970      	adds	r0, r6, r5
 8006f30:	f7ff fed4 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006f34:	42ac      	cmp	r4, r5
 8006f36:	d208      	bcs.n	8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006f38:	4434      	add	r4, r6
 8006f3a:	197b      	adds	r3, r7, r5
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	d30f      	bcc.n	8006f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8006f40:	462a      	mov	r2, r5
 8006f42:	4639      	mov	r1, r7
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff fec9 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4e:	f8c8 a004 	str.w	sl, [r8, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	4640      	mov	r0, r8
 8006f56:	f803 200a 	strb.w	r2, [r3, sl]
 8006f5a:	b005      	add	sp, #20
 8006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f60:	42bc      	cmp	r4, r7
 8006f62:	d803      	bhi.n	8006f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8006f64:	462a      	mov	r2, r5
 8006f66:	eb07 010b 	add.w	r1, r7, fp
 8006f6a:	e7cd      	b.n	8006f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8006f6c:	1be4      	subs	r4, r4, r7
 8006f6e:	4622      	mov	r2, r4
 8006f70:	4639      	mov	r1, r7
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff feb2 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006f78:	1b2a      	subs	r2, r5, r4
 8006f7a:	1971      	adds	r1, r6, r5
 8006f7c:	1930      	adds	r0, r6, r4
 8006f7e:	e7c4      	b.n	8006f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8006f80:	9500      	str	r5, [sp, #0]
 8006f82:	463b      	mov	r3, r7
 8006f84:	4622      	mov	r2, r4
 8006f86:	4649      	mov	r1, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	f7ff ff3d 	bl	8006e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8006f8e:	e7dc      	b.n	8006f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006f90:	f1b9 0f00 	cmp.w	r9, #0
 8006f94:	d0d0      	beq.n	8006f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8006f96:	e7c8      	b.n	8006f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8006f98:	08008cab 	.word	0x08008cab

08006f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8006f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	f7f9 f96c 	bl	8000280 <strlen>
 8006fa8:	9000      	str	r0, [sp, #0]
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	462b      	mov	r3, r5
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7ff ff77 	bl	8006ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8006fb6:	b003      	add	sp, #12
 8006fb8:	bd30      	pop	{r4, r5, pc}

08006fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8006fba:	b508      	push	{r3, lr}
 8006fbc:	f7ff ffee 	bl	8006f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8006fc0:	bd08      	pop	{r3, pc}

08006fc2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8006fc2:	6800      	ldr	r0, [r0, #0]
 8006fc4:	4770      	bx	lr

08006fc6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8006fc6:	6800      	ldr	r0, [r0, #0]
 8006fc8:	4770      	bx	lr

08006fca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8006fca:	b513      	push	{r0, r1, r4, lr}
 8006fcc:	f88d 1007 	strb.w	r1, [sp, #7]
 8006fd0:	6841      	ldr	r1, [r0, #4]
 8006fd2:	428a      	cmp	r2, r1
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	d20a      	bcs.n	8006fee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8006fd8:	6804      	ldr	r4, [r0, #0]
 8006fda:	f10d 0207 	add.w	r2, sp, #7
 8006fde:	1ac9      	subs	r1, r1, r3
 8006fe0:	18e0      	adds	r0, r4, r3
 8006fe2:	f7ff fe0d 	bl	8006c00 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8006fe6:	b110      	cbz	r0, 8006fee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8006fe8:	1b00      	subs	r0, r0, r4
 8006fea:	b002      	add	sp, #8
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	e7fa      	b.n	8006fea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08006ff4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	6845      	ldr	r5, [r0, #4]
 8006ff8:	684c      	ldr	r4, [r1, #4]
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	6809      	ldr	r1, [r1, #0]
 8006ffe:	42a5      	cmp	r5, r4
 8007000:	462a      	mov	r2, r5
 8007002:	bf28      	it	cs
 8007004:	4622      	movcs	r2, r4
 8007006:	f7fc faeb 	bl	80035e0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800700a:	b900      	cbnz	r0, 800700e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800700c:	1b28      	subs	r0, r5, r4
 800700e:	bd38      	pop	{r3, r4, r5, pc}

08007010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	6847      	ldr	r7, [r0, #4]
 8007014:	4605      	mov	r5, r0
 8007016:	4608      	mov	r0, r1
 8007018:	460e      	mov	r6, r1
 800701a:	f7f9 f931 	bl	8000280 <strlen>
 800701e:	4287      	cmp	r7, r0
 8007020:	4604      	mov	r4, r0
 8007022:	463a      	mov	r2, r7
 8007024:	4631      	mov	r1, r6
 8007026:	bf28      	it	cs
 8007028:	4602      	movcs	r2, r0
 800702a:	6828      	ldr	r0, [r5, #0]
 800702c:	f7fc fad8 	bl	80035e0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007030:	b900      	cbnz	r0, 8007034 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8007032:	1b38      	subs	r0, r7, r4
 8007034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8007036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007038:	1a53      	subs	r3, r2, r1
 800703a:	2b0f      	cmp	r3, #15
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	4616      	mov	r6, r2
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	d906      	bls.n	8007054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8007046:	2200      	movs	r2, #0
 8007048:	a901      	add	r1, sp, #4
 800704a:	f7ff fde7 	bl	8006c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	6020      	str	r0, [r4, #0]
 8007052:	60a3      	str	r3, [r4, #8]
 8007054:	4632      	mov	r2, r6
 8007056:	4629      	mov	r1, r5
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	f7ff fe4b 	bl	8006cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	6063      	str	r3, [r4, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	54d1      	strb	r1, [r2, r3]
 8007068:	b002      	add	sp, #8
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800706c:	f100 0208 	add.w	r2, r0, #8
 8007070:	b510      	push	{r4, lr}
 8007072:	6002      	str	r2, [r0, #0]
 8007074:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007078:	4604      	mov	r4, r0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	440a      	add	r2, r1
 8007080:	f7ff ffd9 	bl	8007036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8007084:	4620      	mov	r0, r4
 8007086:	bd10      	pop	{r4, pc}

08007088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007088:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800708a:	1a53      	subs	r3, r2, r1
 800708c:	2b0f      	cmp	r3, #15
 800708e:	4604      	mov	r4, r0
 8007090:	460d      	mov	r5, r1
 8007092:	4616      	mov	r6, r2
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	d906      	bls.n	80070a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8007098:	2200      	movs	r2, #0
 800709a:	a901      	add	r1, sp, #4
 800709c:	f7ff fdbe 	bl	8006c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80070a0:	9b01      	ldr	r3, [sp, #4]
 80070a2:	6020      	str	r0, [r4, #0]
 80070a4:	60a3      	str	r3, [r4, #8]
 80070a6:	4632      	mov	r2, r6
 80070a8:	4629      	mov	r1, r5
 80070aa:	6820      	ldr	r0, [r4, #0]
 80070ac:	f7ff fe27 	bl	8006cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	2100      	movs	r1, #0
 80070b8:	54d1      	strb	r1, [r2, r3]
 80070ba:	b002      	add	sp, #8
 80070bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080070c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	4698      	mov	r8, r3
 80070c6:	f100 0308 	add.w	r3, r0, #8
 80070ca:	460d      	mov	r5, r1
 80070cc:	4617      	mov	r7, r2
 80070ce:	6003      	str	r3, [r0, #0]
 80070d0:	680e      	ldr	r6, [r1, #0]
 80070d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 80070d4:	4604      	mov	r4, r0
 80070d6:	4639      	mov	r1, r7
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff fdcd 	bl	8006c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80070de:	686a      	ldr	r2, [r5, #4]
 80070e0:	1831      	adds	r1, r6, r0
 80070e2:	1bd2      	subs	r2, r2, r7
 80070e4:	4620      	mov	r0, r4
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	4542      	cmp	r2, r8
 80070ec:	bf94      	ite	ls
 80070ee:	188a      	addls	r2, r1, r2
 80070f0:	eb01 0208 	addhi.w	r2, r1, r8
 80070f4:	f7ff ffc8 	bl	8007088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80070f8:	4620      	mov	r0, r4
 80070fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070fe:	bf00      	nop
 8007100:	08008cc4 	.word	0x08008cc4

08007104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	460d      	mov	r5, r1
 8007108:	4604      	mov	r4, r0
 800710a:	4611      	mov	r1, r2
 800710c:	4628      	mov	r0, r5
 800710e:	4a06      	ldr	r2, [pc, #24]	@ (8007128 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8007110:	461e      	mov	r6, r3
 8007112:	f7ff fdb1 	bl	8006c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007116:	4633      	mov	r3, r6
 8007118:	4602      	mov	r2, r0
 800711a:	4629      	mov	r1, r5
 800711c:	4620      	mov	r0, r4
 800711e:	f7ff ffcf 	bl	80070c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8007122:	4620      	mov	r0, r4
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	bf00      	nop
 8007128:	08008cdf 	.word	0x08008cdf

0800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	f100 0308 	add.w	r3, r0, #8
 8007132:	4604      	mov	r4, r0
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	460d      	mov	r5, r1
 8007138:	b911      	cbnz	r1, 8007140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800713a:	4807      	ldr	r0, [pc, #28]	@ (8007158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800713c:	f7ff fd4c 	bl	8006bd8 <_ZSt19__throw_logic_errorPKc>
 8007140:	4608      	mov	r0, r1
 8007142:	f7f9 f89d 	bl	8000280 <strlen>
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	182a      	adds	r2, r5, r0
 800714c:	4629      	mov	r1, r5
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff ff9a 	bl	8007088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007154:	4620      	mov	r0, r4
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	08008cf4 	.word	0x08008cf4

0800715c <_ZdlPv>:
 800715c:	f000 b818 	b.w	8007190 <free>

08007160 <_ZSt15get_new_handlerv>:
 8007160:	4b02      	ldr	r3, [pc, #8]	@ (800716c <_ZSt15get_new_handlerv+0xc>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	f3bf 8f5b 	dmb	ish
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	200005b0 	.word	0x200005b0

08007170 <abort>:
 8007170:	b508      	push	{r3, lr}
 8007172:	2006      	movs	r0, #6
 8007174:	f000 f9a0 	bl	80074b8 <raise>
 8007178:	2001      	movs	r0, #1
 800717a:	f7fc f9dd 	bl	8003538 <_exit>
	...

08007180 <malloc>:
 8007180:	4b02      	ldr	r3, [pc, #8]	@ (800718c <malloc+0xc>)
 8007182:	4601      	mov	r1, r0
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f000 b82d 	b.w	80071e4 <_malloc_r>
 800718a:	bf00      	nop
 800718c:	2000000c 	.word	0x2000000c

08007190 <free>:
 8007190:	4b02      	ldr	r3, [pc, #8]	@ (800719c <free+0xc>)
 8007192:	4601      	mov	r1, r0
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	f000 b9f5 	b.w	8007584 <_free_r>
 800719a:	bf00      	nop
 800719c:	2000000c 	.word	0x2000000c

080071a0 <sbrk_aligned>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	4e0f      	ldr	r6, [pc, #60]	@ (80071e0 <sbrk_aligned+0x40>)
 80071a4:	460c      	mov	r4, r1
 80071a6:	6831      	ldr	r1, [r6, #0]
 80071a8:	4605      	mov	r5, r0
 80071aa:	b911      	cbnz	r1, 80071b2 <sbrk_aligned+0x12>
 80071ac:	f000 f9a0 	bl	80074f0 <_sbrk_r>
 80071b0:	6030      	str	r0, [r6, #0]
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f99b 	bl	80074f0 <_sbrk_r>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d103      	bne.n	80071c6 <sbrk_aligned+0x26>
 80071be:	f04f 34ff 	mov.w	r4, #4294967295
 80071c2:	4620      	mov	r0, r4
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
 80071c6:	1cc4      	adds	r4, r0, #3
 80071c8:	f024 0403 	bic.w	r4, r4, #3
 80071cc:	42a0      	cmp	r0, r4
 80071ce:	d0f8      	beq.n	80071c2 <sbrk_aligned+0x22>
 80071d0:	1a21      	subs	r1, r4, r0
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 f98c 	bl	80074f0 <_sbrk_r>
 80071d8:	3001      	adds	r0, #1
 80071da:	d1f2      	bne.n	80071c2 <sbrk_aligned+0x22>
 80071dc:	e7ef      	b.n	80071be <sbrk_aligned+0x1e>
 80071de:	bf00      	nop
 80071e0:	200005b4 	.word	0x200005b4

080071e4 <_malloc_r>:
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	1ccd      	adds	r5, r1, #3
 80071ea:	f025 0503 	bic.w	r5, r5, #3
 80071ee:	3508      	adds	r5, #8
 80071f0:	2d0c      	cmp	r5, #12
 80071f2:	bf38      	it	cc
 80071f4:	250c      	movcc	r5, #12
 80071f6:	2d00      	cmp	r5, #0
 80071f8:	4606      	mov	r6, r0
 80071fa:	db01      	blt.n	8007200 <_malloc_r+0x1c>
 80071fc:	42a9      	cmp	r1, r5
 80071fe:	d904      	bls.n	800720a <_malloc_r+0x26>
 8007200:	230c      	movs	r3, #12
 8007202:	6033      	str	r3, [r6, #0]
 8007204:	2000      	movs	r0, #0
 8007206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800720a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072e0 <_malloc_r+0xfc>
 800720e:	f000 f869 	bl	80072e4 <__malloc_lock>
 8007212:	f8d8 3000 	ldr.w	r3, [r8]
 8007216:	461c      	mov	r4, r3
 8007218:	bb44      	cbnz	r4, 800726c <_malloc_r+0x88>
 800721a:	4629      	mov	r1, r5
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff ffbf 	bl	80071a0 <sbrk_aligned>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	4604      	mov	r4, r0
 8007226:	d158      	bne.n	80072da <_malloc_r+0xf6>
 8007228:	f8d8 4000 	ldr.w	r4, [r8]
 800722c:	4627      	mov	r7, r4
 800722e:	2f00      	cmp	r7, #0
 8007230:	d143      	bne.n	80072ba <_malloc_r+0xd6>
 8007232:	2c00      	cmp	r4, #0
 8007234:	d04b      	beq.n	80072ce <_malloc_r+0xea>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	4639      	mov	r1, r7
 800723a:	4630      	mov	r0, r6
 800723c:	eb04 0903 	add.w	r9, r4, r3
 8007240:	f000 f956 	bl	80074f0 <_sbrk_r>
 8007244:	4581      	cmp	r9, r0
 8007246:	d142      	bne.n	80072ce <_malloc_r+0xea>
 8007248:	6821      	ldr	r1, [r4, #0]
 800724a:	1a6d      	subs	r5, r5, r1
 800724c:	4629      	mov	r1, r5
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffa6 	bl	80071a0 <sbrk_aligned>
 8007254:	3001      	adds	r0, #1
 8007256:	d03a      	beq.n	80072ce <_malloc_r+0xea>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	442b      	add	r3, r5
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	f8d8 3000 	ldr.w	r3, [r8]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	bb62      	cbnz	r2, 80072c0 <_malloc_r+0xdc>
 8007266:	f8c8 7000 	str.w	r7, [r8]
 800726a:	e00f      	b.n	800728c <_malloc_r+0xa8>
 800726c:	6822      	ldr	r2, [r4, #0]
 800726e:	1b52      	subs	r2, r2, r5
 8007270:	d420      	bmi.n	80072b4 <_malloc_r+0xd0>
 8007272:	2a0b      	cmp	r2, #11
 8007274:	d917      	bls.n	80072a6 <_malloc_r+0xc2>
 8007276:	1961      	adds	r1, r4, r5
 8007278:	42a3      	cmp	r3, r4
 800727a:	6025      	str	r5, [r4, #0]
 800727c:	bf18      	it	ne
 800727e:	6059      	strne	r1, [r3, #4]
 8007280:	6863      	ldr	r3, [r4, #4]
 8007282:	bf08      	it	eq
 8007284:	f8c8 1000 	streq.w	r1, [r8]
 8007288:	5162      	str	r2, [r4, r5]
 800728a:	604b      	str	r3, [r1, #4]
 800728c:	4630      	mov	r0, r6
 800728e:	f000 f82f 	bl	80072f0 <__malloc_unlock>
 8007292:	f104 000b 	add.w	r0, r4, #11
 8007296:	1d23      	adds	r3, r4, #4
 8007298:	f020 0007 	bic.w	r0, r0, #7
 800729c:	1ac2      	subs	r2, r0, r3
 800729e:	bf1c      	itt	ne
 80072a0:	1a1b      	subne	r3, r3, r0
 80072a2:	50a3      	strne	r3, [r4, r2]
 80072a4:	e7af      	b.n	8007206 <_malloc_r+0x22>
 80072a6:	6862      	ldr	r2, [r4, #4]
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	bf0c      	ite	eq
 80072ac:	f8c8 2000 	streq.w	r2, [r8]
 80072b0:	605a      	strne	r2, [r3, #4]
 80072b2:	e7eb      	b.n	800728c <_malloc_r+0xa8>
 80072b4:	4623      	mov	r3, r4
 80072b6:	6864      	ldr	r4, [r4, #4]
 80072b8:	e7ae      	b.n	8007218 <_malloc_r+0x34>
 80072ba:	463c      	mov	r4, r7
 80072bc:	687f      	ldr	r7, [r7, #4]
 80072be:	e7b6      	b.n	800722e <_malloc_r+0x4a>
 80072c0:	461a      	mov	r2, r3
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d1fb      	bne.n	80072c0 <_malloc_r+0xdc>
 80072c8:	2300      	movs	r3, #0
 80072ca:	6053      	str	r3, [r2, #4]
 80072cc:	e7de      	b.n	800728c <_malloc_r+0xa8>
 80072ce:	230c      	movs	r3, #12
 80072d0:	6033      	str	r3, [r6, #0]
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 f80c 	bl	80072f0 <__malloc_unlock>
 80072d8:	e794      	b.n	8007204 <_malloc_r+0x20>
 80072da:	6005      	str	r5, [r0, #0]
 80072dc:	e7d6      	b.n	800728c <_malloc_r+0xa8>
 80072de:	bf00      	nop
 80072e0:	200005b8 	.word	0x200005b8

080072e4 <__malloc_lock>:
 80072e4:	4801      	ldr	r0, [pc, #4]	@ (80072ec <__malloc_lock+0x8>)
 80072e6:	f000 b93d 	b.w	8007564 <__retarget_lock_acquire_recursive>
 80072ea:	bf00      	nop
 80072ec:	200006f8 	.word	0x200006f8

080072f0 <__malloc_unlock>:
 80072f0:	4801      	ldr	r0, [pc, #4]	@ (80072f8 <__malloc_unlock+0x8>)
 80072f2:	f000 b938 	b.w	8007566 <__retarget_lock_release_recursive>
 80072f6:	bf00      	nop
 80072f8:	200006f8 	.word	0x200006f8

080072fc <_strtol_l.constprop.0>:
 80072fc:	2b24      	cmp	r3, #36	@ 0x24
 80072fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007302:	4686      	mov	lr, r0
 8007304:	4690      	mov	r8, r2
 8007306:	d801      	bhi.n	800730c <_strtol_l.constprop.0+0x10>
 8007308:	2b01      	cmp	r3, #1
 800730a:	d106      	bne.n	800731a <_strtol_l.constprop.0+0x1e>
 800730c:	f000 f900 	bl	8007510 <__errno>
 8007310:	2316      	movs	r3, #22
 8007312:	6003      	str	r3, [r0, #0]
 8007314:	2000      	movs	r0, #0
 8007316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731a:	4834      	ldr	r0, [pc, #208]	@ (80073ec <_strtol_l.constprop.0+0xf0>)
 800731c:	460d      	mov	r5, r1
 800731e:	462a      	mov	r2, r5
 8007320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007324:	5d06      	ldrb	r6, [r0, r4]
 8007326:	f016 0608 	ands.w	r6, r6, #8
 800732a:	d1f8      	bne.n	800731e <_strtol_l.constprop.0+0x22>
 800732c:	2c2d      	cmp	r4, #45	@ 0x2d
 800732e:	d12d      	bne.n	800738c <_strtol_l.constprop.0+0x90>
 8007330:	782c      	ldrb	r4, [r5, #0]
 8007332:	2601      	movs	r6, #1
 8007334:	1c95      	adds	r5, r2, #2
 8007336:	f033 0210 	bics.w	r2, r3, #16
 800733a:	d109      	bne.n	8007350 <_strtol_l.constprop.0+0x54>
 800733c:	2c30      	cmp	r4, #48	@ 0x30
 800733e:	d12a      	bne.n	8007396 <_strtol_l.constprop.0+0x9a>
 8007340:	782a      	ldrb	r2, [r5, #0]
 8007342:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007346:	2a58      	cmp	r2, #88	@ 0x58
 8007348:	d125      	bne.n	8007396 <_strtol_l.constprop.0+0x9a>
 800734a:	786c      	ldrb	r4, [r5, #1]
 800734c:	2310      	movs	r3, #16
 800734e:	3502      	adds	r5, #2
 8007350:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007354:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007358:	2200      	movs	r2, #0
 800735a:	fbbc f9f3 	udiv	r9, ip, r3
 800735e:	4610      	mov	r0, r2
 8007360:	fb03 ca19 	mls	sl, r3, r9, ip
 8007364:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007368:	2f09      	cmp	r7, #9
 800736a:	d81b      	bhi.n	80073a4 <_strtol_l.constprop.0+0xa8>
 800736c:	463c      	mov	r4, r7
 800736e:	42a3      	cmp	r3, r4
 8007370:	dd27      	ble.n	80073c2 <_strtol_l.constprop.0+0xc6>
 8007372:	1c57      	adds	r7, r2, #1
 8007374:	d007      	beq.n	8007386 <_strtol_l.constprop.0+0x8a>
 8007376:	4581      	cmp	r9, r0
 8007378:	d320      	bcc.n	80073bc <_strtol_l.constprop.0+0xc0>
 800737a:	d101      	bne.n	8007380 <_strtol_l.constprop.0+0x84>
 800737c:	45a2      	cmp	sl, r4
 800737e:	db1d      	blt.n	80073bc <_strtol_l.constprop.0+0xc0>
 8007380:	fb00 4003 	mla	r0, r0, r3, r4
 8007384:	2201      	movs	r2, #1
 8007386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800738a:	e7eb      	b.n	8007364 <_strtol_l.constprop.0+0x68>
 800738c:	2c2b      	cmp	r4, #43	@ 0x2b
 800738e:	bf04      	itt	eq
 8007390:	782c      	ldrbeq	r4, [r5, #0]
 8007392:	1c95      	addeq	r5, r2, #2
 8007394:	e7cf      	b.n	8007336 <_strtol_l.constprop.0+0x3a>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1da      	bne.n	8007350 <_strtol_l.constprop.0+0x54>
 800739a:	2c30      	cmp	r4, #48	@ 0x30
 800739c:	bf0c      	ite	eq
 800739e:	2308      	moveq	r3, #8
 80073a0:	230a      	movne	r3, #10
 80073a2:	e7d5      	b.n	8007350 <_strtol_l.constprop.0+0x54>
 80073a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80073a8:	2f19      	cmp	r7, #25
 80073aa:	d801      	bhi.n	80073b0 <_strtol_l.constprop.0+0xb4>
 80073ac:	3c37      	subs	r4, #55	@ 0x37
 80073ae:	e7de      	b.n	800736e <_strtol_l.constprop.0+0x72>
 80073b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80073b4:	2f19      	cmp	r7, #25
 80073b6:	d804      	bhi.n	80073c2 <_strtol_l.constprop.0+0xc6>
 80073b8:	3c57      	subs	r4, #87	@ 0x57
 80073ba:	e7d8      	b.n	800736e <_strtol_l.constprop.0+0x72>
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295
 80073c0:	e7e1      	b.n	8007386 <_strtol_l.constprop.0+0x8a>
 80073c2:	1c53      	adds	r3, r2, #1
 80073c4:	d108      	bne.n	80073d8 <_strtol_l.constprop.0+0xdc>
 80073c6:	2322      	movs	r3, #34	@ 0x22
 80073c8:	f8ce 3000 	str.w	r3, [lr]
 80073cc:	4660      	mov	r0, ip
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	d0a0      	beq.n	8007316 <_strtol_l.constprop.0+0x1a>
 80073d4:	1e69      	subs	r1, r5, #1
 80073d6:	e006      	b.n	80073e6 <_strtol_l.constprop.0+0xea>
 80073d8:	b106      	cbz	r6, 80073dc <_strtol_l.constprop.0+0xe0>
 80073da:	4240      	negs	r0, r0
 80073dc:	f1b8 0f00 	cmp.w	r8, #0
 80073e0:	d099      	beq.n	8007316 <_strtol_l.constprop.0+0x1a>
 80073e2:	2a00      	cmp	r2, #0
 80073e4:	d1f6      	bne.n	80073d4 <_strtol_l.constprop.0+0xd8>
 80073e6:	f8c8 1000 	str.w	r1, [r8]
 80073ea:	e794      	b.n	8007316 <_strtol_l.constprop.0+0x1a>
 80073ec:	08008d27 	.word	0x08008d27

080073f0 <strtol>:
 80073f0:	4613      	mov	r3, r2
 80073f2:	460a      	mov	r2, r1
 80073f4:	4601      	mov	r1, r0
 80073f6:	4802      	ldr	r0, [pc, #8]	@ (8007400 <strtol+0x10>)
 80073f8:	6800      	ldr	r0, [r0, #0]
 80073fa:	f7ff bf7f 	b.w	80072fc <_strtol_l.constprop.0>
 80073fe:	bf00      	nop
 8007400:	2000000c 	.word	0x2000000c

08007404 <memcmp>:
 8007404:	b510      	push	{r4, lr}
 8007406:	3901      	subs	r1, #1
 8007408:	4402      	add	r2, r0
 800740a:	4290      	cmp	r0, r2
 800740c:	d101      	bne.n	8007412 <memcmp+0xe>
 800740e:	2000      	movs	r0, #0
 8007410:	e005      	b.n	800741e <memcmp+0x1a>
 8007412:	7803      	ldrb	r3, [r0, #0]
 8007414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007418:	42a3      	cmp	r3, r4
 800741a:	d001      	beq.n	8007420 <memcmp+0x1c>
 800741c:	1b18      	subs	r0, r3, r4
 800741e:	bd10      	pop	{r4, pc}
 8007420:	3001      	adds	r0, #1
 8007422:	e7f2      	b.n	800740a <memcmp+0x6>

08007424 <memmove>:
 8007424:	4288      	cmp	r0, r1
 8007426:	b510      	push	{r4, lr}
 8007428:	eb01 0402 	add.w	r4, r1, r2
 800742c:	d902      	bls.n	8007434 <memmove+0x10>
 800742e:	4284      	cmp	r4, r0
 8007430:	4623      	mov	r3, r4
 8007432:	d807      	bhi.n	8007444 <memmove+0x20>
 8007434:	1e43      	subs	r3, r0, #1
 8007436:	42a1      	cmp	r1, r4
 8007438:	d008      	beq.n	800744c <memmove+0x28>
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007442:	e7f8      	b.n	8007436 <memmove+0x12>
 8007444:	4402      	add	r2, r0
 8007446:	4601      	mov	r1, r0
 8007448:	428a      	cmp	r2, r1
 800744a:	d100      	bne.n	800744e <memmove+0x2a>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007456:	e7f7      	b.n	8007448 <memmove+0x24>

08007458 <memset>:
 8007458:	4402      	add	r2, r0
 800745a:	4603      	mov	r3, r0
 800745c:	4293      	cmp	r3, r2
 800745e:	d100      	bne.n	8007462 <memset+0xa>
 8007460:	4770      	bx	lr
 8007462:	f803 1b01 	strb.w	r1, [r3], #1
 8007466:	e7f9      	b.n	800745c <memset+0x4>

08007468 <_raise_r>:
 8007468:	291f      	cmp	r1, #31
 800746a:	b538      	push	{r3, r4, r5, lr}
 800746c:	4605      	mov	r5, r0
 800746e:	460c      	mov	r4, r1
 8007470:	d904      	bls.n	800747c <_raise_r+0x14>
 8007472:	2316      	movs	r3, #22
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800747e:	b112      	cbz	r2, 8007486 <_raise_r+0x1e>
 8007480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007484:	b94b      	cbnz	r3, 800749a <_raise_r+0x32>
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f830 	bl	80074ec <_getpid_r>
 800748c:	4622      	mov	r2, r4
 800748e:	4601      	mov	r1, r0
 8007490:	4628      	mov	r0, r5
 8007492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007496:	f000 b817 	b.w	80074c8 <_kill_r>
 800749a:	2b01      	cmp	r3, #1
 800749c:	d00a      	beq.n	80074b4 <_raise_r+0x4c>
 800749e:	1c59      	adds	r1, r3, #1
 80074a0:	d103      	bne.n	80074aa <_raise_r+0x42>
 80074a2:	2316      	movs	r3, #22
 80074a4:	6003      	str	r3, [r0, #0]
 80074a6:	2001      	movs	r0, #1
 80074a8:	e7e7      	b.n	800747a <_raise_r+0x12>
 80074aa:	2100      	movs	r1, #0
 80074ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074b0:	4620      	mov	r0, r4
 80074b2:	4798      	blx	r3
 80074b4:	2000      	movs	r0, #0
 80074b6:	e7e0      	b.n	800747a <_raise_r+0x12>

080074b8 <raise>:
 80074b8:	4b02      	ldr	r3, [pc, #8]	@ (80074c4 <raise+0xc>)
 80074ba:	4601      	mov	r1, r0
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	f7ff bfd3 	b.w	8007468 <_raise_r>
 80074c2:	bf00      	nop
 80074c4:	2000000c 	.word	0x2000000c

080074c8 <_kill_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d07      	ldr	r5, [pc, #28]	@ (80074e8 <_kill_r+0x20>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	f7fc f81f 	bl	8003518 <_kill>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d102      	bne.n	80074e4 <_kill_r+0x1c>
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	b103      	cbz	r3, 80074e4 <_kill_r+0x1c>
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	bd38      	pop	{r3, r4, r5, pc}
 80074e6:	bf00      	nop
 80074e8:	200006f4 	.word	0x200006f4

080074ec <_getpid_r>:
 80074ec:	f7fc b80c 	b.w	8003508 <_getpid>

080074f0 <_sbrk_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d06      	ldr	r5, [pc, #24]	@ (800750c <_sbrk_r+0x1c>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	602b      	str	r3, [r5, #0]
 80074fc:	f7fc f828 	bl	8003550 <_sbrk>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_sbrk_r+0x1a>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_sbrk_r+0x1a>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	200006f4 	.word	0x200006f4

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	@ (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	2000000c 	.word	0x2000000c

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	@ (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	@ (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	@ (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	@ (8007560 <__libc_init_array+0x44>)
 8007530:	f000 f872 	bl	8007618 <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	08008e30 	.word	0x08008e30
 8007558:	08008e30 	.word	0x08008e30
 800755c:	08008e30 	.word	0x08008e30
 8007560:	08008e3c 	.word	0x08008e3c

08007564 <__retarget_lock_acquire_recursive>:
 8007564:	4770      	bx	lr

08007566 <__retarget_lock_release_recursive>:
 8007566:	4770      	bx	lr

08007568 <memcpy>:
 8007568:	440a      	add	r2, r1
 800756a:	4291      	cmp	r1, r2
 800756c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007570:	d100      	bne.n	8007574 <memcpy+0xc>
 8007572:	4770      	bx	lr
 8007574:	b510      	push	{r4, lr}
 8007576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800757e:	4291      	cmp	r1, r2
 8007580:	d1f9      	bne.n	8007576 <memcpy+0xe>
 8007582:	bd10      	pop	{r4, pc}

08007584 <_free_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4605      	mov	r5, r0
 8007588:	2900      	cmp	r1, #0
 800758a:	d041      	beq.n	8007610 <_free_r+0x8c>
 800758c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007590:	1f0c      	subs	r4, r1, #4
 8007592:	2b00      	cmp	r3, #0
 8007594:	bfb8      	it	lt
 8007596:	18e4      	addlt	r4, r4, r3
 8007598:	f7ff fea4 	bl	80072e4 <__malloc_lock>
 800759c:	4a1d      	ldr	r2, [pc, #116]	@ (8007614 <_free_r+0x90>)
 800759e:	6813      	ldr	r3, [r2, #0]
 80075a0:	b933      	cbnz	r3, 80075b0 <_free_r+0x2c>
 80075a2:	6063      	str	r3, [r4, #4]
 80075a4:	6014      	str	r4, [r2, #0]
 80075a6:	4628      	mov	r0, r5
 80075a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ac:	f7ff bea0 	b.w	80072f0 <__malloc_unlock>
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d908      	bls.n	80075c6 <_free_r+0x42>
 80075b4:	6820      	ldr	r0, [r4, #0]
 80075b6:	1821      	adds	r1, r4, r0
 80075b8:	428b      	cmp	r3, r1
 80075ba:	bf01      	itttt	eq
 80075bc:	6819      	ldreq	r1, [r3, #0]
 80075be:	685b      	ldreq	r3, [r3, #4]
 80075c0:	1809      	addeq	r1, r1, r0
 80075c2:	6021      	streq	r1, [r4, #0]
 80075c4:	e7ed      	b.n	80075a2 <_free_r+0x1e>
 80075c6:	461a      	mov	r2, r3
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	b10b      	cbz	r3, 80075d0 <_free_r+0x4c>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d9fa      	bls.n	80075c6 <_free_r+0x42>
 80075d0:	6811      	ldr	r1, [r2, #0]
 80075d2:	1850      	adds	r0, r2, r1
 80075d4:	42a0      	cmp	r0, r4
 80075d6:	d10b      	bne.n	80075f0 <_free_r+0x6c>
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	4401      	add	r1, r0
 80075dc:	1850      	adds	r0, r2, r1
 80075de:	4283      	cmp	r3, r0
 80075e0:	6011      	str	r1, [r2, #0]
 80075e2:	d1e0      	bne.n	80075a6 <_free_r+0x22>
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	6053      	str	r3, [r2, #4]
 80075ea:	4408      	add	r0, r1
 80075ec:	6010      	str	r0, [r2, #0]
 80075ee:	e7da      	b.n	80075a6 <_free_r+0x22>
 80075f0:	d902      	bls.n	80075f8 <_free_r+0x74>
 80075f2:	230c      	movs	r3, #12
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	e7d6      	b.n	80075a6 <_free_r+0x22>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	1821      	adds	r1, r4, r0
 80075fc:	428b      	cmp	r3, r1
 80075fe:	bf04      	itt	eq
 8007600:	6819      	ldreq	r1, [r3, #0]
 8007602:	685b      	ldreq	r3, [r3, #4]
 8007604:	6063      	str	r3, [r4, #4]
 8007606:	bf04      	itt	eq
 8007608:	1809      	addeq	r1, r1, r0
 800760a:	6021      	streq	r1, [r4, #0]
 800760c:	6054      	str	r4, [r2, #4]
 800760e:	e7ca      	b.n	80075a6 <_free_r+0x22>
 8007610:	bd38      	pop	{r3, r4, r5, pc}
 8007612:	bf00      	nop
 8007614:	200005b8 	.word	0x200005b8

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
