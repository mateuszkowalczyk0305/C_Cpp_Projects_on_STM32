
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006adc  08006adc  00007adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae4  08006ae4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006af4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000308  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f012  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf9  00000000  00000000  0002709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00029d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f7  00000000  00000000  0002aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024742  00000000  00000000  0002b46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f14f  00000000  00000000  0004fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d59c6  00000000  00000000  0005ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001346c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f08  00000000  00000000  0013470c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00139614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066d4 	.word	0x080066d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080066d4 	.word	0x080066d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	@ 0x28
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b45      	ldr	r3, [pc, #276]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a44      	ldr	r2, [pc, #272]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b42      	ldr	r3, [pc, #264]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002be:	4b3f      	ldr	r3, [pc, #252]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a3e      	ldr	r2, [pc, #248]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b3c      	ldr	r3, [pc, #240]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b39      	ldr	r3, [pc, #228]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a38      	ldr	r2, [pc, #224]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b36      	ldr	r3, [pc, #216]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ee:	4b33      	ldr	r3, [pc, #204]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a32      	ldr	r2, [pc, #200]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b30      	ldr	r3, [pc, #192]	@ (80003bc <MX_GPIO_Init+0x12c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b2d      	ldr	r3, [pc, #180]	@ (80003bc <MX_GPIO_Init+0x12c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2c      	ldr	r2, [pc, #176]	@ (80003bc <MX_GPIO_Init+0x12c>)
 800030c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2a      	ldr	r3, [pc, #168]	@ (80003bc <MX_GPIO_Init+0x12c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2120      	movs	r1, #32
 8000322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000326:	f003 f9f9 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Key_GPIO_Port, Key_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000330:	4823      	ldr	r0, [pc, #140]	@ (80003c0 <MX_GPIO_Init+0x130>)
 8000332:	f003 f9f3 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2104      	movs	r1, #4
 800033a:	4822      	ldr	r0, [pc, #136]	@ (80003c4 <MX_GPIO_Init+0x134>)
 800033c:	f003 f9ee 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000340:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000346:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4619      	mov	r1, r3
 8000356:	481a      	ldr	r0, [pc, #104]	@ (80003c0 <MX_GPIO_Init+0x130>)
 8000358:	f003 f856 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800035c:	2320      	movs	r3, #32
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	4619      	mov	r1, r3
 8000372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000376:	f003 f847 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Key_Pin;
 800037a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	4619      	mov	r1, r3
 8000392:	480b      	ldr	r0, [pc, #44]	@ (80003c0 <MX_GPIO_Init+0x130>)
 8000394:	f003 f838 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_Pin;
 8000398:	2304      	movs	r3, #4
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <MX_GPIO_Init+0x134>)
 80003b0:	f003 f82a 	bl	8003408 <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	@ 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000c00 	.word	0x48000c00

080003c8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d101      	bne.n	80003de <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	e006      	b.n	80003ec <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	68b9      	ldr	r1, [r7, #8]
 80003e2:	68f8      	ldr	r0, [r7, #12]
 80003e4:	f006 f86c 	bl	80064c0 <memcmp>
 80003e8:	4603      	mov	r3, r0
 80003ea:	bf00      	nop
      }
 80003ec:	4618      	mov	r0, r3
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ff3f 	bl	8000280 <strlen>
 8000402:	4603      	mov	r3, r0
      }
 8000404:	4618      	mov	r0, r3
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <_ZNSt7__cxx119to_stringEi>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	0fdb      	lsrs	r3, r3, #31
 8000432:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000434:	7dfb      	ldrb	r3, [r7, #23]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <_ZNSt7__cxx119to_stringEi+0x1c>
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	425b      	negs	r3, r3
 800043e:	e000      	b.n	8000442 <_ZNSt7__cxx119to_stringEi+0x1e>
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000444:	210a      	movs	r1, #10
 8000446:	6938      	ldr	r0, [r7, #16]
 8000448:	f001 fadf 	bl	8001a0a <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 800044c:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 800044e:	7dfa      	ldrb	r2, [r7, #23]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	18d4      	adds	r4, r2, r3
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	4618      	mov	r0, r3
 800045a:	f005 fbab 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	222d      	movs	r2, #45	@ 0x2d
 8000464:	4621      	mov	r1, r4
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f005 fc79 	bl	8005d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	4618      	mov	r0, r3
 8000472:	f005 fba1 	bl	8005bb8 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000476:	7dfb      	ldrb	r3, [r7, #23]
 8000478:	4619      	mov	r1, r3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f005 fd5b 	bl	8005f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000480:	4603      	mov	r3, r0
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	68f9      	ldr	r1, [r7, #12]
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fafe 	bl	8001a88 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 800048c:	bf00      	nop
  }
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	371c      	adds	r7, #28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd90      	pop	{r4, r7, pc}

08000496 <_ZN4HC05C1EP20__UART_HandleTypeDefP12GPIO_TypeDeftS3_tm>:
#include "hc05_lib.hpp"

HC05::HC05(UART_HandleTypeDef* _uart, GPIO_TypeDef* _KEY_Port, uint16_t _KEY_Pin, GPIO_TypeDef* _EN_Port, uint16_t _EN_Pin, uint32_t baud_rate)
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	807b      	strh	r3, [r7, #2]
			:huart(_uart), KEY_Port(_KEY_Port), KEY_Pin(_KEY_Pin), EN_Port(_EN_Port), EN_Pin(_EN_Pin), userBaudRate(baud_rate)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	887a      	ldrh	r2, [r7, #2]
 80004b4:	811a      	strh	r2, [r3, #8]
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	69ba      	ldr	r2, [r7, #24]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	8bba      	ldrh	r2, [r7, #28]
 80004c0:	821a      	strh	r2, [r3, #16]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6a3a      	ldr	r2, [r7, #32]
 80004c6:	615a      	str	r2, [r3, #20]
	{
		// Pin default configuration for AT Mode:
	    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	68d8      	ldr	r0, [r3, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	8a1b      	ldrh	r3, [r3, #16]
 80004d0:	2200      	movs	r2, #0
 80004d2:	4619      	mov	r1, r3
 80004d4:	f003 f922 	bl	800371c <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 80004d8:	2064      	movs	r0, #100	@ 0x64
 80004da:	f002 fe8b 	bl	80031f4 <HAL_Delay>
		HAL_GPIO_WritePin(KEY_Port, KEY_Pin, GPIO_PIN_SET);
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6858      	ldr	r0, [r3, #4]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	891b      	ldrh	r3, [r3, #8]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	f003 f917 	bl	800371c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80004ee:	2064      	movs	r0, #100	@ 0x64
 80004f0:	f002 fe80 	bl	80031f4 <HAL_Delay>
		HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	68d8      	ldr	r0, [r3, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	8a1b      	ldrh	r3, [r3, #16]
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	f003 f90c 	bl	800371c <HAL_GPIO_WritePin>

		// Calculate correct BRR value (OVER8 = 0):
		setATModeBaudRate(baud_rate);
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	b29b      	uxth	r3, r3
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 fa64 	bl	80019d8 <_ZN4HC0517setATModeBaudRateEt>
	}
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <_ZN4HC0514isConnectionOkEv>:

bool HC05::isConnectionOk()
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08b      	sub	sp, #44	@ 0x2c
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	return cmdWrite("AT");
 8000524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000528:	4618      	mov	r0, r3
 800052a:	f005 fb43 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800052e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	490e      	ldr	r1, [pc, #56]	@ (8000570 <_ZN4HC0514isConnectionOkEv+0x54>)
 8000538:	4618      	mov	r0, r3
 800053a:	f005 fed9 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	4619      	mov	r1, r3
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f001 f9b5 	bl	80018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800054a:	4603      	mov	r3, r0
 800054c:	461c      	mov	r4, r3
 800054e:	bf00      	nop
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4618      	mov	r0, r3
 8000556:	f005 fc2a 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800055a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fb2a 	bl	8005bb8 <_ZNSaIcED1Ev>
 8000564:	4623      	mov	r3, r4
}
 8000566:	4618      	mov	r0, r3
 8000568:	372c      	adds	r7, #44	@ 0x2c
 800056a:	46bd      	mov	sp, r7
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	bf00      	nop
 8000570:	080066ec 	.word	0x080066ec

08000574 <_ZN4HC0511setBaudRateE8BaudRate7StopBit9ParityBit>:

	return cmdWrite(at_command);
}

bool HC05::setBaudRate(BaudRate br_speed, StopBit stop_bit, ParityBit parity_bit)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b0bb      	sub	sp, #236	@ 0xec
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	460b      	mov	r3, r1
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	4613      	mov	r3, r2
 8000588:	71bb      	strb	r3, [r7, #6]
	// Int -> String conversion:
	std::string br_string = std::to_string(br_speed);
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff46 	bl	8000424 <_ZNSt7__cxx119to_stringEi>
	std::string sb_string = std::to_string(stop_bit);
 8000598:	79fa      	ldrb	r2, [r7, #7]
 800059a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff3f 	bl	8000424 <_ZNSt7__cxx119to_stringEi>
	std::string pb_string = std::to_string(parity_bit);
 80005a6:	79ba      	ldrb	r2, [r7, #6]
 80005a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff38 	bl	8000424 <_ZNSt7__cxx119to_stringEi>

	// Set AT command in appropriate command:
	std::string at_command = "AT+UART=" + br_string + "," + sb_string + "," + pb_string;
 80005b4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80005b8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80005bc:	4934      	ldr	r1, [pc, #208]	@ (8000690 <_ZN4HC0511setBaudRateE8BaudRate7StopBit9ParityBit+0x11c>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fab8 	bl	8001b34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80005c4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80005c8:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80005cc:	4a31      	ldr	r2, [pc, #196]	@ (8000694 <_ZN4HC0511setBaudRateE8BaudRate7StopBit9ParityBit+0x120>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 faf0 	bl	8001bb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80005d4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80005d8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80005dc:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fafe 	bl	8001be2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80005e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005ea:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80005ee:	4a29      	ldr	r2, [pc, #164]	@ (8000694 <_ZN4HC0511setBaudRateE8BaudRate7StopBit9ParityBit+0x120>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fadf 	bl	8001bb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80005fe:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000602:	4618      	mov	r0, r3
 8000604:	f001 faed 	bl	8001be2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8000608:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fbce 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000612:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fbc9 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800061c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000620:	4618      	mov	r0, r3
 8000622:	f005 fbc4 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000626:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fbbf 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Return true if communication OK:
	return cmdWrite(at_command);
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fdf8 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000640:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000644:	4619      	mov	r1, r3
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f001 f934 	bl	80018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800064c:	4603      	mov	r3, r0
 800064e:	461c      	mov	r4, r3
 8000650:	bf00      	nop
 8000652:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fba9 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fba4 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000666:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fb9f 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000674:	4618      	mov	r0, r3
 8000676:	f005 fb9a 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800067a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800067e:	4618      	mov	r0, r3
 8000680:	f005 fb95 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return cmdWrite(at_command);
 8000684:	4623      	mov	r3, r4
}
 8000686:	4618      	mov	r0, r3
 8000688:	37ec      	adds	r7, #236	@ 0xec
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	bf00      	nop
 8000690:	080066f8 	.word	0x080066f8
 8000694:	08006704 	.word	0x08006704

08000698 <_ZN4HC057setRoleE4Role>:

bool HC05::setRole(Role role)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b095      	sub	sp, #84	@ 0x54
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	// Int -> String conversion:
	std::string role_string = std::to_string(role);
 80006a4:	78fa      	ldrb	r2, [r7, #3]
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff feb9 	bl	8000424 <_ZNSt7__cxx119to_stringEi>
	std::string at_command = "AT+ROLE=" + role_string;
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	f107 0220 	add.w	r2, r7, #32
 80006ba:	4914      	ldr	r1, [pc, #80]	@ (800070c <_ZN4HC057setRoleE4Role+0x74>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fa39 	bl	8001b34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>

	// Return true if communication OK:
	return cmdWrite(at_command);
 80006c2:	f107 0208 	add.w	r2, r7, #8
 80006c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fdaf 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80006d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006d6:	4619      	mov	r1, r3
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f001 f8eb 	bl	80018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80006de:	4603      	mov	r3, r0
 80006e0:	461c      	mov	r4, r3
 80006e2:	bf00      	nop
 80006e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fb60 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4618      	mov	r0, r3
 80006f4:	f005 fb5b 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fb56 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return cmdWrite(at_command);
 8000702:	4623      	mov	r3, r4
}
 8000704:	4618      	mov	r0, r3
 8000706:	3754      	adds	r7, #84	@ 0x54
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	08006708 	.word	0x08006708

08000710 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f001 fa89 	bl	8001c30 <_ZNSaI10Slave_infoED1Ev>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa6c 	bl	8001c10 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE12_Vector_implC1Ev>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffeb 	bl	8000728 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <_ZN10Slave_infoC1Ev>:

	uint32_t userBaudRate;
};

// Slave parameters structure info:
struct Slave_info{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f005 faeb 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3318      	adds	r3, #24
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fae6 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3330      	adds	r3, #48	@ 0x30
 800077a:	4618      	mov	r0, r3
 800077c:	f005 fae1 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3348      	adds	r3, #72	@ 0x48
 8000784:	4618      	mov	r0, r3
 8000786:	f005 fadc 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <_ZN10Slave_infoD1Ev>:
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3348      	adds	r3, #72	@ 0x48
 80007a0:	4618      	mov	r0, r3
 80007a2:	f005 fb04 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3330      	adds	r3, #48	@ 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 faff 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3318      	adds	r3, #24
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 fafa 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f005 faf6 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EEC1EOS2_>:
      _Vector_base(_Vector_base&&) = default;
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fa92 	bl	8001d06 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE12_Vector_implC1EOS3_>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_ZNSt6vectorI10Slave_infoSaIS0_EEC1EOS2_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffe5 	bl	80007cc <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EEC1EOS2_>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZN4HC0519getBluetoothDevicesEhh>:

	return clear_response;
}

std::vector<Slave_info> HC05::getBluetoothDevices(uint8_t devices, uint8_t inquiring_time_sec)
{
 800080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000810:	f2ad 6dac 	subw	sp, sp, #1708	@ 0x6ac
 8000814:	af00      	add	r7, sp, #0
 8000816:	f507 64d5 	add.w	r4, r7, #1704	@ 0x6a8
 800081a:	f2a4 647c 	subw	r4, r4, #1660	@ 0x67c
 800081e:	6020      	str	r0, [r4, #0]
 8000820:	f507 60d5 	add.w	r0, r7, #1704	@ 0x6a8
 8000824:	f5a0 60d0 	sub.w	r0, r0, #1664	@ 0x680
 8000828:	6001      	str	r1, [r0, #0]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000832:	f2a3 6281 	subw	r2, r3, #1665	@ 0x681
 8000836:	460b      	mov	r3, r1
 8000838:	7013      	strb	r3, [r2, #0]
 800083a:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 800083e:	f2a3 6282 	subw	r2, r3, #1666	@ 0x682
 8000842:	4603      	mov	r3, r0
 8000844:	7013      	strb	r3, [r2, #0]

		devices_info.push_back(device);
	}

	return devices_info;
}
 8000846:	466b      	mov	r3, sp
 8000848:	623b      	str	r3, [r7, #32]
	if (inquiring_time_sec > 48) inquiring_time_sec = 48;
 800084a:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 800084e:	f2a3 6382 	subw	r3, r3, #1666	@ 0x682
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b30      	cmp	r3, #48	@ 0x30
 8000856:	d905      	bls.n	8000864 <_ZN4HC0519getBluetoothDevicesEhh+0x58>
 8000858:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 800085c:	f2a3 6282 	subw	r2, r3, #1666	@ 0x682
 8000860:	2330      	movs	r3, #48	@ 0x30
 8000862:	7013      	strb	r3, [r2, #0]
	bool role = setRole(Role_master);
 8000864:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000868:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 800086c:	2101      	movs	r1, #1
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	f7ff ff12 	bl	8000698 <_ZN4HC057setRoleE4Role>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 36a5 	strb.w	r3, [r7, #1701]	@ 0x6a5
	HAL_Delay(50);
 800087a:	2032      	movs	r0, #50	@ 0x32
 800087c:	f002 fcba 	bl	80031f4 <HAL_Delay>
	if (!role) return {};
 8000880:	f897 36a5 	ldrb.w	r3, [r7, #1701]	@ 0x6a5
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d01c      	beq.n	80008c8 <_ZN4HC0519getBluetoothDevicesEhh+0xbc>
 800088e:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000892:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80008a0:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80008ae:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80008bc:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	f7ff ff3e 	bl	8000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>
 80008c6:	e3a2      	b.n	800100e <_ZN4HC0519getBluetoothDevicesEhh+0x802>
	bool init = cmdWrite("AT+INIT");
 80008c8:	f207 53a4 	addw	r3, r7, #1444	@ 0x5a4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 f971 	bl	8005bb4 <_ZNSaIcEC1Ev>
 80008d2:	f207 53a4 	addw	r3, r7, #1444	@ 0x5a4
 80008d6:	f207 508c 	addw	r0, r7, #1420	@ 0x58c
 80008da:	461a      	mov	r2, r3
 80008dc:	4985      	ldr	r1, [pc, #532]	@ (8000af4 <_ZN4HC0519getBluetoothDevicesEhh+0x2e8>)
 80008de:	f005 fd07 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80008e2:	f207 528c 	addw	r2, r7, #1420	@ 0x58c
 80008e6:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80008ea:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 80008ee:	4611      	mov	r1, r2
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f000 ffdf 	bl	80018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 36a4 	strb.w	r3, [r7, #1700]	@ 0x6a4
 80008fc:	f207 538c 	addw	r3, r7, #1420	@ 0x58c
 8000900:	4618      	mov	r0, r3
 8000902:	f005 fa54 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000906:	f207 53a4 	addw	r3, r7, #1444	@ 0x5a4
 800090a:	4618      	mov	r0, r3
 800090c:	f005 f954 	bl	8005bb8 <_ZNSaIcED1Ev>
	HAL_Delay(50);
 8000910:	2032      	movs	r0, #50	@ 0x32
 8000912:	f002 fc6f 	bl	80031f4 <HAL_Delay>
	if(!init) return {};
 8000916:	f897 36a4 	ldrb.w	r3, [r7, #1700]	@ 0x6a4
 800091a:	f083 0301 	eor.w	r3, r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01c      	beq.n	800095e <_ZN4HC0519getBluetoothDevicesEhh+0x152>
 8000924:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000928:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000936:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000944:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000952:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	f7ff fef3 	bl	8000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>
 800095c:	e357      	b.n	800100e <_ZN4HC0519getBluetoothDevicesEhh+0x802>
	bool iac = cmdWrite("AT+IAC=9e8b33");
 800095e:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 8000962:	4618      	mov	r0, r3
 8000964:	f005 f926 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8000968:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 800096c:	f507 60b5 	add.w	r0, r7, #1448	@ 0x5a8
 8000970:	461a      	mov	r2, r3
 8000972:	4961      	ldr	r1, [pc, #388]	@ (8000af8 <_ZN4HC0519getBluetoothDevicesEhh+0x2ec>)
 8000974:	f005 fcbc 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000978:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 800097c:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000980:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000984:	4611      	mov	r1, r2
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	f000 ff94 	bl	80018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800098c:	4603      	mov	r3, r0
 800098e:	f887 36a3 	strb.w	r3, [r7, #1699]	@ 0x6a3
 8000992:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8000996:	4618      	mov	r0, r3
 8000998:	f005 fa09 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800099c:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f909 	bl	8005bb8 <_ZNSaIcED1Ev>
	HAL_Delay(50);
 80009a6:	2032      	movs	r0, #50	@ 0x32
 80009a8:	f002 fc24 	bl	80031f4 <HAL_Delay>
	if(!iac) return {};
 80009ac:	f897 36a3 	ldrb.w	r3, [r7, #1699]	@ 0x6a3
 80009b0:	f083 0301 	eor.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d01c      	beq.n	80009f4 <_ZN4HC0519getBluetoothDevicesEhh+0x1e8>
 80009ba:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80009be:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80009cc:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80009da:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80009e8:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	f7ff fea8 	bl	8000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>
 80009f2:	e30c      	b.n	800100e <_ZN4HC0519getBluetoothDevicesEhh+0x802>
	std::string devices_string = std::to_string(devices);
 80009f4:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 80009f8:	f2a3 6381 	subw	r3, r3, #1665	@ 0x681
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000a02:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fd0b 	bl	8000424 <_ZNSt7__cxx119to_stringEi>
	std::string inquiring_time_string = std::to_string(inquiring_time_sec);
 8000a0e:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000a12:	f2a3 6382 	subw	r3, r3, #1666	@ 0x682
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000a1c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fcfe 	bl	8000424 <_ZNSt7__cxx119to_stringEi>
	std::string inqm_command = "AT+INQM=0," + devices_string + "," + inquiring_time_string;
 8000a28:	f207 50dc 	addw	r0, r7, #1500	@ 0x5dc
 8000a2c:	f207 5374 	addw	r3, r7, #1396	@ 0x574
 8000a30:	461a      	mov	r2, r3
 8000a32:	4932      	ldr	r1, [pc, #200]	@ (8000afc <_ZN4HC0519getBluetoothDevicesEhh+0x2f0>)
 8000a34:	f001 f87e 	bl	8001b34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8000a38:	f207 50c4 	addw	r0, r7, #1476	@ 0x5c4
 8000a3c:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8000a40:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <_ZN4HC0519getBluetoothDevicesEhh+0x2f4>)
 8000a42:	4619      	mov	r1, r3
 8000a44:	f001 f8b6 	bl	8001bb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000a48:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000a4c:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 8000a50:	f207 525c 	addw	r2, r7, #1372	@ 0x55c
 8000a54:	f207 53c4 	addw	r3, r7, #1476	@ 0x5c4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f001 f8c2 	bl	8001be2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8000a5e:	f207 53c4 	addw	r3, r7, #1476	@ 0x5c4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f005 f9a3 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000a68:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 f99e 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	bool inqm = cmdWrite(inqm_command);
 8000a72:	f207 5244 	addw	r2, r7, #1348	@ 0x544
 8000a76:	f207 53f4 	addw	r3, r7, #1524	@ 0x5f4
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f005 fbd7 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000a82:	f207 52f4 	addw	r2, r7, #1524	@ 0x5f4
 8000a86:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000a8a:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000a8e:	4611      	mov	r1, r2
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	f000 ff0f 	bl	80018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 36a2 	strb.w	r3, [r7, #1698]	@ 0x6a2
 8000a9c:	f207 53f4 	addw	r3, r7, #1524	@ 0x5f4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 f984 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	HAL_Delay(50);
 8000aa6:	2032      	movs	r0, #50	@ 0x32
 8000aa8:	f002 fba4 	bl	80031f4 <HAL_Delay>
	if(!inqm) return {};
 8000aac:	f897 36a2 	ldrb.w	r3, [r7, #1698]	@ 0x6a2
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d024      	beq.n	8000b04 <_ZN4HC0519getBluetoothDevicesEhh+0x2f8>
 8000aba:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000abe:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000acc:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000ada:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000ae8:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	f7ff fe28 	bl	8000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>
 8000af2:	e27d      	b.n	8000ff0 <_ZN4HC0519getBluetoothDevicesEhh+0x7e4>
 8000af4:	08006758 	.word	0x08006758
 8000af8:	08006760 	.word	0x08006760
 8000afc:	08006770 	.word	0x08006770
 8000b00:	08006704 	.word	0x08006704
	char buff[1000] = {0};
 8000b04:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000b08:	f2a3 524c 	subw	r2, r3, #1356	@ 0x54c
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	1d10      	adds	r0, r2, #4
 8000b12:	f44f 7379 	mov.w	r3, #996	@ 0x3e4
 8000b16:	461a      	mov	r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f005 fcfb 	bl	8006514 <memset>
	uint32_t answer_timeout_ms = inquiring_time_sec * 2000; // 2x default timeout
 8000b1e:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000b22:	f2a3 6382 	subw	r3, r3, #1666	@ 0x682
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
	std::string cmd = "AT+INQ\r\n";
 8000b34:	f207 630c 	addw	r3, r7, #1548	@ 0x60c
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 f83b 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8000b3e:	f207 630c 	addw	r3, r7, #1548	@ 0x60c
 8000b42:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 8000b46:	461a      	mov	r2, r3
 8000b48:	499a      	ldr	r1, [pc, #616]	@ (8000db4 <_ZN4HC0519getBluetoothDevicesEhh+0x5a8>)
 8000b4a:	f005 fbd1 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000b4e:	f207 630c 	addw	r3, r7, #1548	@ 0x60c
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 f830 	bl	8005bb8 <_ZNSaIcED1Ev>
	HAL_UART_Transmit(huart, (uint8_t*)cmd.c_str(), cmd.length(), 500);
 8000b58:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000b5c:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681d      	ldr	r5, [r3, #0]
 8000b64:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f005 fae7 	bl	800613c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000b6e:	4604      	mov	r4, r0
 8000b70:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 f950 	bl	8005e1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	f004 fac1 	bl	800510c <HAL_UART_Transmit>
	HAL_UART_Receive(huart, (uint8_t*)buff, 100, answer_timeout_ms);
 8000b8a:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000b8e:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8000b9a:	f8d7 369c 	ldr.w	r3, [r7, #1692]	@ 0x69c
 8000b9e:	2264      	movs	r2, #100	@ 0x64
 8000ba0:	f004 fb3d 	bl	800521e <HAL_UART_Receive>
	std::string response(buff);
 8000ba4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 f803 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8000bae:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8000bb2:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8000bb6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fb98 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000bc0:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fff7 	bl	8005bb8 <_ZNSaIcED1Ev>
	std::string removing_str = "\r\n";
 8000bca:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fff0 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8000bd4:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 8000bd8:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4976      	ldr	r1, [pc, #472]	@ (8000db8 <_ZN4HC0519getBluetoothDevicesEhh+0x5ac>)
 8000be0:	f005 fb86 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000be4:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 ffe5 	bl	8005bb8 <_ZNSaIcED1Ev>
	size_t inq_pos = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
	std::string dev_info[devices];
 8000bf4:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000bf8:	f2a3 6381 	subw	r3, r3, #1665	@ 0x681
 8000bfc:	781e      	ldrb	r6, [r3, #0]
 8000bfe:	4633      	mov	r3, r6
 8000c00:	3b01      	subs	r3, #1
 8000c02:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 8000c06:	b2f3      	uxtb	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	61fa      	str	r2, [r7, #28]
 8000c0e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000c12:	4622      	mov	r2, r4
 8000c14:	462b      	mov	r3, r5
 8000c16:	1891      	adds	r1, r2, r2
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	415b      	adcs	r3, r3
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c22:	4621      	mov	r1, r4
 8000c24:	eb12 0a01 	adds.w	sl, r2, r1
 8000c28:	4629      	mov	r1, r5
 8000c2a:	eb43 0b01 	adc.w	fp, r3, r1
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000c3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000c3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000c42:	b2f3      	uxtb	r3, r6
 8000c44:	2200      	movs	r2, #0
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	617a      	str	r2, [r7, #20]
 8000c4a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000c4e:	4622      	mov	r2, r4
 8000c50:	462b      	mov	r3, r5
 8000c52:	1891      	adds	r1, r2, r2
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	415b      	adcs	r3, r3
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c5e:	4621      	mov	r1, r4
 8000c60:	eb12 0801 	adds.w	r8, r2, r1
 8000c64:	4629      	mov	r1, r5
 8000c66:	eb43 0901 	adc.w	r9, r3, r1
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000c76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000c7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000c7e:	4632      	mov	r2, r6
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	3307      	adds	r3, #7
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c92:	466b      	mov	r3, sp
 8000c94:	3303      	adds	r3, #3
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	f8c7 3690 	str.w	r3, [r7, #1680]	@ 0x690
 8000c9e:	f8d7 3690 	ldr.w	r3, [r7, #1680]	@ 0x690
 8000ca2:	4632      	mov	r2, r6
 8000ca4:	1e54      	subs	r4, r2, #1
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	e004      	b.n	8000cb4 <_ZN4HC0519getBluetoothDevicesEhh+0x4a8>
 8000caa:	4628      	mov	r0, r5
 8000cac:	f005 f849 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000cb0:	3c01      	subs	r4, #1
 8000cb2:	3518      	adds	r5, #24
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	daf8      	bge.n	8000caa <_ZN4HC0519getBluetoothDevicesEhh+0x49e>
	for (uint8_t i = 0; i < devices; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 36a7 	strb.w	r3, [r7, #1703]	@ 0x6a7
 8000cbe:	e065      	b.n	8000d8c <_ZN4HC0519getBluetoothDevicesEhh+0x580>
		inq_pos = response.find(removing_str);
 8000cc0:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000cc4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f005 fa6c 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8000cd0:	f8c7 0698 	str.w	r0, [r7, #1688]	@ 0x698
		if (inq_pos == std::string::npos) break;
 8000cd4:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d060      	beq.n	8000da0 <_ZN4HC0519getBluetoothDevicesEhh+0x594>
		std::string substring = response.substr(0, inq_pos);
 8000cde:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000ce2:	f5a3 60b7 	sub.w	r0, r3, #1464	@ 0x5b8
 8000ce6:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8000cea:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f005 faea 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		response = response.substr(inq_pos + removing_str.length());
 8000cf4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 f88e 	bl	8005e1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8000d04:	441a      	add	r2, r3
 8000d06:	f507 60c3 	add.w	r0, r7, #1560	@ 0x618
 8000d0a:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	f005 fad9 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8000d16:	f507 62c3 	add.w	r2, r7, #1560	@ 0x618
 8000d1a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f005 f84a 	bl	8005dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8000d26:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 f83f 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if (substring.find("OK") != std::string::npos) break;
 8000d30:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000d34:	2200      	movs	r2, #0
 8000d36:	4921      	ldr	r1, [pc, #132]	@ (8000dbc <_ZN4HC0519getBluetoothDevicesEhh+0x5b0>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fa3b 	bl	80061b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_ZN4HC0519getBluetoothDevicesEhh+0x548>
 8000d50:	2400      	movs	r4, #0
 8000d52:	e00f      	b.n	8000d74 <_ZN4HC0519getBluetoothDevicesEhh+0x568>
		dev_info[i] = substring;
 8000d54:	f897 26a7 	ldrb.w	r2, [r7, #1703]	@ 0x6a7
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8000d64:	4413      	add	r3, r2
 8000d66:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 f884 	bl	8005e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	}
 8000d72:	2401      	movs	r4, #1
 8000d74:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 f818 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000d7e:	2c01      	cmp	r4, #1
 8000d80:	d10e      	bne.n	8000da0 <_ZN4HC0519getBluetoothDevicesEhh+0x594>
	for (uint8_t i = 0; i < devices; i++)
 8000d82:	f897 36a7 	ldrb.w	r3, [r7, #1703]	@ 0x6a7
 8000d86:	3301      	adds	r3, #1
 8000d88:	f887 36a7 	strb.w	r3, [r7, #1703]	@ 0x6a7
 8000d8c:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000d90:	f2a3 6381 	subw	r3, r3, #1665	@ 0x681
 8000d94:	f897 26a7 	ldrb.w	r2, [r7, #1703]	@ 0x6a7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d390      	bcc.n	8000cc0 <_ZN4HC0519getBluetoothDevicesEhh+0x4b4>
 8000d9e:	e000      	b.n	8000da2 <_ZN4HC0519getBluetoothDevicesEhh+0x596>
		if (inq_pos == std::string::npos) break;
 8000da0:	bf00      	nop
	std::vector<Slave_info> devices_info;
 8000da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fccb 	bl	8000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>
	for (uint8_t i = 0; i < devices; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 36a6 	strb.w	r3, [r7, #1702]	@ 0x6a6
 8000db2:	e0e0      	b.n	8000f76 <_ZN4HC0519getBluetoothDevicesEhh+0x76a>
 8000db4:	0800677c 	.word	0x0800677c
 8000db8:	08006744 	.word	0x08006744
 8000dbc:	08006788 	.word	0x08006788
		if (dev_info[i].empty()) break;
 8000dc0:	f897 26a6 	ldrb.w	r2, [r7, #1702]	@ 0x6a6
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f005 f8aa 	bl	8005f2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 80d6 	bne.w	8000f8c <_ZN4HC0519getBluetoothDevicesEhh+0x780>
		std::string mac_address = findMACaddr(dev_info[i]);
 8000de0:	f897 26a6 	ldrb.w	r2, [r7, #1702]	@ 0x6a6
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8000df0:	441a      	add	r2, r3
 8000df2:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fa19 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000dfe:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000e02:	f5a3 60ba 	sub.w	r0, r3, #1488	@ 0x5d0
 8000e06:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 8000e0a:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000e0e:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	f000 fb14 	bl	8001440 <_ZN4HC0511findMACaddrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e18:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 ffc6 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string name = getNameFromMAC(mac_address);
 8000e22:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8000e26:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 f9ff 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000e32:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000e36:	f5a3 60bd 	sub.w	r0, r3, #1512	@ 0x5e8
 8000e3a:	f507 62c9 	add.w	r2, r7, #1608	@ 0x648
 8000e3e:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000e42:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	f000 f948 	bl	80010dc <_ZN4HC0514getNameFromMACENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e4c:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 ffac 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string type = findDevType(dev_info[i]);
 8000e56:	f897 26a6 	ldrb.w	r2, [r7, #1702]	@ 0x6a6
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8000e66:	441a      	add	r2, r3
 8000e68:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 f9de 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000e74:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000e78:	f5a3 60c0 	sub.w	r0, r3, #1536	@ 0x600
 8000e7c:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8000e80:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000e84:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f000 fb33 	bl	80014f4 <_ZN4HC0511findDevTypeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e8e:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 ff8b 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string rssi = findDevRssi(dev_info[i]);
 8000e98:	f897 26a6 	ldrb.w	r2, [r7, #1702]	@ 0x6a6
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8000ea8:	441a      	add	r2, r3
 8000eaa:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 f9bd 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000eb6:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000eba:	f5a3 60c3 	sub.w	r0, r3, #1560	@ 0x618
 8000ebe:	f507 62cf 	add.w	r2, r7, #1656	@ 0x678
 8000ec2:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000ec6:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	f000 fb54 	bl	8001578 <_ZN4HC0511findDevRssiENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000ed0:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 ff6a 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Slave_info device;
 8000eda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fc3c 	bl	800075c <_ZN10Slave_infoC1Ev>
		device.slave_address = mac_address;
 8000ee4:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8000ee8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 ffc3 	bl	8005e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		device.slave_name = name;
 8000ef4:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8000ef8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000efc:	3318      	adds	r3, #24
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 ffba 	bl	8005e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		device.slave_type = type;
 8000f06:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000f0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f0e:	3330      	adds	r3, #48	@ 0x30
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 ffb1 	bl	8005e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		device.slave_rssi = rssi;
 8000f18:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8000f1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f20:	3348      	adds	r3, #72	@ 0x48
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 ffa8 	bl	8005e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		devices_info.push_back(device);
 8000f2a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fec0 	bl	8001cba <_ZNSt6vectorI10Slave_infoSaIS0_EE9push_backERKS0_>
	}
 8000f3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc28 	bl	8000794 <_ZN10Slave_infoD1Ev>
 8000f44:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 ff30 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f4e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 ff2b 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f58:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 ff26 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f62:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 ff21 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for (uint8_t i = 0; i < devices; i++)
 8000f6c:	f897 36a6 	ldrb.w	r3, [r7, #1702]	@ 0x6a6
 8000f70:	3301      	adds	r3, #1
 8000f72:	f887 36a6 	strb.w	r3, [r7, #1702]	@ 0x6a6
 8000f76:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000f7a:	f2a3 6381 	subw	r3, r3, #1665	@ 0x681
 8000f7e:	f897 26a6 	ldrb.w	r2, [r7, #1702]	@ 0x6a6
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f4ff af1b 	bcc.w	8000dc0 <_ZN4HC0519getBluetoothDevicesEhh+0x5b4>
 8000f8a:	e000      	b.n	8000f8e <_ZN4HC0519getBluetoothDevicesEhh+0x782>
		if (dev_info[i].empty()) break;
 8000f8c:	bf00      	nop
	return devices_info;
 8000f8e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f92:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8000f96:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f7ff fc25 	bl	80007ec <_ZNSt6vectorI10Slave_infoSaIS0_EEC1EOS2_>
}
 8000fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fe6c 	bl	8001c84 <_ZNSt6vectorI10Slave_infoSaIS0_EED1Ev>
	std::string dev_info[devices];
 8000fac:	4632      	mov	r2, r6
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f8d7 3690 	ldr.w	r3, [r7, #1680]	@ 0x690
 8000fbc:	189c      	adds	r4, r3, r2
}
 8000fbe:	f8d7 3690 	ldr.w	r3, [r7, #1680]	@ 0x690
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d004      	beq.n	8000fd0 <_ZN4HC0519getBluetoothDevicesEhh+0x7c4>
	std::string dev_info[devices];
 8000fc6:	3c18      	subs	r4, #24
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f004 fef0 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000fce:	e7f6      	b.n	8000fbe <_ZN4HC0519getBluetoothDevicesEhh+0x7b2>
	std::string dev_info[devices];
 8000fd0:	bf00      	nop
}
 8000fd2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fee9 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000fdc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 fee4 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000fe6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 fedf 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000ff0:	f207 5344 	addw	r3, r7, #1348	@ 0x544
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 feda 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000ffa:	f207 535c 	addw	r3, r7, #1372	@ 0x55c
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fed5 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001004:	f207 5374 	addw	r3, r7, #1396	@ 0x574
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fed0 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800100e:	f8d7 d020 	ldr.w	sp, [r7, #32]
 8001012:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8001016:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 800101a:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 800101e:	f2a2 627c 	subw	r2, r2, #1660	@ 0x67c
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 800102a:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	f207 67ac 	addw	r7, r7, #1708	@ 0x6ac
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800103a:	bf00      	nop

0800103c <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE>:

std::string HC05::getMACAddressByName(std::string search_device_name, const std::vector<Slave_info>&devices_vector)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
	// Search for search_device_name from all:
	for (const auto& device : devices_vector)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
 800104e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001050:	f000 fe74 	bl	8001d3c <_ZNKSt6vectorI10Slave_infoSaIS0_EE5beginEv>
 8001054:	4603      	mov	r3, r0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800105a:	f000 fe7f 	bl	8001d5c <_ZNKSt6vectorI10Slave_infoSaIS0_EE3endEv>
 800105e:	4603      	mov	r3, r0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e019      	b.n	8001098 <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE+0x5c>
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f000 feb1 	bl	8001dd0 <_ZNK9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEdeEv>
 800106e:	6238      	str	r0, [r7, #32]
	{
		if (device.slave_name == search_device_name) return device.slave_address;
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	3318      	adds	r3, #24
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 feb6 	bl	8001de8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE+0x52>
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	4619      	mov	r1, r3
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f005 f8d2 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	}

	return "Can't find MAC address...";
}
 800108c:	e020      	b.n	80010d0 <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE+0x94>
	for (const auto& device : devices_vector)
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fe8b 	bl	8001dae <_ZN9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEppEv>
 8001098:	f107 0214 	add.w	r2, r7, #20
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fe6b 	bl	8001d7e <_ZN9__gnu_cxxneIPK10Slave_infoSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1da      	bne.n	8001064 <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE+0x28>
	return "Can't find MAC address...";
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fd7e 	bl	8005bb4 <_ZNSaIcEC1Ev>
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	461a      	mov	r2, r3
 80010be:	4906      	ldr	r1, [pc, #24]	@ (80010d8 <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE+0x9c>)
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f005 f915 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fd74 	bl	8005bb8 <_ZNSaIcED1Ev>
}
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	3728      	adds	r7, #40	@ 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	0800678c 	.word	0x0800678c

080010dc <_ZN4HC0514getNameFromMACENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::string HC05::getNameFromMAC(std::string mac_addr)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b0b3      	sub	sp, #204	@ 0xcc
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	// Check device name:
	std::string cmd = "AT+RNAME?" + MacConversion(mac_addr);
 80010e8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 f89e 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80010f4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010f8:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fa78 	bl	80015f4 <_ZN4HC0513MacConversionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001104:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001108:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800110c:	4942      	ldr	r1, [pc, #264]	@ (8001218 <_ZN4HC0514getNameFromMACENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13c>)
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fe94 	bl	8001e3c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001114:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fe48 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800111e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fe43 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string answer = getAnswer(cmd, 5000);
 8001128:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800112c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f005 f87c 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001138:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800113c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001140:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	f000 fa79 	bl	800163c <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800114a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fe2d 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Separate an answer:
	std::string first_char = ":";
 8001154:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fd2b 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800115e:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8001162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001166:	492d      	ldr	r1, [pc, #180]	@ (800121c <_ZN4HC0514getNameFromMACENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x140>)
 8001168:	4618      	mov	r0, r3
 800116a:	f005 f8c1 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800116e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fd20 	bl	8005bb8 <_ZNSaIcED1Ev>
	std::string last_char = "\r\n";
 8001178:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fd19 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8001182:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4925      	ldr	r1, [pc, #148]	@ (8001220 <_ZN4HC0514getNameFromMACENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x144>)
 800118c:	4618      	mov	r0, r3
 800118e:	f005 f8af 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001192:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fd0e 	bl	8005bb8 <_ZNSaIcED1Ev>

	size_t pos_first = answer.find(first_char);
 800119c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80011a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011a4:	2200      	movs	r2, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fffe 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80011ac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	size_t pos_second = answer.find(last_char);
 80011b0:	f107 0110 	add.w	r1, r7, #16
 80011b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b8:	2200      	movs	r2, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fff4 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80011c0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

	std::string device_name = answer.substr(pos_first + 1, pos_second - (pos_first + 1));
 80011c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80011c8:	1c5c      	adds	r4, r3, #1
 80011ca:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80011ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	3b01      	subs	r3, #1
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80011dc:	4622      	mov	r2, r4
 80011de:	f005 f873 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

	return device_name;
 80011e2:	bf00      	nop
}
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fde0 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fddb 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fdd6 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001202:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fdd1 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return device_name;
 800120c:	bf00      	nop
}
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	37cc      	adds	r7, #204	@ 0xcc
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	bf00      	nop
 8001218:	080067a8 	.word	0x080067a8
 800121c:	080067b4 	.word	0x080067b4
 8001220:	08006744 	.word	0x08006744

08001224 <_ZN4HC0521connectDevicesViaNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh>:

	return substring;
}

std::string HC05::connectDevicesViaName(std::string slave_name, uint8_t devices_to_search, uint8_t connection_time_sec)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0b4      	sub	sp, #208	@ 0xd0
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	70fb      	strb	r3, [r7, #3]
	// Iquiring time recalculation because of longer timeout inside getBluetoothDevices():
	uint8_t inquiring_time_sec = connection_time_sec/2;
 8001232:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if (connection_time_sec < 8) inquiring_time_sec = 4;
 800123c:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8001240:	2b07      	cmp	r3, #7
 8001242:	d802      	bhi.n	800124a <_ZN4HC0521connectDevicesViaNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0x26>
 8001244:	2304      	movs	r3, #4
 8001246:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

	// Search for bluetooth devices and find that one with the same name:
	std::string slave_mac_addr = getMACAddressByName(slave_name, getBluetoothDevices(devices_to_search, inquiring_time_sec));
 800124a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f004 ffed 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001256:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800125a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	f7ff fad3 	bl	800080c <_ZN4HC0519getBluetoothDevicesEhh>
 8001266:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800126a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800126e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	f7ff fee2 	bl	800103c <_ZN4HC0519getMACAddressByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorI10Slave_infoSaIS7_EE>
 8001278:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fd01 	bl	8001c84 <_ZNSt6vectorI10Slave_infoSaIS0_EED1Ev>
 8001282:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fd91 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// Create command:
	std::string cmd = "AT+LINK=" + MacConversion(slave_mac_addr);
 800128c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001290:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f004 ffca 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800129c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80012a0:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f9a4 	bl	80015f4 <_ZN4HC0513MacConversionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80012ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b0:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80012b4:	4924      	ldr	r1, [pc, #144]	@ (8001348 <_ZN4HC0521connectDevicesViaNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0x124>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fdc0 	bl	8001e3c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80012bc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fd74 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012c6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fd6f 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Communication UART:
	std::string response = getAnswer(cmd, 3000);
 80012d0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80012d4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 ffa8 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80012e0:	f107 0014 	add.w	r0, r7, #20
 80012e4:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80012e8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	f000 f9a5 	bl	800163c <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80012f2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fd59 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// String clearing (unnecessary at this moment):
	size_t pos = response.find("\r\n");
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	4912      	ldr	r1, [pc, #72]	@ (800134c <_ZN4HC0521connectDevicesViaNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0x128>)
 8001304:	4618      	mov	r0, r3
 8001306:	f004 ff55 	bl	80061b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800130a:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
	std::string substring = response.substr(0, pos);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f107 0114 	add.w	r1, r7, #20
 8001314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001318:	2200      	movs	r2, #0
 800131a:	f004 ffd5 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

	return substring;
 800131e:	bf00      	nop
}
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4618      	mov	r0, r3
 8001326:	f004 fd42 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fd3d 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001334:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fd38 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return substring;
 800133e:	bf00      	nop
}
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	37d0      	adds	r7, #208	@ 0xd0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	080067b8 	.word	0x080067b8
 800134c:	08006744 	.word	0x08006744

08001350 <_ZN4HC0513initPinConfigEv>:

void HC05::initPinConfig(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	// Pin default configuration for AT Mode:
    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68d8      	ldr	r0, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	8a1b      	ldrh	r3, [r3, #16]
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	f002 f9da 	bl	800371c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001368:	2064      	movs	r0, #100	@ 0x64
 800136a:	f001 ff43 	bl	80031f4 <HAL_Delay>
	HAL_GPIO_WritePin(KEY_Port, KEY_Pin, GPIO_PIN_SET);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6858      	ldr	r0, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	891b      	ldrh	r3, [r3, #8]
 8001376:	2201      	movs	r2, #1
 8001378:	4619      	mov	r1, r3
 800137a:	f002 f9cf 	bl	800371c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800137e:	2064      	movs	r0, #100	@ 0x64
 8001380:	f001 ff38 	bl	80031f4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68d8      	ldr	r0, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8a1b      	ldrh	r3, [r3, #16]
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	f002 f9c4 	bl	800371c <HAL_GPIO_WritePin>

	// Calculate correct BRR value (OVER8 = 0):
	setATModeBaudRate(38400);
 8001394:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 fb1d 	bl	80019d8 <_ZN4HC0517setATModeBaudRateEt>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <_ZN4HC0517disconnectDevicesEv>:

void HC05::disconnectDevices(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	@ 0x40
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68d8      	ldr	r0, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8a1b      	ldrh	r3, [r3, #16]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	f002 f9ae 	bl	800371c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	@ 0x64
 80013c2:	f001 ff17 	bl	80031f4 <HAL_Delay>
	HAL_GPIO_WritePin(KEY_Port, KEY_Pin, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6858      	ldr	r0, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 f9a3 	bl	800371c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	@ 0x64
 80013d8:	f001 ff0c 	bl	80031f4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68d8      	ldr	r0, [r3, #12]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	8a1b      	ldrh	r3, [r3, #16]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 f998 	bl	800371c <HAL_GPIO_WritePin>

	std::string response = getAnswer("AT+DISC", 1000);
 80013ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 fbdf 	bl	8005bb4 <_ZNSaIcEC1Ev>
 80013f6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80013fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fe:	490f      	ldr	r1, [pc, #60]	@ (800143c <_ZN4HC0517disconnectDevicesEv+0x94>)
 8001400:	4618      	mov	r0, r3
 8001402:	f004 ff75 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001406:	f107 000c 	add.w	r0, r7, #12
 800140a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f000 f912 	bl	800163c <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8001418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fcc6 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001422:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fbc6 	bl	8005bb8 <_ZNSaIcED1Ev>
//	return cmdWrite("AT+DISC");
}
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fcbc 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001436:	3740      	adds	r7, #64	@ 0x40
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	080067c4 	.word	0x080067c4

08001440 <_ZN4HC0511findMACaddrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::string HC05::findMACaddr(const std::string data)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	@ 0x50
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	// Find MAC address from data response:
	std::string first_char = ":";
 800144c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fbaf 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8001456:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4923      	ldr	r1, [pc, #140]	@ (80014ec <_ZN4HC0511findMACaddrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac>)
 8001460:	4618      	mov	r0, r3
 8001462:	f004 ff45 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001466:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fba4 	bl	8005bb8 <_ZNSaIcED1Ev>
	std::string second_char = ",";
 8001470:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001474:	4618      	mov	r0, r3
 8001476:	f004 fb9d 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800147a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	491b      	ldr	r1, [pc, #108]	@ (80014f0 <_ZN4HC0511findMACaddrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>)
 8001484:	4618      	mov	r0, r3
 8001486:	f004 ff33 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800148a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fb92 	bl	8005bb8 <_ZNSaIcED1Ev>

	size_t pos_first = data.find(first_char);
 8001494:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f004 fe83 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80014a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
	size_t pos_second = data.find(second_char);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f004 fe7b 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80014b2:	64b8      	str	r0, [r7, #72]	@ 0x48
	std::string addr = data.substr(pos_first + 1, pos_second - (pos_first + 1));
 80014b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	460a      	mov	r2, r1
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	f004 feff 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

	return addr;
 80014ca:	bf00      	nop
}
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fc6c 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80014d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fc67 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return addr;
 80014e0:	bf00      	nop
}
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080067b4 	.word	0x080067b4
 80014f0:	08006704 	.word	0x08006704

080014f4 <_ZN4HC0511findDevTypeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::string HC05::findDevType(const std::string data)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	@ 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	// Find device type from data response:
	std::string comma = ",";
 8001500:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fb55 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800150a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4918      	ldr	r1, [pc, #96]	@ (8001574 <_ZN4HC0511findDevTypeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>)
 8001514:	4618      	mov	r0, r3
 8001516:	f004 feeb 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800151a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fb4a 	bl	8005bb8 <_ZNSaIcED1Ev>

	size_t pos_first = data.find(comma);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f004 fe3b 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001532:	6378      	str	r0, [r7, #52]	@ 0x34
	size_t pos_second = data.find(comma, pos_first + 1);
 8001534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f004 fe32 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001544:	6338      	str	r0, [r7, #48]	@ 0x30
	std::string type = data.substr(pos_first + 1, pos_second - (pos_first + 1));
 8001546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001548:	1c59      	adds	r1, r3, #1
 800154a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800154c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	460a      	mov	r2, r1
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f004 feb6 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

	return type;
 800155c:	bf00      	nop
}
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4618      	mov	r0, r3
 8001564:	f004 fc23 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return type;
 8001568:	bf00      	nop
}
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	3738      	adds	r7, #56	@ 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08006704 	.word	0x08006704

08001578 <_ZN4HC0511findDevRssiENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::string HC05::findDevRssi(const std::string data)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	@ 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	// Find RSSI from data response:
	std::string comma = ",";
 8001584:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fb13 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800158e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4916      	ldr	r1, [pc, #88]	@ (80015f0 <_ZN4HC0511findDevRssiENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fea9 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800159e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fb08 	bl	8005bb8 <_ZNSaIcED1Ev>

	size_t pos_first = data.find(comma);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f004 fdf9 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80015b6:	6378      	str	r0, [r7, #52]	@ 0x34
	size_t pos_second = data.find(comma, pos_first + 1);
 80015b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f004 fdf0 	bl	80061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80015c8:	6338      	str	r0, [r7, #48]	@ 0x30

	std::string type = data.substr(pos_second + 1);
 80015ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f004 fe77 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
	//uint32_t type = std::stoul(type_str);

	return type;
 80015da:	bf00      	nop
}
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fbe4 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return type;
 80015e6:	bf00      	nop
}
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	3738      	adds	r7, #56	@ 0x38
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08006704 	.word	0x08006704

080015f4 <_ZN4HC0513MacConversionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::string HC05::MacConversion(std::string mac_addr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	// Change characters ":" -> ",":
	while(1)
	{
		uint32_t pos = mac_addr.find(":");
 8001600:	2200      	movs	r2, #0
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <_ZN4HC0513MacConversionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f004 fdd5 	bl	80061b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800160a:	6178      	str	r0, [r7, #20]
		if (pos == std::string::npos) break;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	d007      	beq.n	8001624 <_ZN4HC0513MacConversionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
		mac_addr.at(pos) = ',';
 8001614:	6979      	ldr	r1, [r7, #20]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f004 fc90 	bl	8005f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>
 800161c:	4603      	mov	r3, r0
 800161e:	222c      	movs	r2, #44	@ 0x2c
 8001620:	701a      	strb	r2, [r3, #0]
	}
 8001622:	e7ed      	b.n	8001600 <_ZN4HC0513MacConversionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc>
		if (pos == std::string::npos) break;
 8001624:	bf00      	nop

	return mac_addr;
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f004 fba1 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
}
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	080067b4 	.word	0x080067b4

0800163c <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

std::string HC05::getAnswer(std::string cmd, uint16_t timeout)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8001642:	af00      	add	r7, sp, #0
 8001644:	f507 7424 	add.w	r4, r7, #656	@ 0x290
 8001648:	f5a4 7421 	sub.w	r4, r4, #644	@ 0x284
 800164c:	6020      	str	r0, [r4, #0]
 800164e:	f507 7024 	add.w	r0, r7, #656	@ 0x290
 8001652:	f5a0 7022 	sub.w	r0, r0, #648	@ 0x288
 8001656:	6001      	str	r1, [r0, #0]
 8001658:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800165c:	f5a1 7123 	sub.w	r1, r1, #652	@ 0x28c
 8001660:	600a      	str	r2, [r1, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001668:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 800166c:	801a      	strh	r2, [r3, #0]
	// Set AT mode BRR register value:
	setATModeBaudRate(38400);
 800166e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001672:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001676:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	f000 f9ac 	bl	80019d8 <_ZN4HC0517setATModeBaudRateEt>

	// Fill buffer with '#'
	char response[500] = {0};
 8001680:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001684:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	3304      	adds	r3, #4
 800168e:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f004 ff3d 	bl	8006514 <memset>

	std::string full_command = cmd + "\r\n";
 800169a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800169e:	f5a3 700e 	sub.w	r0, r3, #568	@ 0x238
 80016a2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80016a6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80016aa:	4a73      	ldr	r2, [pc, #460]	@ (8001878 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x23c>)
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	f000 fbdd 	bl	8001e6c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>

	// UART communication:
	HAL_StatusTypeDef transmit = HAL_UART_Transmit(huart, (uint8_t*)full_command.c_str(), full_command.length(), 1000);
 80016b2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80016b6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681c      	ldr	r4, [r3, #0]
 80016be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fd3a 	bl	800613c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80016c8:	4605      	mov	r5, r0
 80016ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fba3 	bl	8005e1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016dc:	4629      	mov	r1, r5
 80016de:	4620      	mov	r0, r4
 80016e0:	f003 fd14 	bl	800510c <HAL_UART_Transmit>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
	HAL_StatusTypeDef receive = HAL_UART_Receive(huart, (uint8_t*)response, sizeof(response) - 1, timeout);
 80016ea:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80016ee:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80016fa:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001704:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001708:	f003 fd89 	bl	800521e <HAL_UART_Receive>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e

	// Check communication and handle errors:
	std::string uart_transmit_error = "UART Transmit error (HAL_ERROR/HAL_BUSY)";
 8001712:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fa4c 	bl	8005bb4 <_ZNSaIcEC1Ev>
 800171c:	f507 7219 	add.w	r2, r7, #612	@ 0x264
 8001720:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001724:	4955      	ldr	r1, [pc, #340]	@ (800187c <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x240>)
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fde2 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800172c:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8001730:	4618      	mov	r0, r3
 8001732:	f004 fa41 	bl	8005bb8 <_ZNSaIcED1Ev>
	std::string uart_receive_error = "UART Receive error (HAL_ERROR/HAL_BUSY)";
 8001736:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fa3a 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8001740:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8001744:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001748:	494d      	ldr	r1, [pc, #308]	@ (8001880 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x244>)
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fdd0 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001750:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fa2f 	bl	8005bb8 <_ZNSaIcED1Ev>

	if (transmit == HAL_ERROR || transmit == HAL_BUSY) return uart_transmit_error;
 800175a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800175e:	2b01      	cmp	r3, #1
 8001760:	d003      	beq.n	800176a <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x12e>
 8001762:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001766:	2b02      	cmp	r3, #2
 8001768:	d10a      	bne.n	8001780 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x144>
 800176a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800176e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001772:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001776:	4611      	mov	r1, r2
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f004 faf9 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800177e:	e058      	b.n	8001832 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x1f6>
	if (receive == HAL_ERROR || receive == HAL_BUSY) return uart_receive_error;
 8001780:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8001784:	2b01      	cmp	r3, #1
 8001786:	d003      	beq.n	8001790 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x154>
 8001788:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 800178c:	2b02      	cmp	r3, #2
 800178e:	d10a      	bne.n	80017a6 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x16a>
 8001790:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001794:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001798:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800179c:	4611      	mov	r1, r2
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f004 fae6 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80017a4:	e045      	b.n	8001832 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x1f6>

	// Remove unnecessary characters:
	std::string response_str(response);
 80017a6:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fa02 	bl	8005bb4 <_ZNSaIcEC1Ev>
 80017b0:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 80017b4:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 fd97 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017c2:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 f9f6 	bl	8005bb8 <_ZNSaIcED1Ev>

    size_t pos = response_str.find('\0');
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fcfb 	bl	80061d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80017da:	f8c7 0288 	str.w	r0, [r7, #648]	@ 0x288
    if (pos != std::string::npos)
 80017de:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 80017e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e6:	d015      	beq.n	8001814 <_ZN4HC059getAnswerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x1d8>
    {
        response_str = response_str.substr(0, pos);
 80017e8:	f507 701c 	add.w	r0, r7, #624	@ 0x270
 80017ec:	f107 0110 	add.w	r1, r7, #16
 80017f0:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 80017f4:	2200      	movs	r2, #0
 80017f6:	f004 fd67 	bl	80062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80017fa:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f004 fad8 	bl	8005dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800180a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800180e:	4618      	mov	r0, r3
 8001810:	f004 facd 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }

    return response_str;
 8001814:	f107 0210 	add.w	r2, r7, #16
 8001818:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800181c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001820:	4611      	mov	r1, r2
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	f004 faa4 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
}
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fabe 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fab9 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800183c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fab4 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001846:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800184a:	4618      	mov	r0, r3
 800184c:	f004 faaf 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001850:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001854:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001858:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 800185c:	f5a2 7221 	sub.w	r2, r2, #644	@ 0x284
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8001868:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f507 7724 	add.w	r7, r7, #656	@ 0x290
 8001872:	46bd      	mov	sp, r7
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	bf00      	nop
 8001878:	08006744 	.word	0x08006744
 800187c:	080067cc 	.word	0x080067cc
 8001880:	080067f8 	.word	0x080067f8

08001884 <_ZN4HC0515checkIsAnswerOKERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool HC05::checkIsAnswerOK(const std::string& response)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	// Return false if communication failed:
	return response.find("OK")!= std::string::npos;
 800188e:	2200      	movs	r2, #0
 8001890:	4907      	ldr	r1, [pc, #28]	@ (80018b0 <_ZN4HC0515checkIsAnswerOKERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>)
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f004 fc8e 	bl	80061b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8001898:	4603      	mov	r3, r0
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	08006788 	.word	0x08006788

080018b4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool HC05::cmdWrite(std::string cmd)
{
 80018b4:	b5b0      	push	{r4, r5, r7, lr}
 80018b6:	b0b0      	sub	sp, #192	@ 0xc0
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	// Set AT mode BRR register value:
	setATModeBaudRate(38400);
 80018be:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f888 	bl	80019d8 <_ZN4HC0517setATModeBaudRateEt>

	// String convert to "+CR +LF" format
	std::string command = cmd;
 80018c8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fcae 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	std::string full_command = command + "\r\n";
 80018d4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80018d8:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80018dc:	4a3d      	ldr	r2, [pc, #244]	@ (80019d4 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fac4 	bl	8001e6c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>

	// UART Communication:
	char response[100] = {0};
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ec:	2260      	movs	r2, #96	@ 0x60
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 fe0f 	bl	8006514 <memset>
	uint16_t timeout = 500;
 80018f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	HAL_StatusTypeDef transmit = HAL_UART_Transmit(huart, (uint8_t*)full_command.c_str(), full_command.length(), timeout);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681c      	ldr	r4, [r3, #0]
 8001902:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fc18 	bl	800613c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800190c:	4605      	mov	r5, r0
 800190e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fa81 	bl	8005e1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001920:	4629      	mov	r1, r5
 8001922:	4620      	mov	r0, r4
 8001924:	f003 fbf2 	bl	800510c <HAL_UART_Transmit>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
	HAL_StatusTypeDef receive = HAL_UART_Receive(huart, (uint8_t*)response, sizeof(response) - 1, timeout);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001936:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800193a:	2263      	movs	r2, #99	@ 0x63
 800193c:	f003 fc6f 	bl	800521e <HAL_UART_Receive>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc

	// Response string declarations:
	std::string response_str(response);
 8001946:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800194a:	4618      	mov	r0, r3
 800194c:	f004 f932 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8001950:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8001954:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fcc7 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001962:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001966:	4618      	mov	r0, r3
 8001968:	f004 f926 	bl	8005bb8 <_ZNSaIcED1Ev>

	// Check communication and handle errors:
	if (transmit == HAL_ERROR || transmit == HAL_BUSY) return false;
 800196c:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001970:	2b01      	cmp	r3, #1
 8001972:	d003      	beq.n	800197c <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>
 8001974:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001978:	2b02      	cmp	r3, #2
 800197a:	d101      	bne.n	8001980 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>
 800197c:	2400      	movs	r4, #0
 800197e:	e014      	b.n	80019aa <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf6>
	if (receive == HAL_ERROR || receive == HAL_BUSY) return false;
 8001980:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001984:	2b01      	cmp	r3, #1
 8001986:	d003      	beq.n	8001990 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
 8001988:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800198c:	2b02      	cmp	r3, #2
 800198e:	d101      	bne.n	8001994 <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 8001990:	2400      	movs	r4, #0
 8001992:	e00a      	b.n	80019aa <_ZN4HC058cmdWriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf6>

	bool checker = HC05::checkIsAnswerOK(response_str);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ff72 	bl	8001884 <_ZN4HC0515checkIsAnswerOKERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb

	return checker;
 80019a6:	f897 40bb 	ldrb.w	r4, [r7, #187]	@ 0xbb
}
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 f9fd 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019b4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 f9f8 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019be:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 f9f3 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019c8:	4623      	mov	r3, r4
 80019ca:	4618      	mov	r0, r3
 80019cc:	37c0      	adds	r7, #192	@ 0xc0
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdb0      	pop	{r4, r5, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08006744 	.word	0x08006744

080019d8 <_ZN4HC0517setATModeBaudRateEt>:

void HC05::setATModeBaudRate(uint16_t baudRate)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
	// Calculate and Set AT mode BRR value (OVER8 = 0):
	uint32_t target_baudrate = baudRate;
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	617b      	str	r3, [r7, #20]
	uint32_t uart_clk = HAL_RCC_GetPCLK1Freq();
 80019e8:	f003 f8e0 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80019ec:	6138      	str	r0, [r7, #16]
	uint32_t brr = uart_clk/target_baudrate;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
	huart->Instance->BRR = brr;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	60da      	str	r2, [r3, #12]
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8001a0a:	b480      	push	{r7}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	fb03 f303 	mul.w	r3, r3, r3
 8001a1e:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d201      	bcs.n	8001a40 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	e01d      	b.n	8001a7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d202      	bcs.n	8001a4e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	e016      	b.n	8001a7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d202      	bcs.n	8001a5c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	e00f      	b.n	8001a7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d202      	bcs.n	8001a6a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3303      	adds	r3, #3
 8001a68:	e008      	b.n	8001a7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3304      	adds	r3, #4
 8001a78:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8001a7a:	e7db      	b.n	8001a34 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001a9a:	e024      	b.n	8001ae6 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	2164      	movs	r1, #100	@ 0x64
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	440b      	add	r3, r1
 8001ac8:	4919      	ldr	r1, [pc, #100]	@ (8001b30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001aca:	5c8a      	ldrb	r2, [r1, r2]
 8001acc:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4916      	ldr	r1, [pc, #88]	@ (8001b30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	440a      	add	r2, r1
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3b02      	subs	r3, #2
 8001ae4:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b63      	cmp	r3, #99	@ 0x63
 8001aea:	d8d7      	bhi.n	8001a9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b09      	cmp	r3, #9
 8001af0:	d910      	bls.n	8001b14 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	490b      	ldr	r1, [pc, #44]	@ (8001b30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001b02:	5c8a      	ldrb	r2, [r1, r2]
 8001b04:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8001b12:	e005      	b.n	8001b20 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3330      	adds	r3, #48	@ 0x30
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	701a      	strb	r2, [r3, #0]
    }
 8001b20:	bf00      	nop
 8001b22:	3724      	adds	r7, #36	@ 0x24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	51eb851f 	.word	0x51eb851f
 8001b30:	0800689c 	.word	0x0800689c

08001b34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
#endif

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 8001b40:	68b8      	ldr	r0, [r7, #8]
 8001b42:	f7fe fc57 	bl	80003f4 <_ZNSt11char_traitsIcE6lengthEPKc>
 8001b46:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 faf8 	bl	8006144 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	f107 0218 	add.w	r2, r7, #24
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f997 	bl	8001e92 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f004 f8f0 	bl	8005d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 f81f 	bl	8005bb8 <_ZNSaIcED1Ev>
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 f81a 	bl	8005bb8 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f004 f946 	bl	8005e16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f004 f9af 	bl	8005ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f004 faa1 	bl	80060e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f004 faad 	bl	8006104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8001baa:	bf00      	nop
    }
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	68b8      	ldr	r0, [r7, #8]
 8001bc4:	f004 faa4 	bl	8006110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f96f 	bl	8001eae <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f004 f8cb 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f004 fa87 	bl	8006104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f958 	bl	8001eae <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4619      	mov	r1, r3
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f004 f8b4 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f953 	bl	8001ec4 <_ZNSaI10Slave_infoEC1Ev>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f95b 	bl	8001edc <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZNSaI10Slave_infoED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f963 	bl	8001f04 <_ZNSt15__new_allocatorI10Slave_infoED1Ev>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	115b      	asrs	r3, r3, #5
 8001c60:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EED1Ev+0x38>)
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001c66:	461a      	mov	r2, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f956 	bl	8001f1a <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fd4d 	bl	8000710 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE12_Vector_implD1Ev>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	aaaaaaab 	.word	0xaaaaaaab

08001c84 <_ZNSt6vectorI10Slave_infoSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681c      	ldr	r4, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f952 	bl	8001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c9c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 f957 	bl	8001f56 <_ZSt8_DestroyIP10Slave_infoS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffcc 	bl	8001c48 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EED1Ev>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bdb0      	pop	{r4, r5, r7, pc}

08001cba <_ZNSt6vectorI10Slave_infoSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d00d      	beq.n	8001cec <_ZNSt6vectorI10Slave_infoSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f000 f94a 	bl	8001f72 <_ZNSt16allocator_traitsISaI10Slave_infoEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001cea:	e008      	b.n	8001cfe <_ZNSt6vectorI10Slave_infoSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f953 	bl	8001f98 <_ZNSt6vectorI10Slave_infoSaIS0_EE3endEv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f975 	bl	8001fe8 <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE12_Vector_implC1EOS3_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f000 fa31 	bl	8002178 <_ZSt4moveIRNSt12_Vector_baseI10Slave_infoSaIS1_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fa37 	bl	800218e <_ZNSaI10Slave_infoEC1ERKS0_>
 8001d20:	687c      	ldr	r4, [r7, #4]
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f000 fa28 	bl	8002178 <_ZSt4moveIRNSt12_Vector_baseI10Slave_infoSaIS1_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f000 fa3c 	bl	80021aa <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE17_Vector_impl_dataC1EOS3_>
	{ }
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}

08001d3c <_ZNKSt6vectorI10Slave_infoSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fa4f 	bl	80021f0 <_ZN9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZNKSt6vectorI10Slave_infoSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fa3e 	bl	80021f0 <_ZN9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZN9__gnu_cxxneIPK10Slave_infoSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001d7e:	b590      	push	{r4, r7, lr}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fa41 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	681c      	ldr	r4, [r3, #0]
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f000 fa3c 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}

08001dae <_ZN9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	601a      	str	r2, [r3, #0]
	return *this;
 8001dc2:	687b      	ldr	r3, [r7, #4]
      }
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_ZNK9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    operator==(const basic_string<_CharT>& __lhs,
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
    { return (__lhs.size() == __rhs.size()
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f004 f80f 	bl	8005e16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f004 f80b 	bl	8005e16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001e00:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8001e02:	429c      	cmp	r4, r3
 8001e04:	d115      	bne.n	8001e32 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f004 f99a 	bl	8006140 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f004 f996 	bl	8006140 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8001e14:	4605      	mov	r5, r0
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f003 fffd 	bl	8005e16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4629      	mov	r1, r5
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7fe fad0 	bl	80003c8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 8001e32:	2300      	movs	r3, #0
						    __lhs.size())); }
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}

08001e3c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f004 f915 	bl	800607c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f82a 	bl	8001eae <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f003 ff86 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f004 f9d8 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f004 f944 	bl	8006110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8001e88:	bf00      	nop
    }
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f9c0 	bl	8002226 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_ZNSaI10Slave_infoEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f9b7 	bl	8002240 <_ZNSt15__new_allocatorI10Slave_infoEC1Ev>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
	{ }
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_ZNSt15__new_allocatorI10Slave_infoED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	if (__p)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f98f 	bl	8002256 <_ZNSt16allocator_traitsISaI10Slave_infoEE10deallocateERS1_PS0_j>
      }
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <_ZSt8_DestroyIP10Slave_infoS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f985 	bl	8002274 <_ZSt8_DestroyIP10Slave_infoEvT_S2_>
    }
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZNSt16allocator_traitsISaI10Slave_infoEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f985 	bl	800228e <_ZSt7forwardIRK10Slave_infoEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f9b5 	bl	80022fa <_ZNSt15__new_allocatorI10Slave_infoE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZNSt6vectorI10Slave_infoSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1d1a      	adds	r2, r3, #4
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9bd 	bl	800232a <_ZN9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_ZNSt6vectorI10Slave_infoSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f805 	bl	8001fd0 <_ZNSt6vectorI10Slave_infoSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001fc6:	4603      	mov	r3, r0
      }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZNSt6vectorI10Slave_infoSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001fd8:	2301      	movs	r3, #1
      }
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b08c      	sub	sp, #48	@ 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8002170 <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f9a6 	bl	800234a <_ZNKSt6vectorI10Slave_infoSaIS0_EE12_M_check_lenEjPKc>
 8001ffe:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f9e3 	bl	80023d8 <_ZNSt6vectorI10Slave_infoSaIS0_EE5beginEv>
 8002012:	4603      	mov	r3, r0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	f107 0214 	add.w	r2, r7, #20
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f9e9 	bl	80023f8 <_ZN9__gnu_cxxmiIP10Slave_infoSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8002026:	4603      	mov	r3, r0
 8002028:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9fc 	bl	800242c <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE11_M_allocateEj>
 8002034:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800203a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	015b      	lsls	r3, r3, #5
 8002046:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	189d      	adds	r5, r3, r2
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f91e 	bl	800228e <_ZSt7forwardIRK10Slave_infoEOT_RNSt16remove_referenceIS3_E4typeE>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4629      	mov	r1, r5
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff ff8a 	bl	8001f72 <_ZNSt16allocator_traitsISaI10Slave_infoEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002062:	f7ff ffaa 	bl	8001fba <_ZNSt6vectorI10Slave_infoSaIS0_EE15_S_use_relocateEv>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d027      	beq.n	80020bc <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fa03 	bl	800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 8002076:	4603      	mov	r3, r0
 8002078:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5f 	bl	8001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 8002082:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4621      	mov	r1, r4
 8002088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800208a:	f000 f9e3 	bl	8002454 <_ZNSt6vectorI10Slave_infoSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800208e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8002090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002092:	3360      	adds	r3, #96	@ 0x60
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f9ee 	bl	800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 80020a0:	4603      	mov	r3, r0
 80020a2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff4a 	bl	8001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 80020ac:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80020ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	4620      	mov	r0, r4
 80020b4:	f000 f9ce 	bl	8002454 <_ZNSt6vectorI10Slave_infoSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80020b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ba:	e026      	b.n	800210a <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f9db 	bl	800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 80020c6:	4603      	mov	r3, r0
 80020c8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff37 	bl	8001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 80020d2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4621      	mov	r1, r4
 80020d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020da:	f000 f9da 	bl	8002492 <_ZSt34__uninitialized_move_if_noexcept_aIP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>
 80020de:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e2:	3360      	adds	r3, #96	@ 0x60
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f9c6 	bl	800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff22 	bl	8001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 80020fc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80020fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002100:	6a39      	ldr	r1, [r7, #32]
 8002102:	4620      	mov	r0, r4
 8002104:	f000 f9c5 	bl	8002492 <_ZSt34__uninitialized_move_if_noexcept_aIP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002108:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800210a:	f7ff ff56 	bl	8001fba <_ZNSt6vectorI10Slave_infoSaIS0_EE15_S_use_relocateEv>
 800210e:	4603      	mov	r3, r0
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff0f 	bl	8001f40 <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	6a39      	ldr	r1, [r7, #32]
 8002128:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800212a:	f7ff ff14 	bl	8001f56 <_ZSt8_DestroyIP10Slave_infoS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800212e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	115b      	asrs	r3, r3, #5
 800213a:	4a0e      	ldr	r2, [pc, #56]	@ (8002174 <_ZNSt6vectorI10Slave_infoSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 800213c:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8002140:	461a      	mov	r2, r3
 8002142:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002144:	f7ff fee9 	bl	8001f1a <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002152:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	015b      	lsls	r3, r3, #5
 800215e:	461a      	mov	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	441a      	add	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	609a      	str	r2, [r3, #8]
    }
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	@ 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	08006820 	.word	0x08006820
 8002174:	aaaaaaab 	.word	0xaaaaaaab

08002178 <_ZSt4moveIRNSt12_Vector_baseI10Slave_infoSaIS1_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_ZNSaI10Slave_infoEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f99f 	bl	80024de <_ZNSt15__new_allocatorI10Slave_infoEC1ERKS1_>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE17_Vector_impl_dataC1EOS3_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_ZN9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPK10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f003 fcbf 	bl	8005bb6 <_ZNSaIcEC1ERKS_>
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZNSt15__new_allocatorI10Slave_infoEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_ZNSt16allocator_traitsISaI10Slave_infoEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f945 	bl	80024f6 <_ZNSt15__new_allocatorI10Slave_infoE10deallocateEPS0_j>
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZSt8_DestroyIP10Slave_infoEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f94b 	bl	800251c <_ZNSt12_Destroy_auxILb0EE9__destroyIP10Slave_infoEEvT_S4_>
    }
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_ZSt7forwardIRK10Slave_infoEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_ZN10Slave_infoC1ERKS_>:
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 ffbb 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f103 0218 	add.w	r2, r3, #24
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	3318      	adds	r3, #24
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f003 ffb2 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	3330      	adds	r3, #48	@ 0x30
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f003 ffa9 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3348      	adds	r3, #72	@ 0x48
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f003 ffa0 	bl	8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_ZNSt15__new_allocatorI10Slave_infoE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4619      	mov	r1, r3
 800230a:	2060      	movs	r0, #96	@ 0x60
 800230c:	f7fe f87e 	bl	800040c <_ZnwjPv>
 8002310:	4604      	mov	r4, r0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffbb 	bl	800228e <_ZSt7forwardIRK10Slave_infoEOT_RNSt16remove_referenceIS3_E4typeE>
 8002318:	4603      	mov	r3, r0
 800231a:	4619      	mov	r1, r3
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff ffc1 	bl	80022a4 <_ZN10Slave_infoC1ERKS_>
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <_ZN9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZNKSt6vectorI10Slave_infoSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800234a:	b590      	push	{r4, r7, lr}
 800234c:	b087      	sub	sp, #28
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f8f9 	bl	800254e <_ZNKSt6vectorI10Slave_infoSaIS0_EE8max_sizeEv>
 800235c:	4604      	mov	r4, r0
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f906 	bl	8002570 <_ZNKSt6vectorI10Slave_infoSaIS0_EE4sizeEv>
 8002364:	4603      	mov	r3, r0
 8002366:	1ae2      	subs	r2, r4, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	bf34      	ite	cc
 800236e:	2301      	movcc	r3, #1
 8002370:	2300      	movcs	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <_ZNKSt6vectorI10Slave_infoSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f003 fc27 	bl	8005bcc <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8f6 	bl	8002570 <_ZNKSt6vectorI10Slave_infoSaIS0_EE4sizeEv>
 8002384:	4604      	mov	r4, r0
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f8f2 	bl	8002570 <_ZNKSt6vectorI10Slave_infoSaIS0_EE4sizeEv>
 800238c:	4603      	mov	r3, r0
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	f107 0208 	add.w	r2, r7, #8
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f8fe 	bl	800259c <_ZSt3maxIjERKT_S2_S2_>
 80023a0:	4603      	mov	r3, r0
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4423      	add	r3, r4
 80023a6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f8e1 	bl	8002570 <_ZNKSt6vectorI10Slave_infoSaIS0_EE4sizeEv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d306      	bcc.n	80023c4 <_ZNKSt6vectorI10Slave_infoSaIS0_EE12_M_check_lenEjPKc+0x7a>
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8c9 	bl	800254e <_ZNKSt6vectorI10Slave_infoSaIS0_EE8max_sizeEv>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d904      	bls.n	80023ce <_ZNKSt6vectorI10Slave_infoSaIS0_EE12_M_check_lenEjPKc+0x84>
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f8c2 	bl	800254e <_ZNKSt6vectorI10Slave_infoSaIS0_EE8max_sizeEv>
 80023ca:	4603      	mov	r3, r0
 80023cc:	e000      	b.n	80023d0 <_ZNKSt6vectorI10Slave_infoSaIS0_EE12_M_check_lenEjPKc+0x86>
 80023ce:	697b      	ldr	r3, [r7, #20]
      }
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}

080023d8 <_ZNSt6vectorI10Slave_infoSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff9e 	bl	800232a <_ZN9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN9__gnu_cxxmiIP10Slave_infoSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f83a 	bl	800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 8002408:	4603      	mov	r3, r0
 800240a:	681c      	ldr	r4, [r3, #0]
 800240c:	6838      	ldr	r0, [r7, #0]
 800240e:	f000 f835 	bl	800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>
 8002412:	4603      	mov	r3, r0
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1ae3      	subs	r3, r4, r3
 8002418:	115b      	asrs	r3, r3, #5
 800241a:	4a03      	ldr	r2, [pc, #12]	@ (8002428 <_ZN9__gnu_cxxmiIP10Slave_infoSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}
 8002428:	aaaaaaab 	.word	0xaaaaaaab

0800242c <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE11_M_allocateEj+0x1e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f8bf 	bl	80025c4 <_ZNSt16allocator_traitsISaI10Slave_infoEE8allocateERS1_j>
 8002446:	4603      	mov	r3, r0
 8002448:	e000      	b.n	800244c <_ZNSt12_Vector_baseI10Slave_infoSaIS0_EE11_M_allocateEj+0x20>
 800244a:	2300      	movs	r3, #0
      }
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZNSt6vectorI10Slave_infoSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002462:	f88d 4000 	strb.w	r4, [sp]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f8b8 	bl	80025e2 <_ZNSt6vectorI10Slave_infoSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8002472:	4603      	mov	r3, r0
      }
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}

0800247c <_ZNK9__gnu_cxx17__normal_iteratorIP10Slave_infoSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_ZSt34__uninitialized_move_if_noexcept_aIP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f8b0 	bl	8002606 <_ZSt32__make_move_if_noexcept_iteratorI10Slave_infoSt13move_iteratorIPS0_EET0_PT_>
 80024a6:	4604      	mov	r4, r0
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f000 f8ac 	bl	8002606 <_ZSt32__make_move_if_noexcept_iteratorI10Slave_infoSt13move_iteratorIPS0_EET0_PT_>
 80024ae:	4601      	mov	r1, r0
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	4620      	mov	r0, r4
 80024b6:	f000 f8b5 	bl	8002624 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10Slave_infoES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80024ba:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <_ZNSt16allocator_traitsISaI10Slave_infoEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80024ce:	6839      	ldr	r1, [r7, #0]
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f8b8 	bl	8002646 <_ZNSt15__new_allocatorI10Slave_infoE7destroyIS0_EEvPT_>
	}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZNSt15__new_allocatorI10Slave_infoEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <_ZNSt15__new_allocatorI10Slave_infoE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	4619      	mov	r1, r3
 800250e:	68b8      	ldr	r0, [r7, #8]
 8002510:	f003 fb3d 	bl	8005b8e <_ZdlPvj>
      }
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZNSt12_Destroy_auxILb0EE9__destroyIP10Slave_infoEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002526:	e009      	b.n	800253c <_ZNSt12_Destroy_auxILb0EE9__destroyIP10Slave_infoEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f898 	bl	800265e <_ZSt11__addressofI10Slave_infoEPT_RS1_>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f89f 	bl	8002674 <_ZSt8_DestroyI10Slave_infoEvPT_>
	  for (; __first != __last; ++__first)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3360      	adds	r3, #96	@ 0x60
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d1f1      	bne.n	8002528 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10Slave_infoEEvT_S4_+0xc>
	}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_ZNKSt6vectorI10Slave_infoSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f8b3 	bl	80026c4 <_ZNKSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f893 	bl	800268c <_ZNSt6vectorI10Slave_infoSaIS0_EE11_S_max_sizeERKS1_>
 8002566:	4603      	mov	r3, r0
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZNKSt6vectorI10Slave_infoSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	115b      	asrs	r3, r3, #5
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <_ZNKSt6vectorI10Slave_infoSaIS0_EE4sizeEv+0x28>)
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	aaaaaaab 	.word	0xaaaaaaab

0800259c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d201      	bcs.n	80025b6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	e000      	b.n	80025b8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80025b6:	687b      	ldr	r3, [r7, #4]
    }
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_ZNSt16allocator_traitsISaI10Slave_infoEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80025ce:	2200      	movs	r2, #0
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f882 	bl	80026dc <_ZNSt15__new_allocatorI10Slave_infoE8allocateEjPKv>
 80025d8:	4603      	mov	r3, r0
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_ZNSt6vectorI10Slave_infoSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f89e 	bl	8002738 <_ZSt12__relocate_aIP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>
 80025fc:	4603      	mov	r3, r0
      }
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_ZSt32__make_move_if_noexcept_iteratorI10Slave_infoSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f8ac 	bl	8002772 <_ZNSt13move_iteratorIP10Slave_infoEC1ES1_>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10Slave_infoES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8ad 	bl	8002796 <_ZSt18uninitialized_copyISt13move_iteratorIP10Slave_infoES2_ET0_T_S5_S4_>
 800263c:	4603      	mov	r3, r0
    }
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_ZNSt15__new_allocatorI10Slave_infoE7destroyIS0_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f7fe f89f 	bl	8000794 <_ZN10Slave_infoD1Ev>
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZSt11__addressofI10Slave_infoEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_ZSt8_DestroyI10Slave_infoEvPT_>:
    _Destroy(_Tp* __pointer)
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7fe f889 	bl	8000794 <_ZN10Slave_infoD1Ev>
    }
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <_ZNSt6vectorI10Slave_infoSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <_ZNSt6vectorI10Slave_infoSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8002696:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f890 	bl	80027be <_ZNSt16allocator_traitsISaI10Slave_infoEE8max_sizeERKS1_>
 800269e:	4603      	mov	r3, r0
 80026a0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80026a2:	f107 0208 	add.w	r2, r7, #8
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f892 	bl	80027d6 <_ZSt3minIjERKT_S2_S2_>
 80026b2:	4603      	mov	r3, r0
 80026b4:	681b      	ldr	r3, [r3, #0]
      }
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	01555555 	.word	0x01555555

080026c4 <_ZNKSt12_Vector_baseI10Slave_infoSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <_ZNSt15__new_allocatorI10Slave_infoE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f889 	bl	8002800 <_ZNKSt15__new_allocatorI10Slave_infoE11_M_max_sizeEv>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4293      	cmp	r3, r2
 80026f4:	bf8c      	ite	hi
 80026f6:	2301      	movhi	r3, #1
 80026f8:	2300      	movls	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <_ZNSt15__new_allocatorI10Slave_infoE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <_ZNSt15__new_allocatorI10Slave_infoE8allocateEjPKv+0x58>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <_ZNSt15__new_allocatorI10Slave_infoE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002712:	f003 fa55 	bl	8005bc0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002716:	f003 fa50 	bl	8005bba <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	015b      	lsls	r3, r3, #5
 8002724:	4618      	mov	r0, r3
 8002726:	f003 fa34 	bl	8005b92 <_Znwj>
 800272a:	4603      	mov	r3, r0
      }
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	02aaaaaa 	.word	0x02aaaaaa

08002738 <_ZSt12__relocate_aIP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f868 	bl	800281c <_ZSt12__niter_baseIP10Slave_infoET_S2_>
 800274c:	4604      	mov	r4, r0
 800274e:	68b8      	ldr	r0, [r7, #8]
 8002750:	f000 f864 	bl	800281c <_ZSt12__niter_baseIP10Slave_infoET_S2_>
 8002754:	4605      	mov	r5, r0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f860 	bl	800281c <_ZSt12__niter_baseIP10Slave_infoET_S2_>
 800275c:	4602      	mov	r2, r0
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	4629      	mov	r1, r5
 8002762:	4620      	mov	r0, r4
 8002764:	f000 f865 	bl	8002832 <_ZSt14__relocate_a_1IP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002768:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bdb0      	pop	{r4, r5, r7, pc}

08002772 <_ZNSt13move_iteratorIP10Slave_infoEC1ES1_>:
      move_iterator(iterator_type __i)
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800277c:	463b      	mov	r3, r7
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f87d 	bl	800287e <_ZSt4moveIRP10Slave_infoEONSt16remove_referenceIT_E4typeEOS4_>
 8002784:	4603      	mov	r3, r0
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZSt18uninitialized_copyISt13move_iteratorIP10Slave_infoES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 80027a6:	2300      	movs	r3, #0
 80027a8:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f870 	bl	8002894 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10Slave_infoES4_EET0_T_S7_S6_>
 80027b4:	4603      	mov	r3, r0
    }
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_ZNSt16allocator_traitsISaI10Slave_infoEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f874 	bl	80028b4 <_ZNKSt15__new_allocatorI10Slave_infoE8max_sizeEv>
 80027cc:	4603      	mov	r3, r0
      }
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d201      	bcs.n	80027f0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	e000      	b.n	80027f2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80027f0:	687b      	ldr	r3, [r7, #4]
    }
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <_ZNKSt15__new_allocatorI10Slave_infoE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <_ZNKSt15__new_allocatorI10Slave_infoE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	01555555 	.word	0x01555555

0800281c <_ZSt12__niter_baseIP10Slave_infoET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_ZSt14__relocate_a_1IP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002832:	b590      	push	{r4, r7, lr}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002844:	e012      	b.n	800286c <_ZSt14__relocate_a_1IP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff09 	bl	800265e <_ZSt11__addressofI10Slave_infoEPT_RS1_>
 800284c:	4604      	mov	r4, r0
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff ff05 	bl	800265e <_ZSt11__addressofI10Slave_infoEPT_RS1_>
 8002854:	4603      	mov	r3, r0
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	4620      	mov	r0, r4
 800285c:	f000 f836 	bl	80028cc <_ZSt19__relocate_object_aI10Slave_infoS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3360      	adds	r3, #96	@ 0x60
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3360      	adds	r3, #96	@ 0x60
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	d1e8      	bne.n	8002846 <_ZSt14__relocate_a_1IP10Slave_infoS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 8002874:	697b      	ldr	r3, [r7, #20]
    }
 8002876:	4618      	mov	r0, r3
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd90      	pop	{r4, r7, pc}

0800287e <_ZSt4moveIRP10Slave_infoEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10Slave_infoES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f82c 	bl	8002902 <_ZSt16__do_uninit_copyISt13move_iteratorIP10Slave_infoES2_ET0_T_S5_S4_>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZNKSt15__new_allocatorI10Slave_infoE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff9f 	bl	8002800 <_ZNKSt15__new_allocatorI10Slave_infoE11_M_max_sizeEv>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZSt19__relocate_object_aI10Slave_infoS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80028d8:	68b8      	ldr	r0, [r7, #8]
 80028da:	f000 f841 	bl	8002960 <_ZSt4moveIR10Slave_infoEONSt16remove_referenceIT_E4typeEOS3_>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	68f9      	ldr	r1, [r7, #12]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f846 	bl	8002976 <_ZNSt16allocator_traitsISaI10Slave_infoEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	f7ff feb7 	bl	800265e <_ZSt11__addressofI10Slave_infoEPT_RS1_>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fde5 	bl	80024c4 <_ZNSt16allocator_traitsISaI10Slave_infoEE7destroyIS0_EEvRS1_PT_>
    }
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_ZSt16__do_uninit_copyISt13move_iteratorIP10Slave_infoES2_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8002912:	e015      	b.n	8002940 <_ZSt16__do_uninit_copyISt13move_iteratorIP10Slave_infoES2_ET0_T_S5_S4_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7ff fea2 	bl	800265e <_ZSt11__addressofI10Slave_infoEPT_RS1_>
 800291a:	4604      	mov	r4, r0
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f85d 	bl	80029e0 <_ZNKSt13move_iteratorIP10Slave_infoEdeEv>
 8002926:	4603      	mov	r3, r0
 8002928:	4619      	mov	r1, r3
 800292a:	4620      	mov	r0, r4
 800292c:	f000 f88f 	bl	8002a4e <_ZSt10_ConstructI10Slave_infoJS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f842 	bl	80029be <_ZNSt13move_iteratorIP10Slave_infoEppEv>
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3360      	adds	r3, #96	@ 0x60
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f107 0208 	add.w	r2, r7, #8
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f826 	bl	800299c <_ZStneIP10Slave_infoEbRKSt13move_iteratorIT_ES6_>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1de      	bne.n	8002914 <_ZSt16__do_uninit_copyISt13move_iteratorIP10Slave_infoES2_ET0_T_S5_S4_+0x12>
	  return __cur;
 8002956:	697b      	ldr	r3, [r7, #20]
    }
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}

08002960 <_ZSt4moveIR10Slave_infoEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <_ZNSt16allocator_traitsISaI10Slave_infoEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f87a 	bl	8002a7c <_ZSt7forwardI10Slave_infoEOT_RNSt16remove_referenceIS1_E4typeE>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f87f 	bl	8002a92 <_ZNSt15__new_allocatorI10Slave_infoE9constructIS0_JS0_EEEvPT_DpOT0_>
	}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_ZStneIP10Slave_infoEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f88a 	bl	8002ac2 <_ZSteqIP10Slave_infoEbRKSt13move_iteratorIT_ES6_>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_ZNSt13move_iteratorIP10Slave_infoEppEv>:
      operator++()
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
	return *this;
 80029d2:	687b      	ldr	r3, [r7, #4]
      }
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_ZNKSt13move_iteratorIP10Slave_infoEdeEv>:
      operator*() const
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN10Slave_infoC1EOS_>:
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 f9b1 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f103 0218 	add.w	r2, r3, #24
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	3318      	adds	r3, #24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f003 f9a8 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3330      	adds	r3, #48	@ 0x30
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f003 f99f 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3348      	adds	r3, #72	@ 0x48
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f003 f996 	bl	8005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_ZSt10_ConstructI10Slave_infoJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002a4e:	b590      	push	{r4, r7, lr}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	2060      	movs	r0, #96	@ 0x60
 8002a5e:	f7fd fcd5 	bl	800040c <_ZnwjPv>
 8002a62:	4604      	mov	r4, r0
 8002a64:	6838      	ldr	r0, [r7, #0]
 8002a66:	f000 f809 	bl	8002a7c <_ZSt7forwardI10Slave_infoEOT_RNSt16remove_referenceIS1_E4typeE>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff ffc2 	bl	80029f8 <_ZN10Slave_infoC1EOS_>
    }
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}

08002a7c <_ZSt7forwardI10Slave_infoEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_ZNSt15__new_allocatorI10Slave_infoE9constructIS0_JS0_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002a92:	b590      	push	{r4, r7, lr}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	2060      	movs	r0, #96	@ 0x60
 8002aa4:	f7fd fcb2 	bl	800040c <_ZnwjPv>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffe6 	bl	8002a7c <_ZSt7forwardI10Slave_infoEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff ff9f 	bl	80029f8 <_ZN10Slave_infoC1EOS_>
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}

08002ac2 <_ZSteqIP10Slave_infoEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002ac2:	b590      	push	{r4, r7, lr}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f80e 	bl	8002aee <_ZNKSt13move_iteratorIP10Slave_infoE4baseEv>
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f000 f80a 	bl	8002aee <_ZNKSt13move_iteratorIP10Slave_infoE4baseEv>
 8002ada:	4603      	mov	r3, r0
 8002adc:	429c      	cmp	r4, r3
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}

08002aee <_ZNKSt13move_iteratorIP10Slave_infoE4baseEv>:
      base() const
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b098      	sub	sp, #96	@ 0x60
 8002b0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b0e:	f000 fb0b 	bl	8003128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b12:	f000 f87b 	bl	8002c0c <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b16:	f7fd fbbb 	bl	8000290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002b1a:	f000 fa35 	bl	8002f88 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002b1e:	f000 fa03 	bl	8002f28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HC05 master(&huart4, Key_GPIO_Port, Key_Pin, Enable_GPIO_Port, Enable_Pin, 115200);
 8002b22:	1d38      	adds	r0, r7, #4
 8002b24:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	4b31      	ldr	r3, [pc, #196]	@ (8002bf4 <main+0xec>)
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b36:	4a30      	ldr	r2, [pc, #192]	@ (8002bf8 <main+0xf0>)
 8002b38:	4930      	ldr	r1, [pc, #192]	@ (8002bfc <main+0xf4>)
 8002b3a:	f7fd fcac 	bl	8000496 <_ZN4HC05C1EP20__UART_HandleTypeDefP12GPIO_TypeDeftS3_tm>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Pin default configuration for AT Mode:
	  master.initPinConfig();
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fc05 	bl	8001350 <_ZN4HC0513initPinConfigEv>

	  for (uint8_t i = 0; i < 5; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002b4c:	e00c      	b.n	8002b68 <main+0x60>
	  {
		  checker_AT = master.isConnectionOk();
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fce3 	bl	800051c <_ZN4HC0514isConnectionOkEv>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b29      	ldr	r3, [pc, #164]	@ (8002c00 <main+0xf8>)
 8002b5c:	701a      	strb	r2, [r3, #0]
	  for (uint8_t i = 0; i < 5; i++)
 8002b5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b62:	3301      	adds	r3, #1
 8002b64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002b68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d9ee      	bls.n	8002b4e <main+0x46>
	  }

	  HAL_Delay(100);
 8002b70:	2064      	movs	r0, #100	@ 0x64
 8002b72:	f000 fb3f 	bl	80031f4 <HAL_Delay>
	  checker_Role = master.setRole(Role::Role_master);
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fd8c 	bl	8000698 <_ZN4HC057setRoleE4Role>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <main+0xfc>)
 8002b86:	701a      	strb	r2, [r3, #0]

	  master.setBaudRate(BaudRate_115200, StopBit_1, Parity_None);
 8002b88:	1d38      	adds	r0, r7, #4
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002b92:	f7fd fcef 	bl	8000574 <_ZN4HC0511setBaudRateE8BaudRate7StopBit9ParityBit>

	  master.connectDevicesViaName("hc-05 SLAVE", 3, 6);
 8002b96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 f80a 	bl	8005bb4 <_ZNSaIcEC1Ev>
 8002ba0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002ba4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ba8:	4917      	ldr	r1, [pc, #92]	@ (8002c08 <main+0x100>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fba0 	bl	80062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002bb0:	f107 001c 	add.w	r0, r7, #28
 8002bb4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002bb8:	1d39      	adds	r1, r7, #4
 8002bba:	2306      	movs	r3, #6
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f7fe fb30 	bl	8001224 <_ZN4HC0521connectDevicesViaNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh>
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 f8f0 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002bce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 f8eb 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002bd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 ffeb 	bl	8005bb8 <_ZNSaIcED1Ev>

	  master.disconnectDevices();
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fbdf 	bl	80013a8 <_ZN4HC0517disconnectDevicesEv>

//	  getter_DevInfo = master.getBluetoothDevices(5, 5);
//
//	  SendStructUART();
//
	  HAL_Delay(5000);
 8002bea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002bee:	f000 fb01 	bl	80031f4 <HAL_Delay>
//
//	  SendStructUART();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002bf2:	e7a4      	b.n	8002b3e <main+0x36>
 8002bf4:	48000c00 	.word	0x48000c00
 8002bf8:	48000800 	.word	0x48000800
 8002bfc:	20000104 	.word	0x20000104
 8002c00:	20000078 	.word	0x20000078
 8002c04:	20000079 	.word	0x20000079
 8002c08:	0800683c 	.word	0x0800683c

08002c0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0a6      	sub	sp, #152	@ 0x98
 8002c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c12:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002c16:	2228      	movs	r2, #40	@ 0x28
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fc7a 	bl	8006514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2258      	movs	r2, #88	@ 0x58
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fc6c 	bl	8006514 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c40:	2301      	movs	r3, #1
 8002c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c44:	2310      	movs	r3, #16
 8002c46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c58:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fd6e 	bl	800374c <HAL_RCC_OscConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8002c80:	f000 f833 	bl	8002cea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c84:	230f      	movs	r3, #15
 8002c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c94:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c96:	2300      	movs	r3, #0
 8002c98:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fda7 	bl	80047f4 <HAL_RCC_ClockConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8002cb6:	f000 f818 	bl	8002cea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 8002cba:	230a      	movs	r3, #10
 8002cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 ffb3 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002cde:	f000 f804 	bl	8002cea <Error_Handler>
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3798      	adds	r7, #152	@ 0x98
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cee:	b672      	cpsid	i
}
 8002cf0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf2:	bf00      	nop
 8002cf4:	e7fd      	b.n	8002cf2 <Error_Handler+0x8>
	...

08002cf8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d116      	bne.n	8002d36 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <_Z41__static_initialization_and_destruction_0ii+0x3e>
std::string getter_BR;
 8002d12:	4818      	ldr	r0, [pc, #96]	@ (8002d74 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002d14:	f003 f815 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
std::string getter_INQM;
 8002d18:	4817      	ldr	r0, [pc, #92]	@ (8002d78 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002d1a:	f003 f812 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
std::vector<Slave_info> getter_DevInfo;
 8002d1e:	4817      	ldr	r0, [pc, #92]	@ (8002d7c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002d20:	f7fd fd0f 	bl	8000742 <_ZNSt6vectorI10Slave_infoSaIS0_EEC1Ev>
std::string state1;
 8002d24:	4816      	ldr	r0, [pc, #88]	@ (8002d80 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002d26:	f003 f80c 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
std::string state2;
 8002d2a:	4816      	ldr	r0, [pc, #88]	@ (8002d84 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002d2c:	f003 f809 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
std::string connections_response;
 8002d30:	4815      	ldr	r0, [pc, #84]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002d32:	f003 f806 	bl	8005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002d46:	4810      	ldr	r0, [pc, #64]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002d48:	f003 f831 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string state2;
 8002d4c:	480d      	ldr	r0, [pc, #52]	@ (8002d84 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002d4e:	f003 f82e 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string state1;
 8002d52:	480b      	ldr	r0, [pc, #44]	@ (8002d80 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002d54:	f003 f82b 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::vector<Slave_info> getter_DevInfo;
 8002d58:	4808      	ldr	r0, [pc, #32]	@ (8002d7c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002d5a:	f7fe ff93 	bl	8001c84 <_ZNSt6vectorI10Slave_infoSaIS0_EED1Ev>
std::string getter_INQM;
 8002d5e:	4806      	ldr	r0, [pc, #24]	@ (8002d78 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002d60:	f003 f825 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string getter_BR;
 8002d64:	4803      	ldr	r0, [pc, #12]	@ (8002d74 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002d66:	f003 f822 	bl	8005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	2000007c 	.word	0x2000007c
 8002d78:	20000094 	.word	0x20000094
 8002d7c:	200000ac 	.word	0x200000ac
 8002d80:	200000b8 	.word	0x200000b8
 8002d84:	200000d0 	.word	0x200000d0
 8002d88:	200000e8 	.word	0x200000e8

08002d8c <_GLOBAL__sub_I_checker_AT>:
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7ff ffaf 	bl	8002cf8 <_Z41__static_initialization_and_destruction_0ii>
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_GLOBAL__sub_D_checker_AT>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff ffa7 	bl	8002cf8 <_Z41__static_initialization_and_destruction_0ii>
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <HAL_MspInit+0x44>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <HAL_MspInit+0x44>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6193      	str	r3, [r2, #24]
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_MspInit+0x44>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_MspInit+0x44>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a08      	ldr	r2, [pc, #32]	@ (8002df0 <HAL_MspInit+0x44>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_MspInit+0x44>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002de2:	2007      	movs	r0, #7
 8002de4:	f000 fadc 	bl	80033a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <NMI_Handler+0x4>

08002dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <HardFault_Handler+0x4>

08002e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <MemManage_Handler+0x4>

08002e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <BusFault_Handler+0x4>

08002e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <UsageFault_Handler+0x4>

08002e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e4a:	f000 f9b3 	bl	80031b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  return 1;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_kill>:

int _kill(int pid, int sig)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e6c:	f003 fbae 	bl	80065cc <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2216      	movs	r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
  return -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_exit>:

void _exit (int status)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffe7 	bl	8002e62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <_exit+0x12>

08002e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	@ (8002ef4 <_sbrk+0x5c>)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <_sbrk+0x60>)
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <_sbrk+0x64>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <_sbrk+0x64>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <_sbrk+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d207      	bcs.n	8002ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec8:	f003 fb80 	bl	80065cc <__errno>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	220c      	movs	r2, #12
 8002ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e009      	b.n	8002eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a05      	ldr	r2, [pc, #20]	@ (8002efc <_sbrk+0x64>)
 8002ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20010000 	.word	0x20010000
 8002ef8:	00000400 	.word	0x00000400
 8002efc:	20000100 	.word	0x20000100
 8002f00:	20000368 	.word	0x20000368

08002f04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <SystemInit+0x20>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <SystemInit+0x20>)
 8002f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f2e:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <MX_UART4_Init+0x5c>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	@ (8002f80 <MX_UART4_Init+0x58>)
 8002f6c:	f002 f880 	bl	8005070 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002f76:	f7ff feb8 	bl	8002cea <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000104 	.word	0x20000104
 8002f84:	40004c00 	.word	0x40004c00

08002f88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002f8e:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <MX_USART2_UART_Init+0x5c>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f92:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fae:	220c      	movs	r2, #12
 8002fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fbe:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fca:	4805      	ldr	r0, [pc, #20]	@ (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fcc:	f002 f850 	bl	8005070 <HAL_UART_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002fd6:	f7ff fe88 	bl	8002cea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000018c 	.word	0x2000018c
 8002fe4:	40004400 	.word	0x40004400

08002fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	@ 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2f      	ldr	r2, [pc, #188]	@ (80030c4 <HAL_UART_MspInit+0xdc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d129      	bne.n	800305e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800300a:	4b2f      	ldr	r3, [pc, #188]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4a2e      	ldr	r2, [pc, #184]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003010:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003014:	61d3      	str	r3, [r2, #28]
 8003016:	4b2c      	ldr	r3, [pc, #176]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003022:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4a28      	ldr	r2, [pc, #160]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003028:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800302c:	6153      	str	r3, [r2, #20]
 800302e:	4b26      	ldr	r3, [pc, #152]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800303a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003048:	2303      	movs	r3, #3
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800304c:	2305      	movs	r3, #5
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	4619      	mov	r1, r3
 8003056:	481d      	ldr	r0, [pc, #116]	@ (80030cc <HAL_UART_MspInit+0xe4>)
 8003058:	f000 f9d6 	bl	8003408 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800305c:	e02d      	b.n	80030ba <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <HAL_UART_MspInit+0xe8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d128      	bne.n	80030ba <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003068:	4b17      	ldr	r3, [pc, #92]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a16      	ldr	r2, [pc, #88]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 800306e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003072:	61d3      	str	r3, [r2, #28]
 8003074:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	4a10      	ldr	r2, [pc, #64]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800308a:	6153      	str	r3, [r2, #20]
 800308c:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <HAL_UART_MspInit+0xe0>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003098:	230c      	movs	r3, #12
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030a8:	2307      	movs	r3, #7
 80030aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	4619      	mov	r1, r3
 80030b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030b6:	f000 f9a7 	bl	8003408 <HAL_GPIO_Init>
}
 80030ba:	bf00      	nop
 80030bc:	3730      	adds	r7, #48	@ 0x30
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40004c00 	.word	0x40004c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	48000800 	.word	0x48000800
 80030d0:	40004400 	.word	0x40004400

080030d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800310c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80030d8:	f7ff ff14 	bl	8002f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030dc:	480c      	ldr	r0, [pc, #48]	@ (8003110 <LoopForever+0x6>)
  ldr r1, =_edata
 80030de:	490d      	ldr	r1, [pc, #52]	@ (8003114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <LoopForever+0xe>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003120 <LoopForever+0x16>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003102:	f003 fa69 	bl	80065d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003106:	f7ff fcff 	bl	8002b08 <main>

0800310a <LoopForever>:

LoopForever:
    b LoopForever
 800310a:	e7fe      	b.n	800310a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800310c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003114:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003118:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 800311c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003120:	20000364 	.word	0x20000364

08003124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC1_2_IRQHandler>
	...

08003128 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <HAL_Init+0x28>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a07      	ldr	r2, [pc, #28]	@ (8003150 <HAL_Init+0x28>)
 8003132:	f043 0310 	orr.w	r3, r3, #16
 8003136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003138:	2003      	movs	r0, #3
 800313a:	f000 f931 	bl	80033a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800313e:	2000      	movs	r0, #0
 8003140:	f000 f808 	bl	8003154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003144:	f7ff fe32 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40022000 	.word	0x40022000

08003154 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <HAL_InitTick+0x54>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <HAL_InitTick+0x58>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800316a:	fbb3 f3f1 	udiv	r3, r3, r1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f93b 	bl	80033ee <HAL_SYSTICK_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e00e      	b.n	80031a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d80a      	bhi.n	800319e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003188:	2200      	movs	r2, #0
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f000 f911 	bl	80033b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003194:	4a06      	ldr	r2, [pc, #24]	@ (80031b0 <HAL_InitTick+0x5c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000008 	.word	0x20000008
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_IncTick+0x20>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_IncTick+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <HAL_IncTick+0x24>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000008 	.word	0x20000008
 80031d8:	20000214 	.word	0x20000214

080031dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return uwTick;  
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <HAL_GetTick+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000214 	.word	0x20000214

080031f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff ffee 	bl	80031dc <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d005      	beq.n	800321a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_Delay+0x44>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800321a:	bf00      	nop
 800321c:	f7ff ffde 	bl	80031dc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d8f7      	bhi.n	800321c <HAL_Delay+0x28>
  {
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000008 	.word	0x20000008

0800323c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326e:	4a04      	ldr	r2, [pc, #16]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <__NVIC_GetPriorityGrouping+0x18>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0307 	and.w	r3, r3, #7
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db0a      	blt.n	80032ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	@ (80032ec <__NVIC_SetPriority+0x4c>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c8:	e00a      	b.n	80032e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4908      	ldr	r1, [pc, #32]	@ (80032f0 <__NVIC_SetPriority+0x50>)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	3b04      	subs	r3, #4
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	440b      	add	r3, r1
 80032de:	761a      	strb	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	@ 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf28      	it	cs
 8003312:	2304      	movcs	r3, #4
 8003314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3304      	adds	r3, #4
 800331a:	2b06      	cmp	r3, #6
 800331c:	d902      	bls.n	8003324 <NVIC_EncodePriority+0x30>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3b03      	subs	r3, #3
 8003322:	e000      	b.n	8003326 <NVIC_EncodePriority+0x32>
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	401a      	ands	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43d9      	mvns	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	4313      	orrs	r3, r2
         );
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	@ 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800336c:	d301      	bcc.n	8003372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336e:	2301      	movs	r3, #1
 8003370:	e00f      	b.n	8003392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003372:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <SysTick_Config+0x40>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337a:	210f      	movs	r1, #15
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f7ff ff8e 	bl	80032a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003384:	4b05      	ldr	r3, [pc, #20]	@ (800339c <SysTick_Config+0x40>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338a:	4b04      	ldr	r3, [pc, #16]	@ (800339c <SysTick_Config+0x40>)
 800338c:	2207      	movs	r2, #7
 800338e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	e000e010 	.word	0xe000e010

080033a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff47 	bl	800323c <__NVIC_SetPriorityGrouping>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c8:	f7ff ff5c 	bl	8003284 <__NVIC_GetPriorityGrouping>
 80033cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7ff ff8e 	bl	80032f4 <NVIC_EncodePriority>
 80033d8:	4602      	mov	r2, r0
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff5d 	bl	80032a0 <__NVIC_SetPriority>
}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffb0 	bl	800335c <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003416:	e160      	b.n	80036da <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8152 	beq.w	80036d4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d005      	beq.n	8003448 <HAL_GPIO_Init+0x40>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d130      	bne.n	80034aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347e:	2201      	movs	r2, #1
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0201 	and.w	r2, r3, #1
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d017      	beq.n	80034e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d123      	bne.n	800353a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	08da      	lsrs	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3208      	adds	r2, #8
 80034fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	6939      	ldr	r1, [r7, #16]
 8003536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2203      	movs	r2, #3
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0203 	and.w	r2, r3, #3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80ac 	beq.w	80036d4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357c:	4b5e      	ldr	r3, [pc, #376]	@ (80036f8 <HAL_GPIO_Init+0x2f0>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4a5d      	ldr	r2, [pc, #372]	@ (80036f8 <HAL_GPIO_Init+0x2f0>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6193      	str	r3, [r2, #24]
 8003588:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_GPIO_Init+0x2f0>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003594:	4a59      	ldr	r2, [pc, #356]	@ (80036fc <HAL_GPIO_Init+0x2f4>)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	220f      	movs	r2, #15
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035be:	d025      	beq.n	800360c <HAL_GPIO_Init+0x204>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003700 <HAL_GPIO_Init+0x2f8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01f      	beq.n	8003608 <HAL_GPIO_Init+0x200>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003704 <HAL_GPIO_Init+0x2fc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d019      	beq.n	8003604 <HAL_GPIO_Init+0x1fc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003708 <HAL_GPIO_Init+0x300>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_GPIO_Init+0x1f8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_GPIO_Init+0x304>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00d      	beq.n	80035fc <HAL_GPIO_Init+0x1f4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4b      	ldr	r2, [pc, #300]	@ (8003710 <HAL_GPIO_Init+0x308>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <HAL_GPIO_Init+0x1f0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_GPIO_Init+0x1ec>
 80035f0:	2306      	movs	r3, #6
 80035f2:	e00c      	b.n	800360e <HAL_GPIO_Init+0x206>
 80035f4:	2307      	movs	r3, #7
 80035f6:	e00a      	b.n	800360e <HAL_GPIO_Init+0x206>
 80035f8:	2305      	movs	r3, #5
 80035fa:	e008      	b.n	800360e <HAL_GPIO_Init+0x206>
 80035fc:	2304      	movs	r3, #4
 80035fe:	e006      	b.n	800360e <HAL_GPIO_Init+0x206>
 8003600:	2303      	movs	r3, #3
 8003602:	e004      	b.n	800360e <HAL_GPIO_Init+0x206>
 8003604:	2302      	movs	r3, #2
 8003606:	e002      	b.n	800360e <HAL_GPIO_Init+0x206>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_GPIO_Init+0x206>
 800360c:	2300      	movs	r3, #0
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	f002 0203 	and.w	r2, r2, #3
 8003614:	0092      	lsls	r2, r2, #2
 8003616:	4093      	lsls	r3, r2
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800361e:	4937      	ldr	r1, [pc, #220]	@ (80036fc <HAL_GPIO_Init+0x2f4>)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	3302      	adds	r3, #2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362c:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <HAL_GPIO_Init+0x310>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003650:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003656:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800367a:	4a27      	ldr	r2, [pc, #156]	@ (8003718 <HAL_GPIO_Init+0x310>)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003680:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036ce:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3301      	adds	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f ae97 	bne.w	8003418 <HAL_GPIO_Init+0x10>
  }
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000
 8003700:	48000400 	.word	0x48000400
 8003704:	48000800 	.word	0x48000800
 8003708:	48000c00 	.word	0x48000c00
 800370c:	48001000 	.word	0x48001000
 8003710:	48001400 	.word	0x48001400
 8003714:	48001800 	.word	0x48001800
 8003718:	40010400 	.word	0x40010400

0800371c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
 8003728:	4613      	mov	r3, r2
 800372a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003738:	e002      	b.n	8003740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003752:	af00      	add	r7, sp, #0
 8003754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003758:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800375c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800375e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003762:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f001 b83a 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003776:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 816f 	beq.w	8003a66 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003788:	4bb5      	ldr	r3, [pc, #724]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00c      	beq.n	80037ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003794:	4bb2      	ldr	r3, [pc, #712]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b08      	cmp	r3, #8
 800379e:	d15c      	bne.n	800385a <HAL_RCC_OscConfig+0x10e>
 80037a0:	4baf      	ldr	r3, [pc, #700]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ac:	d155      	bne.n	800385a <HAL_RCC_OscConfig+0x10e>
 80037ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037b2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_OscConfig+0x94>
 80037da:	4ba1      	ldr	r3, [pc, #644]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e015      	b.n	800380c <HAL_RCC_OscConfig+0xc0>
 80037e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80037f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037f8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80037fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003808:	4b95      	ldr	r3, [pc, #596]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003810:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003814:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003818:	fa92 f2a2 	rbit	r2, r2
 800381c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003820:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003824:	fab2 f282 	clz	r2, r2
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f042 0220 	orr.w	r2, r2, #32
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f002 021f 	and.w	r2, r2, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8111 	beq.w	8003a64 <HAL_RCC_OscConfig+0x318>
 8003842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003846:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8108 	bne.w	8003a64 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f000 bfc6 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386a:	d106      	bne.n	800387a <HAL_RCC_OscConfig+0x12e>
 800386c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a7b      	ldr	r2, [pc, #492]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e036      	b.n	80038e8 <HAL_RCC_OscConfig+0x19c>
 800387a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x158>
 800388a:	4b75      	ldr	r3, [pc, #468]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a74      	ldr	r2, [pc, #464]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b72      	ldr	r3, [pc, #456]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a71      	ldr	r2, [pc, #452]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 800389c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e021      	b.n	80038e8 <HAL_RCC_OscConfig+0x19c>
 80038a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x184>
 80038b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a69      	ldr	r2, [pc, #420]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b67      	ldr	r3, [pc, #412]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a66      	ldr	r2, [pc, #408]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x19c>
 80038d0:	4b63      	ldr	r3, [pc, #396]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a62      	ldr	r2, [pc, #392]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b60      	ldr	r3, [pc, #384]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d059      	beq.n	80039ac <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7ff fc70 	bl	80031dc <HAL_GetTick>
 80038fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003902:	f7ff fc6b 	bl	80031dc <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d902      	bls.n	8003918 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	f000 bf67 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
 8003918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800392c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_RCC_OscConfig+0x1fe>
 8003944:	4b46      	ldr	r3, [pc, #280]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	e015      	b.n	8003976 <HAL_RCC_OscConfig+0x22a>
 800394a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800394e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800395e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003962:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003966:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003972:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800397a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800397e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003982:	fa92 f2a2 	rbit	r2, r2
 8003986:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800398a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0220 	orr.w	r2, r2, #32
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ab      	beq.n	8003902 <HAL_RCC_OscConfig+0x1b6>
 80039aa:	e05c      	b.n	8003a66 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7ff fc16 	bl	80031dc <HAL_GetTick>
 80039b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b6:	f7ff fc11 	bl	80031dc <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	@ 0x64
 80039c4:	d902      	bls.n	80039cc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	f000 bf0d 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
 80039cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039d0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80039e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d102      	bne.n	80039fe <HAL_RCC_OscConfig+0x2b2>
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	e015      	b.n	8003a2a <HAL_RCC_OscConfig+0x2de>
 80039fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a02:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003a12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a16:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a26:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <HAL_RCC_OscConfig+0x314>)
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a2e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003a32:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003a36:	fa92 f2a2 	rbit	r2, r2
 8003a3a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003a3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a42:	fab2 f282 	clz	r2, r2
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f042 0220 	orr.w	r2, r2, #32
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f002 021f 	and.w	r2, r2, #31
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ab      	bne.n	80039b6 <HAL_RCC_OscConfig+0x26a>
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_OscConfig+0x31a>
 8003a60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 817f 	beq.w	8003d7a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a88:	4ba4      	ldr	r3, [pc, #656]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d173      	bne.n	8003b7c <HAL_RCC_OscConfig+0x430>
 8003a94:	4ba1      	ldr	r3, [pc, #644]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa0:	d16c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x430>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003ab4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x386>
 8003acc:	4b93      	ldr	r3, [pc, #588]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e013      	b.n	8003afa <HAL_RCC_OscConfig+0x3ae>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003aea:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003af6:	4b89      	ldr	r3, [pc, #548]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	2202      	movs	r2, #2
 8003afc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003b00:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003b04:	fa92 f2a2 	rbit	r2, r2
 8003b08:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003b0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b10:	fab2 f282 	clz	r2, r2
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	f042 0220 	orr.w	r2, r2, #32
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	f002 021f 	and.w	r2, r2, #31
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3f6>
 8003b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d002      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f000 be52 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b76      	ldr	r3, [pc, #472]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	21f8      	movs	r1, #248	@ 0xf8
 8003b58:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003b60:	fa91 f1a1 	rbit	r1, r1
 8003b64:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003b68:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003b6c:	fab1 f181 	clz	r1, r1
 8003b70:	b2c9      	uxtb	r1, r1
 8003b72:	408b      	lsls	r3, r1
 8003b74:	4969      	ldr	r1, [pc, #420]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7a:	e0fe      	b.n	8003d7a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8088 	beq.w	8003c9e <HAL_RCC_OscConfig+0x552>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003ba0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7ff fb0f 	bl	80031dc <HAL_GetTick>
 8003bbe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7ff fb0a 	bl	80031dc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d902      	bls.n	8003bda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	f000 be06 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003bec:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4be>
 8003c04:	4b45      	ldr	r3, [pc, #276]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e013      	b.n	8003c32 <HAL_RCC_OscConfig+0x4e6>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c22:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2202      	movs	r2, #2
 8003c34:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003c38:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003c3c:	fa92 f2a2 	rbit	r2, r2
 8003c40:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003c44:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c48:	fab2 f282 	clz	r2, r2
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	f042 0220 	orr.w	r2, r2, #32
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	f002 021f 	and.w	r2, r2, #31
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0af      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b2d      	ldr	r3, [pc, #180]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	21f8      	movs	r1, #248	@ 0xf8
 8003c7a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003c82:	fa91 f1a1 	rbit	r1, r1
 8003c86:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003c8a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003c8e:	fab1 f181 	clz	r1, r1
 8003c92:	b2c9      	uxtb	r1, r1
 8003c94:	408b      	lsls	r3, r1
 8003c96:	4921      	ldr	r1, [pc, #132]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
 8003c9c:	e06d      	b.n	8003d7a <HAL_RCC_OscConfig+0x62e>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003cb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cbe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7ff fa87 	bl	80031dc <HAL_GetTick>
 8003cce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7ff fa82 	bl	80031dc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d902      	bls.n	8003cea <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	f000 bd7e 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
 8003cea:	2302      	movs	r3, #2
 8003cec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003cfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5d4>
 8003d14:	4b01      	ldr	r3, [pc, #4]	@ (8003d1c <HAL_RCC_OscConfig+0x5d0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	e016      	b.n	8003d48 <HAL_RCC_OscConfig+0x5fc>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	2302      	movs	r3, #2
 8003d22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d38:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d44:	4bbf      	ldr	r3, [pc, #764]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003d4e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003d52:	fa92 f2a2 	rbit	r2, r2
 8003d56:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003d5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0220 	orr.w	r2, r2, #32
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ac      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8113 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d07c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x74e>
 8003da0:	2301      	movs	r3, #1
 8003da2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4ba2      	ldr	r3, [pc, #648]	@ (8004048 <HAL_RCC_OscConfig+0x8fc>)
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dca:	f7ff fa07 	bl	80031dc <HAL_GetTick>
 8003dce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7ff fa02 	bl	80031dc <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d902      	bls.n	8003dea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	f000 bcfe 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
 8003dea:	2302      	movs	r3, #2
 8003dec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df4:	fa93 f2a3 	rbit	r2, r3
 8003df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dfc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	fa93 f2a3 	rbit	r2, r3
 8003e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e2e:	2202      	movs	r2, #2
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b7e      	ldr	r3, [pc, #504]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e56:	2102      	movs	r1, #2
 8003e58:	6019      	str	r1, [r3, #0]
 8003e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	fa93 f1a3 	rbit	r1, r3
 8003e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e70:	6019      	str	r1, [r3, #0]
  return result;
 8003e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d09d      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x688>
 8003e98:	e08d      	b.n	8003fb6 <HAL_RCC_OscConfig+0x86a>
 8003e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eaa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fa93 f2a3 	rbit	r2, r3
 8003eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ebc:	601a      	str	r2, [r3, #0]
  return result;
 8003ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ec2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ec6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8004048 <HAL_RCC_OscConfig+0x8fc>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7ff f97e 	bl	80031dc <HAL_GetTick>
 8003ee0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7ff f979 	bl	80031dc <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d902      	bls.n	8003efc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	f000 bc75 	b.w	80047e6 <HAL_RCC_OscConfig+0x109a>
 8003efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f04:	2202      	movs	r2, #2
 8003f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	fa93 f2a3 	rbit	r2, r3
 8003f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f28:	2202      	movs	r2, #2
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b36      	ldr	r3, [pc, #216]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f74:	2102      	movs	r1, #2
 8003f76:	6019      	str	r1, [r3, #0]
 8003f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f1a3 	rbit	r1, r3
 8003f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f8a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f8e:	6019      	str	r1, [r3, #0]
  return result;
 8003f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d197      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 81a5 	beq.w	8004316 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b19      	ldr	r3, [pc, #100]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	61d3      	str	r3, [r2, #28]
 8003fea:	4b16      	ldr	r3, [pc, #88]	@ (8004044 <HAL_RCC_OscConfig+0x8f8>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003ff2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ff6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004004:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b0f      	ldr	r3, [pc, #60]	@ (800404c <HAL_RCC_OscConfig+0x900>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d121      	bne.n	800405c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <HAL_RCC_OscConfig+0x900>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <HAL_RCC_OscConfig+0x900>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004022:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004024:	f7ff f8da 	bl	80031dc <HAL_GetTick>
 8004028:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	e010      	b.n	8004050 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7ff f8d5 	bl	80031dc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d908      	bls.n	8004050 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e3d1      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	10908120 	.word	0x10908120
 800404c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	4b8d      	ldr	r3, [pc, #564]	@ (8004288 <HAL_RCC_OscConfig+0xb3c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0e8      	beq.n	800402e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800405c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004060:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x92e>
 800406c:	4b87      	ldr	r3, [pc, #540]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a86      	ldr	r2, [pc, #536]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6213      	str	r3, [r2, #32]
 8004078:	e035      	b.n	80040e6 <HAL_RCC_OscConfig+0x99a>
 800407a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800407e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x958>
 800408a:	4b80      	ldr	r3, [pc, #512]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a7f      	ldr	r2, [pc, #508]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	4b7d      	ldr	r3, [pc, #500]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4a7c      	ldr	r2, [pc, #496]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	e020      	b.n	80040e6 <HAL_RCC_OscConfig+0x99a>
 80040a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d10c      	bne.n	80040ce <HAL_RCC_OscConfig+0x982>
 80040b4:	4b75      	ldr	r3, [pc, #468]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a74      	ldr	r2, [pc, #464]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040ba:	f043 0304 	orr.w	r3, r3, #4
 80040be:	6213      	str	r3, [r2, #32]
 80040c0:	4b72      	ldr	r3, [pc, #456]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a71      	ldr	r2, [pc, #452]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6213      	str	r3, [r2, #32]
 80040cc:	e00b      	b.n	80040e6 <HAL_RCC_OscConfig+0x99a>
 80040ce:	4b6f      	ldr	r3, [pc, #444]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4a6e      	ldr	r2, [pc, #440]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	4b6c      	ldr	r3, [pc, #432]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a6b      	ldr	r2, [pc, #428]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8081 	beq.w	80041fa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7ff f870 	bl	80031dc <HAL_GetTick>
 80040fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7ff f86b 	bl	80031dc <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e365      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
 800411a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800411e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004122:	2202      	movs	r2, #2
 8004124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800412a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004138:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004142:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004146:	2202      	movs	r2, #2
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800414e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800415c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004160:	601a      	str	r2, [r3, #0]
  return result;
 8004162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004166:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800416a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	b2db      	uxtb	r3, r3
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f043 0302 	orr.w	r3, r3, #2
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d102      	bne.n	8004186 <HAL_RCC_OscConfig+0xa3a>
 8004180:	4b42      	ldr	r3, [pc, #264]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	e013      	b.n	80041ae <HAL_RCC_OscConfig+0xa62>
 8004186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800418a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800418e:	2202      	movs	r2, #2
 8004190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004196:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	fa93 f2a3 	rbit	r2, r3
 80041a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041a4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	4b38      	ldr	r3, [pc, #224]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041b6:	2102      	movs	r1, #2
 80041b8:	6011      	str	r1, [r2, #0]
 80041ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041be:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	fa92 f1a2 	rbit	r1, r2
 80041c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041cc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80041d0:	6011      	str	r1, [r2, #0]
  return result;
 80041d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041d6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	fab2 f282 	clz	r2, r2
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	f002 021f 	and.w	r2, r2, #31
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f202 	lsl.w	r2, r1, r2
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d084      	beq.n	8004102 <HAL_RCC_OscConfig+0x9b6>
 80041f8:	e083      	b.n	8004302 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fe ffef 	bl	80031dc <HAL_GetTick>
 80041fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fe ffea 	bl	80031dc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e2e4      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
 800421c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004220:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004224:	2202      	movs	r2, #2
 8004226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800422c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	fa93 f2a3 	rbit	r2, r3
 8004236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800423a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004244:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004248:	2202      	movs	r2, #2
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004250:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	fa93 f2a3 	rbit	r2, r3
 800425a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800425e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004262:	601a      	str	r2, [r3, #0]
  return result;
 8004264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004268:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800426c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d106      	bne.n	8004290 <HAL_RCC_OscConfig+0xb44>
 8004282:	4b02      	ldr	r3, [pc, #8]	@ (800428c <HAL_RCC_OscConfig+0xb40>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	e017      	b.n	80042b8 <HAL_RCC_OscConfig+0xb6c>
 8004288:	40007000 	.word	0x40007000
 800428c:	40021000 	.word	0x40021000
 8004290:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004294:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004298:	2202      	movs	r2, #2
 800429a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042a0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fa93 f2a3 	rbit	r2, r3
 80042aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ae:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	4bb3      	ldr	r3, [pc, #716]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042c0:	2102      	movs	r1, #2
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042c8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	fa92 f1a2 	rbit	r1, r2
 80042d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042d6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80042da:	6011      	str	r1, [r2, #0]
  return result;
 80042dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042e0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	fab2 f282 	clz	r2, r2
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f002 021f 	and.w	r2, r2, #31
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f202 	lsl.w	r2, r1, r2
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d180      	bne.n	8004204 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004302:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b9e      	ldr	r3, [pc, #632]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4a9d      	ldr	r2, [pc, #628]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004314:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800431a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 825e 	beq.w	80047e4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004328:	4b96      	ldr	r3, [pc, #600]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	f000 821f 	beq.w	8004774 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800433a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b02      	cmp	r3, #2
 8004344:	f040 8170 	bne.w	8004628 <HAL_RCC_OscConfig+0xedc>
 8004348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800434c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004350:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800435a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	fa93 f2a3 	rbit	r2, r3
 8004364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004368:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800436c:	601a      	str	r2, [r3, #0]
  return result;
 800436e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004372:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004376:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004382:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	461a      	mov	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe ff25 	bl	80031dc <HAL_GetTick>
 8004392:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004396:	e009      	b.n	80043ac <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe ff20 	bl	80031dc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e21c      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
 80043ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80043d0:	601a      	str	r2, [r3, #0]
  return result;
 80043d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80043da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043dc:	fab3 f383 	clz	r3, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <HAL_RCC_OscConfig+0xcaa>
 80043f0:	4b64      	ldr	r3, [pc, #400]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	e027      	b.n	8004446 <HAL_RCC_OscConfig+0xcfa>
 80043f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80043fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004408:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	fa93 f2a3 	rbit	r2, r3
 8004412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004416:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004420:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004424:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800442e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	fa93 f2a3 	rbit	r2, r3
 8004438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800443c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	4b50      	ldr	r3, [pc, #320]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800444a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800444e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004452:	6011      	str	r1, [r2, #0]
 8004454:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004458:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	fa92 f1a2 	rbit	r1, r2
 8004462:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004466:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800446a:	6011      	str	r1, [r2, #0]
  return result;
 800446c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004470:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f042 0220 	orr.w	r2, r2, #32
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f002 021f 	and.w	r2, r2, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d182      	bne.n	8004398 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004492:	4b3c      	ldr	r3, [pc, #240]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	f023 020f 	bic.w	r2, r3, #15
 800449a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800449e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	4937      	ldr	r1, [pc, #220]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80044ac:	4b35      	ldr	r3, [pc, #212]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80044b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a19      	ldr	r1, [r3, #32]
 80044c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	492d      	ldr	r1, [pc, #180]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
 80044d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	fa93 f2a3 	rbit	r2, r3
 80044f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80044f8:	601a      	str	r2, [r3, #0]
  return result;
 80044fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004502:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800450e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	461a      	mov	r2, r3
 8004516:	2301      	movs	r3, #1
 8004518:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fe fe5f 	bl	80031dc <HAL_GetTick>
 800451e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004522:	e009      	b.n	8004538 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004524:	f7fe fe5a 	bl	80031dc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e156      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
 8004538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800453c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004540:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800454a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	fa93 f2a3 	rbit	r2, r3
 8004554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004558:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800455c:	601a      	str	r2, [r3, #0]
  return result;
 800455e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004562:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004566:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <HAL_RCC_OscConfig+0xe3c>
 800457c:	4b01      	ldr	r3, [pc, #4]	@ (8004584 <HAL_RCC_OscConfig+0xe38>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	e02a      	b.n	80045d8 <HAL_RCC_OscConfig+0xe8c>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800458c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004590:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800459a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fa93 f2a3 	rbit	r2, r3
 80045a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045c0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	fa93 f2a3 	rbit	r2, r3
 80045ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045ce:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	4b86      	ldr	r3, [pc, #536]	@ (80047f0 <HAL_RCC_OscConfig+0x10a4>)
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80045e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045e4:	6011      	str	r1, [r2, #0]
 80045e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	fa92 f1a2 	rbit	r1, r2
 80045f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045f8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80045fc:	6011      	str	r1, [r2, #0]
  return result;
 80045fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004602:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f042 0220 	orr.w	r2, r2, #32
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f002 021f 	and.w	r2, r2, #31
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	f43f af7f 	beq.w	8004524 <HAL_RCC_OscConfig+0xdd8>
 8004626:	e0dd      	b.n	80047e4 <HAL_RCC_OscConfig+0x1098>
 8004628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800462c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004630:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800463a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	fa93 f2a3 	rbit	r2, r3
 8004644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004648:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800464c:	601a      	str	r2, [r3, #0]
  return result;
 800464e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004652:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004656:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004662:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	461a      	mov	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe fdb5 	bl	80031dc <HAL_GetTick>
 8004672:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004676:	e009      	b.n	800468c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe fdb0 	bl	80031dc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0ac      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
 800468c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004690:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800469e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	fa93 f2a3 	rbit	r2, r3
 80046a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046b0:	601a      	str	r2, [r3, #0]
  return result;
 80046b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d102      	bne.n	80046d6 <HAL_RCC_OscConfig+0xf8a>
 80046d0:	4b47      	ldr	r3, [pc, #284]	@ (80047f0 <HAL_RCC_OscConfig+0x10a4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	e027      	b.n	8004726 <HAL_RCC_OscConfig+0xfda>
 80046d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046da:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80046de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046e8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	fa93 f2a3 	rbit	r2, r3
 80046f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046f6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004700:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800470e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	fa93 f2a3 	rbit	r2, r3
 8004718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800471c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <HAL_RCC_OscConfig+0x10a4>)
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800472a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800472e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004732:	6011      	str	r1, [r2, #0]
 8004734:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004738:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	fa92 f1a2 	rbit	r1, r2
 8004742:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004746:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800474a:	6011      	str	r1, [r2, #0]
  return result;
 800474c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004750:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	fab2 f282 	clz	r2, r2
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	f042 0220 	orr.w	r2, r2, #32
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	f002 021f 	and.w	r2, r2, #31
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f202 	lsl.w	r2, r1, r2
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d182      	bne.n	8004678 <HAL_RCC_OscConfig+0xf2c>
 8004772:	e037      	b.n	80047e4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004778:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e02e      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_RCC_OscConfig+0x10a4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004790:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <HAL_RCC_OscConfig+0x10a4>)
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004798:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800479c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80047a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d117      	bne.n	80047e0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80047b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80047b4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80047c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b09e      	sub	sp, #120	@ 0x78
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e162      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b90      	ldr	r3, [pc, #576]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 0207 	bic.w	r2, r3, #7
 8004822:	498b      	ldr	r1, [pc, #556]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b89      	ldr	r3, [pc, #548]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e14a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b82      	ldr	r3, [pc, #520]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	497f      	ldr	r1, [pc, #508]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80dc 	beq.w	8004a20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d13c      	bne.n	80048ea <HAL_RCC_ClockConfig+0xf6>
 8004870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004874:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800487e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <HAL_RCC_ClockConfig+0xa6>
 8004894:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	e00f      	b.n	80048ba <HAL_RCC_ClockConfig+0xc6>
 800489a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800489e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80048a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b6:	4b67      	ldr	r3, [pc, #412]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048c2:	fa92 f2a2 	rbit	r2, r2
 80048c6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048ca:	fab2 f282 	clz	r2, r2
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	f042 0220 	orr.w	r2, r2, #32
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	f002 021f 	and.w	r2, r2, #31
 80048da:	2101      	movs	r1, #1
 80048dc:	fa01 f202 	lsl.w	r2, r1, r2
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d17b      	bne.n	80049de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0f3      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d13c      	bne.n	800496c <HAL_RCC_ClockConfig+0x178>
 80048f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d102      	bne.n	800491c <HAL_RCC_ClockConfig+0x128>
 8004916:	4b4f      	ldr	r3, [pc, #316]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	e00f      	b.n	800493c <HAL_RCC_ClockConfig+0x148>
 800491c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800492e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004938:	4b46      	ldr	r3, [pc, #280]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004940:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004944:	fa92 f2a2 	rbit	r2, r2
 8004948:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800494a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800494c:	fab2 f282 	clz	r2, r2
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	f042 0220 	orr.w	r2, r2, #32
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f002 021f 	and.w	r2, r2, #31
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d13a      	bne.n	80049de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b2      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
 800496c:	2302      	movs	r3, #2
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <HAL_RCC_ClockConfig+0x1a0>
 800498e:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	e00d      	b.n	80049b0 <HAL_RCC_ClockConfig+0x1bc>
 8004994:	2302      	movs	r3, #2
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a0:	2302      	movs	r3, #2
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	4b29      	ldr	r3, [pc, #164]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	2202      	movs	r2, #2
 80049b2:	61ba      	str	r2, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	fa92 f2a2 	rbit	r2, r2
 80049ba:	617a      	str	r2, [r7, #20]
  return result;
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	fab2 f282 	clz	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f042 0220 	orr.w	r2, r2, #32
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f002 021f 	and.w	r2, r2, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f202 	lsl.w	r2, r1, r2
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e079      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	491a      	ldr	r1, [pc, #104]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fe fbf4 	bl	80031dc <HAL_GetTick>
 80049f4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fe fbf0 	bl	80031dc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e061      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d214      	bcs.n	8004a58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	4906      	ldr	r1, [pc, #24]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e040      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a64:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	491a      	ldr	r1, [pc, #104]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a82:	4b16      	ldr	r3, [pc, #88]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4912      	ldr	r1, [pc, #72]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a96:	f000 f829 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa4:	22f0      	movs	r2, #240	@ 0xf0
 8004aa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	fa92 f2a2 	rbit	r2, r2
 8004aae:	60fa      	str	r2, [r7, #12]
  return result;
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	40d3      	lsrs	r3, r2
 8004aba:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2ec>)
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
 8004abe:	fa21 f303 	lsr.w	r3, r1, r3
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <HAL_RCC_ClockConfig+0x2f4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fb42 	bl	8003154 <HAL_InitTick>
  
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3778      	adds	r7, #120	@ 0x78
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	08006968 	.word	0x08006968
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x30>
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x36>
 8004b1a:	e029      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b1e:	613b      	str	r3, [r7, #16]
      break;
 8004b20:	e029      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0c9b      	lsrs	r3, r3, #18
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	4a18      	ldr	r2, [pc, #96]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b2c:	5cd3      	ldrb	r3, [r2, r3]
 8004b2e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b30:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b48:	4a0f      	ldr	r2, [pc, #60]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e007      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	613b      	str	r3, [r7, #16]
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b72:	613b      	str	r3, [r7, #16]
      break;
 8004b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b76:	693b      	ldr	r3, [r7, #16]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40021000 	.word	0x40021000
 8004b88:	007a1200 	.word	0x007a1200
 8004b8c:	08006980 	.word	0x08006980
 8004b90:	08006990 	.word	0x08006990

08004b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000000 	.word	0x20000000

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bb2:	f7ff ffef 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bc0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004bc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	fa92 f2a2 	rbit	r2, r2
 8004bcc:	603a      	str	r2, [r7, #0]
  return result;
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	fab2 f282 	clz	r2, r2
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	40d3      	lsrs	r3, r2
 8004bd8:	4a04      	ldr	r2, [pc, #16]	@ (8004bec <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bda:	5cd3      	ldrb	r3, [r2, r3]
 8004bdc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	08006978 	.word	0x08006978

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bf6:	f7ff ffcd 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004c04:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004c08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	fa92 f2a2 	rbit	r2, r2
 8004c10:	603a      	str	r2, [r7, #0]
  return result;
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	fab2 f282 	clz	r2, r2
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	40d3      	lsrs	r3, r2
 8004c1c:	4a04      	ldr	r2, [pc, #16]	@ (8004c30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	08006978 	.word	0x08006978

08004c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b092      	sub	sp, #72	@ 0x48
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80d4 	beq.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c58:	4b4e      	ldr	r3, [pc, #312]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10e      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4a4a      	ldr	r2, [pc, #296]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	61d3      	str	r3, [r2, #28]
 8004c70:	4b48      	ldr	r3, [pc, #288]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b45      	ldr	r3, [pc, #276]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a41      	ldr	r2, [pc, #260]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fe fa9f 	bl	80031dc <HAL_GetTick>
 8004c9e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fe fa9b 	bl	80031dc <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b64      	cmp	r3, #100	@ 0x64
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1d6      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b38      	ldr	r3, [pc, #224]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc0:	4b34      	ldr	r3, [pc, #208]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8084 	beq.w	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d07c      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	fa93 f3a3 	rbit	r3, r3
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d32:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04b      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d42:	f7fe fa4b 	bl	80031dc <HAL_GetTick>
 8004d46:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	e00a      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fe fa47 	bl	80031dc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e180      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d60:	2302      	movs	r3, #2
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	623b      	str	r3, [r7, #32]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	61fb      	str	r3, [r7, #28]
  return result;
 8004d78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f043 0302 	orr.w	r3, r3, #2
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d108      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d8e:	4b01      	ldr	r3, [pc, #4]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	e00d      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	10908100 	.word	0x10908100
 8004da0:	2302      	movs	r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	4b9a      	ldr	r3, [pc, #616]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	2202      	movs	r2, #2
 8004db2:	613a      	str	r2, [r7, #16]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	60fa      	str	r2, [r7, #12]
  return result;
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	fab2 f282 	clz	r2, r2
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	f002 021f 	and.w	r2, r2, #31
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0b7      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dda:	4b8f      	ldr	r3, [pc, #572]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	498c      	ldr	r1, [pc, #560]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df4:	4b88      	ldr	r3, [pc, #544]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	4a87      	ldr	r2, [pc, #540]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0c:	4b82      	ldr	r3, [pc, #520]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	f023 0203 	bic.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	497f      	ldr	r1, [pc, #508]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4978      	ldr	r1, [pc, #480]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e48:	4b73      	ldr	r3, [pc, #460]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4970      	ldr	r1, [pc, #448]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e66:	4b6c      	ldr	r3, [pc, #432]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4969      	ldr	r1, [pc, #420]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e84:	4b64      	ldr	r3, [pc, #400]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e90:	4961      	ldr	r1, [pc, #388]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	f023 0220 	bic.w	r2, r3, #32
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	495a      	ldr	r1, [pc, #360]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ec0:	4b55      	ldr	r3, [pc, #340]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	4952      	ldr	r1, [pc, #328]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ede:	4b4e      	ldr	r3, [pc, #312]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	494b      	ldr	r1, [pc, #300]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004efc:	4b46      	ldr	r3, [pc, #280]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	4943      	ldr	r1, [pc, #268]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	493c      	ldr	r1, [pc, #240]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f38:	4b37      	ldr	r3, [pc, #220]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	4934      	ldr	r1, [pc, #208]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f56:	4b30      	ldr	r3, [pc, #192]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	492d      	ldr	r1, [pc, #180]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f74:	4b28      	ldr	r3, [pc, #160]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f80:	4925      	ldr	r1, [pc, #148]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f92:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	491e      	ldr	r1, [pc, #120]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004fb0:	4b19      	ldr	r3, [pc, #100]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	4916      	ldr	r1, [pc, #88]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004fce:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	490f      	ldr	r1, [pc, #60]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff8:	4907      	ldr	r1, [pc, #28]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800500a:	4b03      	ldr	r3, [pc, #12]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	e002      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501e:	4913      	ldr	r1, [pc, #76]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005020:	4313      	orrs	r3, r2
 8005022:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005030:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503c:	490b      	ldr	r1, [pc, #44]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800503e:	4313      	orrs	r3, r2
 8005040:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800504e:	4b07      	ldr	r3, [pc, #28]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505a:	4904      	ldr	r1, [pc, #16]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800505c:	4313      	orrs	r3, r2
 800505e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3748      	adds	r7, #72	@ 0x48
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e040      	b.n	8005104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fd ffa8 	bl	8002fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	@ 0x24
 800509c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fb4e 	bl	8005758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f977 	bl	80053b0 <UART_SetConfig>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e01b      	b.n	8005104 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fbcd 	bl	800589c <UART_CheckIdleState>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005120:	2b20      	cmp	r3, #32
 8005122:	d177      	bne.n	8005214 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_UART_Transmit+0x24>
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e070      	b.n	8005216 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2221      	movs	r2, #33	@ 0x21
 8005140:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005142:	f7fe f84b 	bl	80031dc <HAL_GetTick>
 8005146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005160:	d108      	bne.n	8005174 <HAL_UART_Transmit+0x68>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e003      	b.n	800517c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800517c:	e02f      	b.n	80051de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fc2f 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e03b      	b.n	8005216 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	881a      	ldrh	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b0:	b292      	uxth	r2, r2
 80051b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	3302      	adds	r3, #2
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e007      	b.n	80051cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1c9      	bne.n	800517e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	@ 0x40
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fbf9 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e005      	b.n	8005216 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08a      	sub	sp, #40	@ 0x28
 8005222:	af02      	add	r7, sp, #8
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005234:	2b20      	cmp	r3, #32
 8005236:	f040 80b6 	bne.w	80053a6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_UART_Receive+0x28>
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0ae      	b.n	80053a8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2222      	movs	r2, #34	@ 0x22
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005260:	f7fd ffbc 	bl	80031dc <HAL_GetTick>
 8005264:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527e:	d10e      	bne.n	800529e <HAL_UART_Receive+0x80>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_UART_Receive+0x76>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800528e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005292:	e02d      	b.n	80052f0 <HAL_UART_Receive+0xd2>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	22ff      	movs	r2, #255	@ 0xff
 8005298:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800529c:	e028      	b.n	80052f0 <HAL_UART_Receive+0xd2>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10d      	bne.n	80052c2 <HAL_UART_Receive+0xa4>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <HAL_UART_Receive+0x9a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	22ff      	movs	r2, #255	@ 0xff
 80052b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052b6:	e01b      	b.n	80052f0 <HAL_UART_Receive+0xd2>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	227f      	movs	r2, #127	@ 0x7f
 80052bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052c0:	e016      	b.n	80052f0 <HAL_UART_Receive+0xd2>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ca:	d10d      	bne.n	80052e8 <HAL_UART_Receive+0xca>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <HAL_UART_Receive+0xc0>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	227f      	movs	r2, #127	@ 0x7f
 80052d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052dc:	e008      	b.n	80052f0 <HAL_UART_Receive+0xd2>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	223f      	movs	r2, #63	@ 0x3f
 80052e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052e6:	e003      	b.n	80052f0 <HAL_UART_Receive+0xd2>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005300:	d108      	bne.n	8005314 <HAL_UART_Receive+0xf6>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e003      	b.n	800531c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800531c:	e037      	b.n	800538e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2200      	movs	r2, #0
 8005326:	2120      	movs	r1, #32
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fb5f 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e033      	b.n	80053a8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10c      	bne.n	8005360 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800534c:	b29a      	uxth	r2, r3
 800534e:	8a7b      	ldrh	r3, [r7, #18]
 8005350:	4013      	ands	r3, r2
 8005352:	b29a      	uxth	r2, r3
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	3302      	adds	r3, #2
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e00d      	b.n	800537c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005366:	b29b      	uxth	r3, r3
 8005368:	b2da      	uxtb	r2, r3
 800536a:	8a7b      	ldrh	r3, [r7, #18]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	4013      	ands	r3, r2
 8005370:	b2da      	uxtb	r2, r3
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3301      	adds	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1c1      	bne.n	800531e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b92      	ldr	r3, [pc, #584]	@ (8005624 <UART_SetConfig+0x274>)
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a80      	ldr	r2, [pc, #512]	@ (8005628 <UART_SetConfig+0x278>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d120      	bne.n	800546e <UART_SetConfig+0xbe>
 800542c:	4b7f      	ldr	r3, [pc, #508]	@ (800562c <UART_SetConfig+0x27c>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d817      	bhi.n	8005468 <UART_SetConfig+0xb8>
 8005438:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <UART_SetConfig+0x90>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005451 	.word	0x08005451
 8005444:	0800545d 	.word	0x0800545d
 8005448:	08005463 	.word	0x08005463
 800544c:	08005457 	.word	0x08005457
 8005450:	2301      	movs	r3, #1
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e0b5      	b.n	80055c2 <UART_SetConfig+0x212>
 8005456:	2302      	movs	r3, #2
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0b2      	b.n	80055c2 <UART_SetConfig+0x212>
 800545c:	2304      	movs	r3, #4
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e0af      	b.n	80055c2 <UART_SetConfig+0x212>
 8005462:	2308      	movs	r3, #8
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e0ac      	b.n	80055c2 <UART_SetConfig+0x212>
 8005468:	2310      	movs	r3, #16
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e0a9      	b.n	80055c2 <UART_SetConfig+0x212>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6f      	ldr	r2, [pc, #444]	@ (8005630 <UART_SetConfig+0x280>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d124      	bne.n	80054c2 <UART_SetConfig+0x112>
 8005478:	4b6c      	ldr	r3, [pc, #432]	@ (800562c <UART_SetConfig+0x27c>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005480:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005484:	d011      	beq.n	80054aa <UART_SetConfig+0xfa>
 8005486:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800548a:	d817      	bhi.n	80054bc <UART_SetConfig+0x10c>
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005490:	d011      	beq.n	80054b6 <UART_SetConfig+0x106>
 8005492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005496:	d811      	bhi.n	80054bc <UART_SetConfig+0x10c>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <UART_SetConfig+0xf4>
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d006      	beq.n	80054b0 <UART_SetConfig+0x100>
 80054a2:	e00b      	b.n	80054bc <UART_SetConfig+0x10c>
 80054a4:	2300      	movs	r3, #0
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e08b      	b.n	80055c2 <UART_SetConfig+0x212>
 80054aa:	2302      	movs	r3, #2
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e088      	b.n	80055c2 <UART_SetConfig+0x212>
 80054b0:	2304      	movs	r3, #4
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e085      	b.n	80055c2 <UART_SetConfig+0x212>
 80054b6:	2308      	movs	r3, #8
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e082      	b.n	80055c2 <UART_SetConfig+0x212>
 80054bc:	2310      	movs	r3, #16
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e07f      	b.n	80055c2 <UART_SetConfig+0x212>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005634 <UART_SetConfig+0x284>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d124      	bne.n	8005516 <UART_SetConfig+0x166>
 80054cc:	4b57      	ldr	r3, [pc, #348]	@ (800562c <UART_SetConfig+0x27c>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80054d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054d8:	d011      	beq.n	80054fe <UART_SetConfig+0x14e>
 80054da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054de:	d817      	bhi.n	8005510 <UART_SetConfig+0x160>
 80054e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054e4:	d011      	beq.n	800550a <UART_SetConfig+0x15a>
 80054e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054ea:	d811      	bhi.n	8005510 <UART_SetConfig+0x160>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <UART_SetConfig+0x148>
 80054f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054f4:	d006      	beq.n	8005504 <UART_SetConfig+0x154>
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x160>
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e061      	b.n	80055c2 <UART_SetConfig+0x212>
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e05e      	b.n	80055c2 <UART_SetConfig+0x212>
 8005504:	2304      	movs	r3, #4
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e05b      	b.n	80055c2 <UART_SetConfig+0x212>
 800550a:	2308      	movs	r3, #8
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e058      	b.n	80055c2 <UART_SetConfig+0x212>
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e055      	b.n	80055c2 <UART_SetConfig+0x212>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a47      	ldr	r2, [pc, #284]	@ (8005638 <UART_SetConfig+0x288>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d124      	bne.n	800556a <UART_SetConfig+0x1ba>
 8005520:	4b42      	ldr	r3, [pc, #264]	@ (800562c <UART_SetConfig+0x27c>)
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005528:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800552c:	d011      	beq.n	8005552 <UART_SetConfig+0x1a2>
 800552e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005532:	d817      	bhi.n	8005564 <UART_SetConfig+0x1b4>
 8005534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005538:	d011      	beq.n	800555e <UART_SetConfig+0x1ae>
 800553a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553e:	d811      	bhi.n	8005564 <UART_SetConfig+0x1b4>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <UART_SetConfig+0x19c>
 8005544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005548:	d006      	beq.n	8005558 <UART_SetConfig+0x1a8>
 800554a:	e00b      	b.n	8005564 <UART_SetConfig+0x1b4>
 800554c:	2300      	movs	r3, #0
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e037      	b.n	80055c2 <UART_SetConfig+0x212>
 8005552:	2302      	movs	r3, #2
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e034      	b.n	80055c2 <UART_SetConfig+0x212>
 8005558:	2304      	movs	r3, #4
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e031      	b.n	80055c2 <UART_SetConfig+0x212>
 800555e:	2308      	movs	r3, #8
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e02e      	b.n	80055c2 <UART_SetConfig+0x212>
 8005564:	2310      	movs	r3, #16
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e02b      	b.n	80055c2 <UART_SetConfig+0x212>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a33      	ldr	r2, [pc, #204]	@ (800563c <UART_SetConfig+0x28c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d124      	bne.n	80055be <UART_SetConfig+0x20e>
 8005574:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <UART_SetConfig+0x27c>)
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800557c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005580:	d011      	beq.n	80055a6 <UART_SetConfig+0x1f6>
 8005582:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005586:	d817      	bhi.n	80055b8 <UART_SetConfig+0x208>
 8005588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800558c:	d011      	beq.n	80055b2 <UART_SetConfig+0x202>
 800558e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005592:	d811      	bhi.n	80055b8 <UART_SetConfig+0x208>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <UART_SetConfig+0x1f0>
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x1fc>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x208>
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e00d      	b.n	80055c2 <UART_SetConfig+0x212>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e00a      	b.n	80055c2 <UART_SetConfig+0x212>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e007      	b.n	80055c2 <UART_SetConfig+0x212>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e004      	b.n	80055c2 <UART_SetConfig+0x212>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e001      	b.n	80055c2 <UART_SetConfig+0x212>
 80055be:	2310      	movs	r3, #16
 80055c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ca:	d16b      	bne.n	80056a4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d838      	bhi.n	8005644 <UART_SetConfig+0x294>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0x228>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005645 	.word	0x08005645
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005645 	.word	0x08005645
 80055f4:	08005645 	.word	0x08005645
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7ff fad6 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8005600:	61b8      	str	r0, [r7, #24]
        break;
 8005602:	e024      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7ff faf4 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8005608:	61b8      	str	r0, [r7, #24]
        break;
 800560a:	e020      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <UART_SetConfig+0x290>)
 800560e:	61bb      	str	r3, [r7, #24]
        break;
 8005610:	e01d      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7ff fa6b 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8005616:	61b8      	str	r0, [r7, #24]
        break;
 8005618:	e019      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	e015      	b.n	800564e <UART_SetConfig+0x29e>
 8005622:	bf00      	nop
 8005624:	efff69f3 	.word	0xefff69f3
 8005628:	40013800 	.word	0x40013800
 800562c:	40021000 	.word	0x40021000
 8005630:	40004400 	.word	0x40004400
 8005634:	40004800 	.word	0x40004800
 8005638:	40004c00 	.word	0x40004c00
 800563c:	40005000 	.word	0x40005000
 8005640:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	77bb      	strb	r3, [r7, #30]
        break;
 800564c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d073      	beq.n	800573c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	005a      	lsls	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	441a      	add	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b0f      	cmp	r3, #15
 800566e:	d916      	bls.n	800569e <UART_SetConfig+0x2ee>
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005676:	d212      	bcs.n	800569e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f023 030f 	bic.w	r3, r3, #15
 8005680:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	b29b      	uxth	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	b29a      	uxth	r2, r3
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	4313      	orrs	r3, r2
 8005692:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	89fa      	ldrh	r2, [r7, #14]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e04e      	b.n	800573c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	77bb      	strb	r3, [r7, #30]
 80056a2:	e04b      	b.n	800573c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a4:	7ffb      	ldrb	r3, [r7, #31]
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d827      	bhi.n	80056fa <UART_SetConfig+0x34a>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x300>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7ff fa6a 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e013      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7ff fa88 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <UART_SetConfig+0x3a4>)
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e00c      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7ff f9ff 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 80056ee:	61b8      	str	r0, [r7, #24]
        break;
 80056f0:	e008      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77bb      	strb	r3, [r7, #30]
        break;
 8005702:	bf00      	nop
    }

    if (pclk != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d018      	beq.n	800573c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	085a      	lsrs	r2, r3, #1
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	441a      	add	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d909      	bls.n	8005738 <UART_SetConfig+0x388>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572a:	d205      	bcs.n	8005738 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e001      	b.n	800573c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005748:	7fbb      	ldrb	r3, [r7, #30]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	007a1200 	.word	0x007a1200

08005758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01a      	beq.n	800586e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005856:	d10a      	bne.n	800586e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b098      	sub	sp, #96	@ 0x60
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ac:	f7fd fc96 	bl	80031dc <HAL_GetTick>
 80058b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d12e      	bne.n	800591e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c8:	2200      	movs	r2, #0
 80058ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f88c 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d021      	beq.n	800591e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e062      	b.n	80059e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d149      	bne.n	80059c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f856 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d03c      	beq.n	80059c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	623b      	str	r3, [r7, #32]
   return(result);
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30
 8005966:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800596a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	60fb      	str	r3, [r7, #12]
   return(result);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005998:	61fa      	str	r2, [r7, #28]
 800599a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	617b      	str	r3, [r7, #20]
   return(result);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e011      	b.n	80059e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3758      	adds	r7, #88	@ 0x58
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fc:	e04f      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d04b      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a06:	f7fd fbe9 	bl	80031dc <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e04e      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d037      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b80      	cmp	r3, #128	@ 0x80
 8005a32:	d034      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d031      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d110      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f838 	bl	8005ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e029      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a78:	d111      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f81e 	bl	8005ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e00f      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d0a0      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b095      	sub	sp, #84	@ 0x54
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d118      	bne.n	8005b6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6979      	ldr	r1, [r7, #20]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	613b      	str	r3, [r7, #16]
   return(result);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b82:	bf00      	nop
 8005b84:	3754      	adds	r7, #84	@ 0x54
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <_ZdlPvj>:
 8005b8e:	f000 bbc7 	b.w	8006320 <_ZdlPv>

08005b92 <_Znwj>:
 8005b92:	2801      	cmp	r0, #1
 8005b94:	bf38      	it	cc
 8005b96:	2001      	movcc	r0, #1
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 fbd1 	bl	8006344 <malloc>
 8005ba2:	b100      	cbz	r0, 8005ba6 <_Znwj+0x14>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	f000 fbbd 	bl	8006324 <_ZSt15get_new_handlerv>
 8005baa:	b908      	cbnz	r0, 8005bb0 <_Znwj+0x1e>
 8005bac:	f000 fbc2 	bl	8006334 <abort>
 8005bb0:	4780      	blx	r0
 8005bb2:	e7f3      	b.n	8005b9c <_Znwj+0xa>

08005bb4 <_ZNSaIcEC1Ev>:
 8005bb4:	4770      	bx	lr

08005bb6 <_ZNSaIcEC1ERKS_>:
 8005bb6:	4770      	bx	lr

08005bb8 <_ZNSaIcED1Ev>:
 8005bb8:	4770      	bx	lr

08005bba <_ZSt17__throw_bad_allocv>:
 8005bba:	b508      	push	{r3, lr}
 8005bbc:	f000 fbba 	bl	8006334 <abort>

08005bc0 <_ZSt28__throw_bad_array_new_lengthv>:
 8005bc0:	b508      	push	{r3, lr}
 8005bc2:	f000 fbb7 	bl	8006334 <abort>

08005bc6 <_ZSt19__throw_logic_errorPKc>:
 8005bc6:	b508      	push	{r3, lr}
 8005bc8:	f000 fbb4 	bl	8006334 <abort>

08005bcc <_ZSt20__throw_length_errorPKc>:
 8005bcc:	b508      	push	{r3, lr}
 8005bce:	f000 fbb1 	bl	8006334 <abort>

08005bd2 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8005bd2:	b40f      	push	{r0, r1, r2, r3}
 8005bd4:	b508      	push	{r3, lr}
 8005bd6:	f000 fbad 	bl	8006334 <abort>

08005bda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8005bda:	b10a      	cbz	r2, 8005be0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8005bdc:	f000 bd22 	b.w	8006624 <memcpy>
 8005be0:	4770      	bx	lr

08005be2 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8005be2:	4613      	mov	r3, r2
 8005be4:	460a      	mov	r2, r1
 8005be6:	b111      	cbz	r1, 8005bee <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8005be8:	7819      	ldrb	r1, [r3, #0]
 8005bea:	f7fa baf9 	b.w	80001e0 <memchr>
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4770      	bx	lr

08005bf2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8005bf2:	f850 3b08 	ldr.w	r3, [r0], #8
 8005bf6:	1a1b      	subs	r3, r3, r0
 8005bf8:	4258      	negs	r0, r3
 8005bfa:	4158      	adcs	r0, r3
 8005bfc:	4770      	bx	lr
	...

08005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005c00:	b508      	push	{r3, lr}
 8005c02:	680b      	ldr	r3, [r1, #0]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c08:	d302      	bcc.n	8005c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005c0a:	480d      	ldr	r0, [pc, #52]	@ (8005c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005c0c:	f7ff ffde 	bl	8005bcc <_ZSt20__throw_length_errorPKc>
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d90b      	bls.n	8005c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005c14:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005c18:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005c1c:	d206      	bcs.n	8005c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005c1e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005c22:	bf2a      	itet	cs
 8005c24:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8005c28:	6008      	strcc	r0, [r1, #0]
 8005c2a:	600b      	strcs	r3, [r1, #0]
 8005c2c:	6808      	ldr	r0, [r1, #0]
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d501      	bpl.n	8005c36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005c32:	f7ff ffc2 	bl	8005bba <_ZSt17__throw_bad_allocv>
 8005c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c3a:	f7ff bfaa 	b.w	8005b92 <_Znwj>
 8005c3e:	bf00      	nop
 8005c40:	080069a0 	.word	0x080069a0

08005c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	4604      	mov	r4, r0
 8005c48:	f7ff ffd3 	bl	8005bf2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005c4c:	b920      	cbnz	r0, 8005c58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c54:	f000 bb64 	b.w	8006320 <_ZdlPv>
 8005c58:	bd10      	pop	{r4, pc}
	...

08005c5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8005c5c:	b508      	push	{r3, lr}
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4298      	cmp	r0, r3
 8005c66:	4611      	mov	r1, r2
 8005c68:	d903      	bls.n	8005c72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4801      	ldr	r0, [pc, #4]	@ (8005c74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8005c6e:	f7ff ffb0 	bl	8005bd2 <_ZSt24__throw_out_of_range_fmtPKcz>
 8005c72:	bd08      	pop	{r3, pc}
 8005c74:	080069b8 	.word	0x080069b8

08005c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005c78:	6840      	ldr	r0, [r0, #4]
 8005c7a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005c7e:	3901      	subs	r1, #1
 8005c80:	1a09      	subs	r1, r1, r0
 8005c82:	4291      	cmp	r1, r2
 8005c84:	b508      	push	{r3, lr}
 8005c86:	d202      	bcs.n	8005c8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff9f 	bl	8005bcc <_ZSt20__throw_length_errorPKc>
 8005c8e:	bd08      	pop	{r3, pc}

08005c90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8005c90:	6803      	ldr	r3, [r0, #0]
 8005c92:	428b      	cmp	r3, r1
 8005c94:	d806      	bhi.n	8005ca4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8005c96:	6842      	ldr	r2, [r0, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	bf94      	ite	ls
 8005c9e:	2000      	movls	r0, #0
 8005ca0:	2001      	movhi	r0, #1
 8005ca2:	4770      	bx	lr
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	4770      	bx	lr

08005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005ca8:	2a01      	cmp	r2, #1
 8005caa:	b410      	push	{r4}
 8005cac:	d104      	bne.n	8005cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8005cae:	780a      	ldrb	r2, [r1, #0]
 8005cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb4:	7002      	strb	r2, [r0, #0]
 8005cb6:	4770      	bx	lr
 8005cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cbc:	f7ff bf8d 	b.w	8005bda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08005cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8005cc0:	2a01      	cmp	r2, #1
 8005cc2:	b430      	push	{r4, r5}
 8005cc4:	d103      	bne.n	8005cce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8005cc6:	780b      	ldrb	r3, [r1, #0]
 8005cc8:	7003      	strb	r3, [r0, #0]
 8005cca:	bc30      	pop	{r4, r5}
 8005ccc:	4770      	bx	lr
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	d0fb      	beq.n	8005cca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8005cd2:	bc30      	pop	{r4, r5}
 8005cd4:	f000 bc04 	b.w	80064e0 <memmove>

08005cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8005cd8:	460b      	mov	r3, r1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	b410      	push	{r4}
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	d103      	bne.n	8005cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8005ce4:	7022      	strb	r2, [r4, #0]
 8005ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0fa      	beq.n	8005ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8005cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f000 bc0d 	b.w	8006514 <memset>

08005cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8005cfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cfc:	290f      	cmp	r1, #15
 8005cfe:	4604      	mov	r4, r0
 8005d00:	9101      	str	r1, [sp, #4]
 8005d02:	4615      	mov	r5, r2
 8005d04:	d906      	bls.n	8005d14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8005d06:	2200      	movs	r2, #0
 8005d08:	a901      	add	r1, sp, #4
 8005d0a:	f7ff ff79 	bl	8005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	6020      	str	r0, [r4, #0]
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	9901      	ldr	r1, [sp, #4]
 8005d16:	b119      	cbz	r1, 8005d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	462a      	mov	r2, r5
 8005d1c:	f7ff ffdc 	bl	8005cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	6063      	str	r3, [r4, #4]
 8005d26:	2100      	movs	r1, #0
 8005d28:	54d1      	strb	r1, [r2, r3]
 8005d2a:	b003      	add	sp, #12
 8005d2c:	bd30      	pop	{r4, r5, pc}

08005d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8005d2e:	b508      	push	{r3, lr}
 8005d30:	1a52      	subs	r2, r2, r1
 8005d32:	f7ff ffb9 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005d36:	bd08      	pop	{r3, pc}

08005d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005d38:	b508      	push	{r3, lr}
 8005d3a:	1a52      	subs	r2, r2, r1
 8005d3c:	f7ff ffb4 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005d40:	bd08      	pop	{r3, pc}

08005d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005d42:	f100 0208 	add.w	r2, r0, #8
 8005d46:	6002      	str	r2, [r0, #0]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6042      	str	r2, [r0, #4]
 8005d4c:	7202      	strb	r2, [r0, #8]
 8005d4e:	4770      	bx	lr

08005d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 8005d50:	f100 0208 	add.w	r2, r0, #8
 8005d54:	6002      	str	r2, [r0, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	6042      	str	r2, [r0, #4]
 8005d5a:	7202      	strb	r2, [r0, #8]
 8005d5c:	4770      	bx	lr

08005d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	f100 0308 	add.w	r3, r0, #8
 8005d64:	4604      	mov	r4, r0
 8005d66:	6003      	str	r3, [r0, #0]
 8005d68:	f7ff ffc7 	bl	8005cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	bd10      	pop	{r4, pc}

08005d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	f100 0708 	add.w	r7, r0, #8
 8005d76:	6007      	str	r7, [r0, #0]
 8005d78:	4605      	mov	r5, r0
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	f7ff ff38 	bl	8005bf2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005d82:	f104 0608 	add.w	r6, r4, #8
 8005d86:	6862      	ldr	r2, [r4, #4]
 8005d88:	b160      	cbz	r0, 8005da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f7ff ff23 	bl	8005bda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	606b      	str	r3, [r5, #4]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	7223      	strb	r3, [r4, #8]
 8005d9c:	6026      	str	r6, [r4, #0]
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	4628      	mov	r0, r5
 8005da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	60ab      	str	r3, [r5, #8]
 8005dac:	e7f2      	b.n	8005d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08005dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005dae:	b510      	push	{r4, lr}
 8005db0:	4604      	mov	r4, r0
 8005db2:	f7ff ff47 	bl	8005c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005db6:	4620      	mov	r0, r4
 8005db8:	bd10      	pop	{r4, pc}

08005dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8005dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	f7ff ff17 	bl	8005bf2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff ff13 	bl	8005bf2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005dcc:	b190      	cbz	r0, 8005df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8005dce:	42a5      	cmp	r5, r4
 8005dd0:	d00a      	beq.n	8005de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8005dd2:	6862      	ldr	r2, [r4, #4]
 8005dd4:	b11a      	cbz	r2, 8005dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8005dd6:	6821      	ldr	r1, [r4, #0]
 8005dd8:	6828      	ldr	r0, [r5, #0]
 8005dda:	f7ff ff65 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005dde:	6863      	ldr	r3, [r4, #4]
 8005de0:	682a      	ldr	r2, [r5, #0]
 8005de2:	606b      	str	r3, [r5, #4]
 8005de4:	2100      	movs	r1, #0
 8005de6:	54d1      	strb	r1, [r2, r3]
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	2300      	movs	r3, #0
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	7013      	strb	r3, [r2, #0]
 8005df0:	4628      	mov	r0, r5
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df4:	b90e      	cbnz	r6, 8005dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8005df6:	6828      	ldr	r0, [r5, #0]
 8005df8:	68af      	ldr	r7, [r5, #8]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	606b      	str	r3, [r5, #4]
 8005e02:	68a3      	ldr	r3, [r4, #8]
 8005e04:	60ab      	str	r3, [r5, #8]
 8005e06:	b110      	cbz	r0, 8005e0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8005e08:	6020      	str	r0, [r4, #0]
 8005e0a:	60a7      	str	r7, [r4, #8]
 8005e0c:	e7ec      	b.n	8005de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8005e0e:	f104 0308 	add.w	r3, r4, #8
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	e7e8      	b.n	8005de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08005e16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8005e16:	6840      	ldr	r0, [r0, #4]
 8005e18:	4770      	bx	lr

08005e1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8005e1a:	6840      	ldr	r0, [r0, #4]
 8005e1c:	4770      	bx	lr

08005e1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	4604      	mov	r4, r0
 8005e22:	f7ff fee6 	bl	8005bf2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005e26:	b908      	cbnz	r0, 8005e2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8005e28:	68a0      	ldr	r0, [r4, #8]
 8005e2a:	bd10      	pop	{r4, pc}
 8005e2c:	200f      	movs	r0, #15
 8005e2e:	e7fc      	b.n	8005e2a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08005e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8005e30:	4288      	cmp	r0, r1
 8005e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e34:	4604      	mov	r4, r0
 8005e36:	460e      	mov	r6, r1
 8005e38:	d01d      	beq.n	8005e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 8005e3a:	684d      	ldr	r5, [r1, #4]
 8005e3c:	f7ff ffef 	bl	8005e1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8005e40:	42a8      	cmp	r0, r5
 8005e42:	4602      	mov	r2, r0
 8005e44:	d211      	bcs.n	8005e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8005e46:	a901      	add	r1, sp, #4
 8005e48:	4620      	mov	r0, r4
 8005e4a:	9501      	str	r5, [sp, #4]
 8005e4c:	f7ff fed8 	bl	8005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005e50:	4607      	mov	r7, r0
 8005e52:	4620      	mov	r0, r4
 8005e54:	f7ff fef6 	bl	8005c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	6027      	str	r7, [r4, #0]
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	6831      	ldr	r1, [r6, #0]
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	462a      	mov	r2, r5
 8005e64:	f7ff ff20 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005e68:	e001      	b.n	8005e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	d1f7      	bne.n	8005e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	6065      	str	r5, [r4, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	555a      	strb	r2, [r3, r5]
 8005e76:	b003      	add	sp, #12
 8005e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	f7ff ffd7 	bl	8005e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8005e82:	4620      	mov	r0, r4
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005e86:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005e8c:	461f      	mov	r7, r3
 8005e8e:	6843      	ldr	r3, [r0, #4]
 8005e90:	eb01 0802 	add.w	r8, r1, r2
 8005e94:	1ab2      	subs	r2, r6, r2
 8005e96:	441a      	add	r2, r3
 8005e98:	4604      	mov	r4, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	eba3 0908 	sub.w	r9, r3, r8
 8005ea0:	9201      	str	r2, [sp, #4]
 8005ea2:	f7ff ffbc 	bl	8005e1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8005ea6:	a901      	add	r1, sp, #4
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff fea8 	bl	8005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	b11d      	cbz	r5, 8005ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8005eb4:	6821      	ldr	r1, [r4, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	f7ff fef6 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ebc:	b137      	cbz	r7, 8005ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8005ebe:	b12e      	cbz	r6, 8005ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8005ec0:	4632      	mov	r2, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	eb0a 0005 	add.w	r0, sl, r5
 8005ec8:	f7ff feee 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	d007      	beq.n	8005ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8005ed2:	6821      	ldr	r1, [r4, #0]
 8005ed4:	4435      	add	r5, r6
 8005ed6:	464a      	mov	r2, r9
 8005ed8:	4441      	add	r1, r8
 8005eda:	eb0a 0005 	add.w	r0, sl, r5
 8005ede:	f7ff fee3 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7ff feae 	bl	8005c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005ee8:	9b01      	ldr	r3, [sp, #4]
 8005eea:	f8c4 a000 	str.w	sl, [r4]
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	b002      	add	sp, #8
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8005ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ef8:	4604      	mov	r4, r0
 8005efa:	9101      	str	r1, [sp, #4]
 8005efc:	f7ff ff8f 	bl	8005e1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8005f00:	9b01      	ldr	r3, [sp, #4]
 8005f02:	4283      	cmp	r3, r0
 8005f04:	4602      	mov	r2, r0
 8005f06:	d90f      	bls.n	8005f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8005f08:	a901      	add	r1, sp, #4
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7ff fe78 	bl	8005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005f10:	6862      	ldr	r2, [r4, #4]
 8005f12:	6821      	ldr	r1, [r4, #0]
 8005f14:	3201      	adds	r2, #1
 8005f16:	4605      	mov	r5, r0
 8005f18:	f7ff fec6 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7ff fe91 	bl	8005c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005f22:	9b01      	ldr	r3, [sp, #4]
 8005f24:	6025      	str	r5, [r4, #0]
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	b003      	add	sp, #12
 8005f2a:	bd30      	pop	{r4, r5, pc}

08005f2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8005f2c:	6840      	ldr	r0, [r0, #4]
 8005f2e:	fab0 f080 	clz	r0, r0
 8005f32:	0940      	lsrs	r0, r0, #5
 8005f34:	4770      	bx	lr

08005f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8005f36:	6800      	ldr	r0, [r0, #0]
 8005f38:	4408      	add	r0, r1
 8005f3a:	4770      	bx	lr

08005f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>:
 8005f3c:	6842      	ldr	r2, [r0, #4]
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	b508      	push	{r3, lr}
 8005f42:	d302      	bcc.n	8005f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0xe>
 8005f44:	4802      	ldr	r0, [pc, #8]	@ (8005f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0x14>)
 8005f46:	f7ff fe44 	bl	8005bd2 <_ZSt24__throw_out_of_range_fmtPKcz>
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	4408      	add	r0, r1
 8005f4e:	bd08      	pop	{r3, pc}
 8005f50:	080069ef 	.word	0x080069ef

08005f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8005f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8005f5e:	4614      	mov	r4, r2
 8005f60:	4689      	mov	r9, r1
 8005f62:	462a      	mov	r2, r5
 8005f64:	4621      	mov	r1, r4
 8005f66:	461f      	mov	r7, r3
 8005f68:	4b37      	ldr	r3, [pc, #220]	@ (8006048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8005f6a:	f7ff fe85 	bl	8005c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005f6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	eba5 0b04 	sub.w	fp, r5, r4
 8005f78:	4640      	mov	r0, r8
 8005f7a:	eb03 0a0b 	add.w	sl, r3, fp
 8005f7e:	f7ff ff4e 	bl	8005e1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8005f82:	4550      	cmp	r0, sl
 8005f84:	d354      	bcc.n	8006030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8005f86:	f8d8 6000 	ldr.w	r6, [r8]
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	444e      	add	r6, r9
 8005f8e:	4639      	mov	r1, r7
 8005f90:	44a1      	add	r9, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	eba3 0909 	sub.w	r9, r3, r9
 8005f98:	f7ff fe7a 	bl	8005c90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8005f9c:	b180      	cbz	r0, 8005fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8005f9e:	f1b9 0f00 	cmp.w	r9, #0
 8005fa2:	d006      	beq.n	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8005fa4:	42ac      	cmp	r4, r5
 8005fa6:	d004      	beq.n	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8005fa8:	464a      	mov	r2, r9
 8005faa:	1931      	adds	r1, r6, r4
 8005fac:	1970      	adds	r0, r6, r5
 8005fae:	f7ff fe87 	bl	8005cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005fb2:	b315      	cbz	r5, 8005ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff fe75 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005fbe:	e01c      	b.n	8005ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8005fc0:	b135      	cbz	r5, 8005fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8005fc2:	42ac      	cmp	r4, r5
 8005fc4:	d33c      	bcc.n	8006040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8005fc6:	462a      	mov	r2, r5
 8005fc8:	4639      	mov	r1, r7
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff fe78 	bl	8005cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005fd0:	f1b9 0f00 	cmp.w	r9, #0
 8005fd4:	d011      	beq.n	8005ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8005fd6:	42ac      	cmp	r4, r5
 8005fd8:	d00f      	beq.n	8005ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8005fda:	464a      	mov	r2, r9
 8005fdc:	1931      	adds	r1, r6, r4
 8005fde:	1970      	adds	r0, r6, r5
 8005fe0:	f7ff fe6e 	bl	8005cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005fe4:	42ac      	cmp	r4, r5
 8005fe6:	d208      	bcs.n	8005ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8005fe8:	4434      	add	r4, r6
 8005fea:	197b      	adds	r3, r7, r5
 8005fec:	429c      	cmp	r4, r3
 8005fee:	d30f      	bcc.n	8006010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff fe63 	bl	8005cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffe:	f8c8 a004 	str.w	sl, [r8, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	4640      	mov	r0, r8
 8006006:	f803 200a 	strb.w	r2, [r3, sl]
 800600a:	b005      	add	sp, #20
 800600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006010:	42bc      	cmp	r4, r7
 8006012:	d803      	bhi.n	800601c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8006014:	462a      	mov	r2, r5
 8006016:	eb07 010b 	add.w	r1, r7, fp
 800601a:	e7cd      	b.n	8005fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 800601c:	1be4      	subs	r4, r4, r7
 800601e:	4622      	mov	r2, r4
 8006020:	4639      	mov	r1, r7
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff fe4c 	bl	8005cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006028:	1b2a      	subs	r2, r5, r4
 800602a:	1971      	adds	r1, r6, r5
 800602c:	1930      	adds	r0, r6, r4
 800602e:	e7c4      	b.n	8005fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8006030:	9500      	str	r5, [sp, #0]
 8006032:	463b      	mov	r3, r7
 8006034:	4622      	mov	r2, r4
 8006036:	4649      	mov	r1, r9
 8006038:	4640      	mov	r0, r8
 800603a:	f7ff ff24 	bl	8005e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800603e:	e7dc      	b.n	8005ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8006040:	f1b9 0f00 	cmp.w	r9, #0
 8006044:	d0d0      	beq.n	8005fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8006046:	e7c8      	b.n	8005fda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8006048:	08006a49 	.word	0x08006a49

0800604c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800604c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	4615      	mov	r5, r2
 8006052:	4a09      	ldr	r2, [pc, #36]	@ (8006078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8006054:	460f      	mov	r7, r1
 8006056:	461e      	mov	r6, r3
 8006058:	f7ff fe00 	bl	8005c5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800605c:	6862      	ldr	r2, [r4, #4]
 800605e:	9b08      	ldr	r3, [sp, #32]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	1bd2      	subs	r2, r2, r7
 8006064:	42aa      	cmp	r2, r5
 8006066:	4601      	mov	r1, r0
 8006068:	4633      	mov	r3, r6
 800606a:	bf28      	it	cs
 800606c:	462a      	movcs	r2, r5
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff ff70 	bl	8005f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8006074:	b003      	add	sp, #12
 8006076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006078:	08006a33 	.word	0x08006a33

0800607c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800607c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800607e:	4605      	mov	r5, r0
 8006080:	4610      	mov	r0, r2
 8006082:	4614      	mov	r4, r2
 8006084:	460e      	mov	r6, r1
 8006086:	f7fa f8fb 	bl	8000280 <strlen>
 800608a:	4623      	mov	r3, r4
 800608c:	9000      	str	r0, [sp, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	4631      	mov	r1, r6
 8006092:	4628      	mov	r0, r5
 8006094:	f7ff ffda 	bl	800604c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8006098:	b002      	add	sp, #8
 800609a:	bd70      	pop	{r4, r5, r6, pc}

0800609c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800609c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80060a4:	4604      	mov	r4, r0
 80060a6:	eb02 0708 	add.w	r7, r2, r8
 80060aa:	460e      	mov	r6, r1
 80060ac:	4615      	mov	r5, r2
 80060ae:	f7ff feb6 	bl	8005e1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80060b2:	42b8      	cmp	r0, r7
 80060b4:	d30e      	bcc.n	80060d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 80060b6:	b12d      	cbz	r5, 80060c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	462a      	mov	r2, r5
 80060bc:	4631      	mov	r1, r6
 80060be:	4440      	add	r0, r8
 80060c0:	f7ff fdf2 	bl	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	6067      	str	r7, [r4, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	4620      	mov	r0, r4
 80060cc:	55da      	strb	r2, [r3, r7]
 80060ce:	b002      	add	sp, #8
 80060d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d4:	9500      	str	r5, [sp, #0]
 80060d6:	4633      	mov	r3, r6
 80060d8:	2200      	movs	r2, #0
 80060da:	4641      	mov	r1, r8
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff fed2 	bl	8005e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80060e2:	e7ef      	b.n	80060c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

080060e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	4616      	mov	r6, r2
 80060ee:	2100      	movs	r1, #0
 80060f0:	f7ff fdc2 	bl	8005c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80060f4:	4632      	mov	r2, r6
 80060f6:	4629      	mov	r1, r5
 80060f8:	4620      	mov	r0, r4
 80060fa:	f7ff ffcf 	bl	800609c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	08006a62 	.word	0x08006a62

08006104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8006104:	b508      	push	{r3, lr}
 8006106:	e9d1 1200 	ldrd	r1, r2, [r1]
 800610a:	f7ff ffeb 	bl	80060e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
 800610e:	bd08      	pop	{r3, pc}

08006110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	460d      	mov	r5, r1
 8006118:	f7fa f8b2 	bl	8000280 <strlen>
 800611c:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800611e:	4606      	mov	r6, r0
 8006120:	4602      	mov	r2, r0
 8006122:	2100      	movs	r1, #0
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fda7 	bl	8005c78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800612a:	4632      	mov	r2, r6
 800612c:	4629      	mov	r1, r5
 800612e:	4620      	mov	r0, r4
 8006130:	f7ff ffb4 	bl	800609c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8006134:	bd70      	pop	{r4, r5, r6, pc}
 8006136:	bf00      	nop
 8006138:	08006a62 	.word	0x08006a62

0800613c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800613c:	6800      	ldr	r0, [r0, #0]
 800613e:	4770      	bx	lr

08006140 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8006140:	6800      	ldr	r0, [r0, #0]
 8006142:	4770      	bx	lr

08006144 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8006144:	4770      	bx	lr

08006146 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 8006146:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	461d      	mov	r5, r3
 800614e:	6841      	ldr	r1, [r0, #4]
 8006150:	b93b      	cbnz	r3, 8006162 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1c>
 8006152:	4291      	cmp	r1, r2
 8006154:	d201      	bcs.n	800615a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 8006156:	f04f 32ff 	mov.w	r2, #4294967295
 800615a:	4610      	mov	r0, r2
 800615c:	b003      	add	sp, #12
 800615e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006162:	4291      	cmp	r1, r2
 8006164:	d9f7      	bls.n	8006156 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8006166:	f8d0 8000 	ldr.w	r8, [r0]
 800616a:	7833      	ldrb	r3, [r6, #0]
 800616c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006170:	eb08 0701 	add.w	r7, r8, r1
 8006174:	eb08 0002 	add.w	r0, r8, r2
 8006178:	1a89      	subs	r1, r1, r2
 800617a:	f1c5 0901 	rsb	r9, r5, #1
 800617e:	42a9      	cmp	r1, r5
 8006180:	d3e9      	bcc.n	8006156 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8006182:	f10d 0207 	add.w	r2, sp, #7
 8006186:	4449      	add	r1, r9
 8006188:	f7ff fd2b 	bl	8005be2 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 800618c:	4604      	mov	r4, r0
 800618e:	2800      	cmp	r0, #0
 8006190:	d0e1      	beq.n	8006156 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8006192:	462a      	mov	r2, r5
 8006194:	4631      	mov	r1, r6
 8006196:	f7fa f917 	bl	80003c8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800619a:	b910      	cbnz	r0, 80061a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
 800619c:	eba4 0208 	sub.w	r2, r4, r8
 80061a0:	e7db      	b.n	800615a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 80061a2:	1c60      	adds	r0, r4, #1
 80061a4:	1a39      	subs	r1, r7, r0
 80061a6:	e7ea      	b.n	800617e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x38>

080061a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 80061a8:	b508      	push	{r3, lr}
 80061aa:	e9d1 1300 	ldrd	r1, r3, [r1]
 80061ae:	f7ff ffca 	bl	8006146 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 80061b2:	bd08      	pop	{r3, pc}

080061b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4605      	mov	r5, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	460c      	mov	r4, r1
 80061bc:	4616      	mov	r6, r2
 80061be:	f7fa f85f 	bl	8000280 <strlen>
 80061c2:	4632      	mov	r2, r6
 80061c4:	4603      	mov	r3, r0
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7ff ffbc 	bl	8006146 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 80061ce:	bd70      	pop	{r4, r5, r6, pc}

080061d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80061d0:	b513      	push	{r0, r1, r4, lr}
 80061d2:	f88d 1007 	strb.w	r1, [sp, #7]
 80061d6:	6841      	ldr	r1, [r0, #4]
 80061d8:	428a      	cmp	r2, r1
 80061da:	4613      	mov	r3, r2
 80061dc:	d20a      	bcs.n	80061f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80061de:	6804      	ldr	r4, [r0, #0]
 80061e0:	f10d 0207 	add.w	r2, sp, #7
 80061e4:	1ac9      	subs	r1, r1, r3
 80061e6:	18e0      	adds	r0, r4, r3
 80061e8:	f7ff fcfb 	bl	8005be2 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80061ec:	b110      	cbz	r0, 80061f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80061ee:	1b00      	subs	r0, r0, r4
 80061f0:	b002      	add	sp, #8
 80061f2:	bd10      	pop	{r4, pc}
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	e7fa      	b.n	80061f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

080061fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80061fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061fc:	1a53      	subs	r3, r2, r1
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	4616      	mov	r6, r2
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	d906      	bls.n	8006218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 800620a:	2200      	movs	r2, #0
 800620c:	a901      	add	r1, sp, #4
 800620e:	f7ff fcf7 	bl	8005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	6020      	str	r0, [r4, #0]
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	4632      	mov	r2, r6
 800621a:	4629      	mov	r1, r5
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	f7ff fd86 	bl	8005d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8006222:	9b01      	ldr	r3, [sp, #4]
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	6063      	str	r3, [r4, #4]
 8006228:	2100      	movs	r1, #0
 800622a:	54d1      	strb	r1, [r2, r3]
 800622c:	b002      	add	sp, #8
 800622e:	bd70      	pop	{r4, r5, r6, pc}

08006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8006230:	f100 0208 	add.w	r2, r0, #8
 8006234:	b510      	push	{r4, lr}
 8006236:	6002      	str	r2, [r0, #0]
 8006238:	e9d1 1200 	ldrd	r1, r2, [r1]
 800623c:	4604      	mov	r4, r0
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	440a      	add	r2, r1
 8006244:	f7ff ffd9 	bl	80061fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8006248:	4620      	mov	r0, r4
 800624a:	bd10      	pop	{r4, pc}

0800624c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800624c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800624e:	1a53      	subs	r3, r2, r1
 8006250:	2b0f      	cmp	r3, #15
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	4616      	mov	r6, r2
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	d906      	bls.n	800626a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800625c:	2200      	movs	r2, #0
 800625e:	a901      	add	r1, sp, #4
 8006260:	f7ff fcce 	bl	8005c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	60a3      	str	r3, [r4, #8]
 800626a:	4632      	mov	r2, r6
 800626c:	4629      	mov	r1, r5
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	f7ff fd62 	bl	8005d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	2100      	movs	r1, #0
 800627c:	54d1      	strb	r1, [r2, r3]
 800627e:	b002      	add	sp, #8
 8006280:	bd70      	pop	{r4, r5, r6, pc}
	...

08006284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8006284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006288:	4698      	mov	r8, r3
 800628a:	f100 0308 	add.w	r3, r0, #8
 800628e:	460d      	mov	r5, r1
 8006290:	4617      	mov	r7, r2
 8006292:	6003      	str	r3, [r0, #0]
 8006294:	680e      	ldr	r6, [r1, #0]
 8006296:	4a0b      	ldr	r2, [pc, #44]	@ (80062c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8006298:	4604      	mov	r4, r0
 800629a:	4639      	mov	r1, r7
 800629c:	4628      	mov	r0, r5
 800629e:	f7ff fcdd 	bl	8005c5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80062a2:	686a      	ldr	r2, [r5, #4]
 80062a4:	1831      	adds	r1, r6, r0
 80062a6:	1bd2      	subs	r2, r2, r7
 80062a8:	4620      	mov	r0, r4
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	4542      	cmp	r2, r8
 80062b0:	bf94      	ite	ls
 80062b2:	188a      	addls	r2, r1, r2
 80062b4:	eb01 0208 	addhi.w	r2, r1, r8
 80062b8:	f7ff ffc8 	bl	800624c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80062bc:	4620      	mov	r0, r4
 80062be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c2:	bf00      	nop
 80062c4:	08006a77 	.word	0x08006a77

080062c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	460d      	mov	r5, r1
 80062cc:	4604      	mov	r4, r0
 80062ce:	4611      	mov	r1, r2
 80062d0:	4628      	mov	r0, r5
 80062d2:	4a06      	ldr	r2, [pc, #24]	@ (80062ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80062d4:	461e      	mov	r6, r3
 80062d6:	f7ff fcc1 	bl	8005c5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80062da:	4633      	mov	r3, r6
 80062dc:	4602      	mov	r2, r0
 80062de:	4629      	mov	r1, r5
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7ff ffcf 	bl	8006284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80062e6:	4620      	mov	r0, r4
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	bf00      	nop
 80062ec:	08006a92 	.word	0x08006a92

080062f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	f100 0308 	add.w	r3, r0, #8
 80062f6:	4604      	mov	r4, r0
 80062f8:	6003      	str	r3, [r0, #0]
 80062fa:	460d      	mov	r5, r1
 80062fc:	b911      	cbnz	r1, 8006304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 80062fe:	4807      	ldr	r0, [pc, #28]	@ (800631c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8006300:	f7ff fc61 	bl	8005bc6 <_ZSt19__throw_logic_errorPKc>
 8006304:	4608      	mov	r0, r1
 8006306:	f7f9 ffbb 	bl	8000280 <strlen>
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	182a      	adds	r2, r5, r0
 8006310:	4629      	mov	r1, r5
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff ff9a 	bl	800624c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006318:	4620      	mov	r0, r4
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	08006aa7 	.word	0x08006aa7

08006320 <_ZdlPv>:
 8006320:	f000 b818 	b.w	8006354 <free>

08006324 <_ZSt15get_new_handlerv>:
 8006324:	4b02      	ldr	r3, [pc, #8]	@ (8006330 <_ZSt15get_new_handlerv+0xc>)
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	f3bf 8f5b 	dmb	ish
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000218 	.word	0x20000218

08006334 <abort>:
 8006334:	b508      	push	{r3, lr}
 8006336:	2006      	movs	r0, #6
 8006338:	f000 f91c 	bl	8006574 <raise>
 800633c:	2001      	movs	r0, #1
 800633e:	f7fc fda0 	bl	8002e82 <_exit>
	...

08006344 <malloc>:
 8006344:	4b02      	ldr	r3, [pc, #8]	@ (8006350 <malloc+0xc>)
 8006346:	4601      	mov	r1, r0
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f000 b82d 	b.w	80063a8 <_malloc_r>
 800634e:	bf00      	nop
 8006350:	2000000c 	.word	0x2000000c

08006354 <free>:
 8006354:	4b02      	ldr	r3, [pc, #8]	@ (8006360 <free+0xc>)
 8006356:	4601      	mov	r1, r0
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f000 b971 	b.w	8006640 <_free_r>
 800635e:	bf00      	nop
 8006360:	2000000c 	.word	0x2000000c

08006364 <sbrk_aligned>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	4e0f      	ldr	r6, [pc, #60]	@ (80063a4 <sbrk_aligned+0x40>)
 8006368:	460c      	mov	r4, r1
 800636a:	6831      	ldr	r1, [r6, #0]
 800636c:	4605      	mov	r5, r0
 800636e:	b911      	cbnz	r1, 8006376 <sbrk_aligned+0x12>
 8006370:	f000 f91c 	bl	80065ac <_sbrk_r>
 8006374:	6030      	str	r0, [r6, #0]
 8006376:	4621      	mov	r1, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f000 f917 	bl	80065ac <_sbrk_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	d103      	bne.n	800638a <sbrk_aligned+0x26>
 8006382:	f04f 34ff 	mov.w	r4, #4294967295
 8006386:	4620      	mov	r0, r4
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	1cc4      	adds	r4, r0, #3
 800638c:	f024 0403 	bic.w	r4, r4, #3
 8006390:	42a0      	cmp	r0, r4
 8006392:	d0f8      	beq.n	8006386 <sbrk_aligned+0x22>
 8006394:	1a21      	subs	r1, r4, r0
 8006396:	4628      	mov	r0, r5
 8006398:	f000 f908 	bl	80065ac <_sbrk_r>
 800639c:	3001      	adds	r0, #1
 800639e:	d1f2      	bne.n	8006386 <sbrk_aligned+0x22>
 80063a0:	e7ef      	b.n	8006382 <sbrk_aligned+0x1e>
 80063a2:	bf00      	nop
 80063a4:	2000021c 	.word	0x2000021c

080063a8 <_malloc_r>:
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	1ccd      	adds	r5, r1, #3
 80063ae:	f025 0503 	bic.w	r5, r5, #3
 80063b2:	3508      	adds	r5, #8
 80063b4:	2d0c      	cmp	r5, #12
 80063b6:	bf38      	it	cc
 80063b8:	250c      	movcc	r5, #12
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	4606      	mov	r6, r0
 80063be:	db01      	blt.n	80063c4 <_malloc_r+0x1c>
 80063c0:	42a9      	cmp	r1, r5
 80063c2:	d904      	bls.n	80063ce <_malloc_r+0x26>
 80063c4:	230c      	movs	r3, #12
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	2000      	movs	r0, #0
 80063ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064a4 <_malloc_r+0xfc>
 80063d2:	f000 f869 	bl	80064a8 <__malloc_lock>
 80063d6:	f8d8 3000 	ldr.w	r3, [r8]
 80063da:	461c      	mov	r4, r3
 80063dc:	bb44      	cbnz	r4, 8006430 <_malloc_r+0x88>
 80063de:	4629      	mov	r1, r5
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7ff ffbf 	bl	8006364 <sbrk_aligned>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	4604      	mov	r4, r0
 80063ea:	d158      	bne.n	800649e <_malloc_r+0xf6>
 80063ec:	f8d8 4000 	ldr.w	r4, [r8]
 80063f0:	4627      	mov	r7, r4
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	d143      	bne.n	800647e <_malloc_r+0xd6>
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	d04b      	beq.n	8006492 <_malloc_r+0xea>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	4639      	mov	r1, r7
 80063fe:	4630      	mov	r0, r6
 8006400:	eb04 0903 	add.w	r9, r4, r3
 8006404:	f000 f8d2 	bl	80065ac <_sbrk_r>
 8006408:	4581      	cmp	r9, r0
 800640a:	d142      	bne.n	8006492 <_malloc_r+0xea>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	1a6d      	subs	r5, r5, r1
 8006410:	4629      	mov	r1, r5
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffa6 	bl	8006364 <sbrk_aligned>
 8006418:	3001      	adds	r0, #1
 800641a:	d03a      	beq.n	8006492 <_malloc_r+0xea>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	442b      	add	r3, r5
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	f8d8 3000 	ldr.w	r3, [r8]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	bb62      	cbnz	r2, 8006484 <_malloc_r+0xdc>
 800642a:	f8c8 7000 	str.w	r7, [r8]
 800642e:	e00f      	b.n	8006450 <_malloc_r+0xa8>
 8006430:	6822      	ldr	r2, [r4, #0]
 8006432:	1b52      	subs	r2, r2, r5
 8006434:	d420      	bmi.n	8006478 <_malloc_r+0xd0>
 8006436:	2a0b      	cmp	r2, #11
 8006438:	d917      	bls.n	800646a <_malloc_r+0xc2>
 800643a:	1961      	adds	r1, r4, r5
 800643c:	42a3      	cmp	r3, r4
 800643e:	6025      	str	r5, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	6059      	strne	r1, [r3, #4]
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	bf08      	it	eq
 8006448:	f8c8 1000 	streq.w	r1, [r8]
 800644c:	5162      	str	r2, [r4, r5]
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 f82f 	bl	80064b4 <__malloc_unlock>
 8006456:	f104 000b 	add.w	r0, r4, #11
 800645a:	1d23      	adds	r3, r4, #4
 800645c:	f020 0007 	bic.w	r0, r0, #7
 8006460:	1ac2      	subs	r2, r0, r3
 8006462:	bf1c      	itt	ne
 8006464:	1a1b      	subne	r3, r3, r0
 8006466:	50a3      	strne	r3, [r4, r2]
 8006468:	e7af      	b.n	80063ca <_malloc_r+0x22>
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	42a3      	cmp	r3, r4
 800646e:	bf0c      	ite	eq
 8006470:	f8c8 2000 	streq.w	r2, [r8]
 8006474:	605a      	strne	r2, [r3, #4]
 8006476:	e7eb      	b.n	8006450 <_malloc_r+0xa8>
 8006478:	4623      	mov	r3, r4
 800647a:	6864      	ldr	r4, [r4, #4]
 800647c:	e7ae      	b.n	80063dc <_malloc_r+0x34>
 800647e:	463c      	mov	r4, r7
 8006480:	687f      	ldr	r7, [r7, #4]
 8006482:	e7b6      	b.n	80063f2 <_malloc_r+0x4a>
 8006484:	461a      	mov	r2, r3
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	42a3      	cmp	r3, r4
 800648a:	d1fb      	bne.n	8006484 <_malloc_r+0xdc>
 800648c:	2300      	movs	r3, #0
 800648e:	6053      	str	r3, [r2, #4]
 8006490:	e7de      	b.n	8006450 <_malloc_r+0xa8>
 8006492:	230c      	movs	r3, #12
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f80c 	bl	80064b4 <__malloc_unlock>
 800649c:	e794      	b.n	80063c8 <_malloc_r+0x20>
 800649e:	6005      	str	r5, [r0, #0]
 80064a0:	e7d6      	b.n	8006450 <_malloc_r+0xa8>
 80064a2:	bf00      	nop
 80064a4:	20000220 	.word	0x20000220

080064a8 <__malloc_lock>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__malloc_lock+0x8>)
 80064aa:	f000 b8b9 	b.w	8006620 <__retarget_lock_acquire_recursive>
 80064ae:	bf00      	nop
 80064b0:	20000360 	.word	0x20000360

080064b4 <__malloc_unlock>:
 80064b4:	4801      	ldr	r0, [pc, #4]	@ (80064bc <__malloc_unlock+0x8>)
 80064b6:	f000 b8b4 	b.w	8006622 <__retarget_lock_release_recursive>
 80064ba:	bf00      	nop
 80064bc:	20000360 	.word	0x20000360

080064c0 <memcmp>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	3901      	subs	r1, #1
 80064c4:	4402      	add	r2, r0
 80064c6:	4290      	cmp	r0, r2
 80064c8:	d101      	bne.n	80064ce <memcmp+0xe>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e005      	b.n	80064da <memcmp+0x1a>
 80064ce:	7803      	ldrb	r3, [r0, #0]
 80064d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d001      	beq.n	80064dc <memcmp+0x1c>
 80064d8:	1b18      	subs	r0, r3, r4
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	3001      	adds	r0, #1
 80064de:	e7f2      	b.n	80064c6 <memcmp+0x6>

080064e0 <memmove>:
 80064e0:	4288      	cmp	r0, r1
 80064e2:	b510      	push	{r4, lr}
 80064e4:	eb01 0402 	add.w	r4, r1, r2
 80064e8:	d902      	bls.n	80064f0 <memmove+0x10>
 80064ea:	4284      	cmp	r4, r0
 80064ec:	4623      	mov	r3, r4
 80064ee:	d807      	bhi.n	8006500 <memmove+0x20>
 80064f0:	1e43      	subs	r3, r0, #1
 80064f2:	42a1      	cmp	r1, r4
 80064f4:	d008      	beq.n	8006508 <memmove+0x28>
 80064f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064fe:	e7f8      	b.n	80064f2 <memmove+0x12>
 8006500:	4402      	add	r2, r0
 8006502:	4601      	mov	r1, r0
 8006504:	428a      	cmp	r2, r1
 8006506:	d100      	bne.n	800650a <memmove+0x2a>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800650e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006512:	e7f7      	b.n	8006504 <memmove+0x24>

08006514 <memset>:
 8006514:	4402      	add	r2, r0
 8006516:	4603      	mov	r3, r0
 8006518:	4293      	cmp	r3, r2
 800651a:	d100      	bne.n	800651e <memset+0xa>
 800651c:	4770      	bx	lr
 800651e:	f803 1b01 	strb.w	r1, [r3], #1
 8006522:	e7f9      	b.n	8006518 <memset+0x4>

08006524 <_raise_r>:
 8006524:	291f      	cmp	r1, #31
 8006526:	b538      	push	{r3, r4, r5, lr}
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	d904      	bls.n	8006538 <_raise_r+0x14>
 800652e:	2316      	movs	r3, #22
 8006530:	6003      	str	r3, [r0, #0]
 8006532:	f04f 30ff 	mov.w	r0, #4294967295
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800653a:	b112      	cbz	r2, 8006542 <_raise_r+0x1e>
 800653c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006540:	b94b      	cbnz	r3, 8006556 <_raise_r+0x32>
 8006542:	4628      	mov	r0, r5
 8006544:	f000 f830 	bl	80065a8 <_getpid_r>
 8006548:	4622      	mov	r2, r4
 800654a:	4601      	mov	r1, r0
 800654c:	4628      	mov	r0, r5
 800654e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006552:	f000 b817 	b.w	8006584 <_kill_r>
 8006556:	2b01      	cmp	r3, #1
 8006558:	d00a      	beq.n	8006570 <_raise_r+0x4c>
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	d103      	bne.n	8006566 <_raise_r+0x42>
 800655e:	2316      	movs	r3, #22
 8006560:	6003      	str	r3, [r0, #0]
 8006562:	2001      	movs	r0, #1
 8006564:	e7e7      	b.n	8006536 <_raise_r+0x12>
 8006566:	2100      	movs	r1, #0
 8006568:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800656c:	4620      	mov	r0, r4
 800656e:	4798      	blx	r3
 8006570:	2000      	movs	r0, #0
 8006572:	e7e0      	b.n	8006536 <_raise_r+0x12>

08006574 <raise>:
 8006574:	4b02      	ldr	r3, [pc, #8]	@ (8006580 <raise+0xc>)
 8006576:	4601      	mov	r1, r0
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	f7ff bfd3 	b.w	8006524 <_raise_r>
 800657e:	bf00      	nop
 8006580:	2000000c 	.word	0x2000000c

08006584 <_kill_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d07      	ldr	r5, [pc, #28]	@ (80065a4 <_kill_r+0x20>)
 8006588:	2300      	movs	r3, #0
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	f7fc fc66 	bl	8002e62 <_kill>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d102      	bne.n	80065a0 <_kill_r+0x1c>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	b103      	cbz	r3, 80065a0 <_kill_r+0x1c>
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	bd38      	pop	{r3, r4, r5, pc}
 80065a2:	bf00      	nop
 80065a4:	2000035c 	.word	0x2000035c

080065a8 <_getpid_r>:
 80065a8:	f7fc bc53 	b.w	8002e52 <_getpid>

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	@ (80065c8 <_sbrk_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fc fc6e 	bl	8002e98 <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	2000035c 	.word	0x2000035c

080065cc <__errno>:
 80065cc:	4b01      	ldr	r3, [pc, #4]	@ (80065d4 <__errno+0x8>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	2000000c 	.word	0x2000000c

080065d8 <__libc_init_array>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	4d0d      	ldr	r5, [pc, #52]	@ (8006610 <__libc_init_array+0x38>)
 80065dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006614 <__libc_init_array+0x3c>)
 80065de:	1b64      	subs	r4, r4, r5
 80065e0:	10a4      	asrs	r4, r4, #2
 80065e2:	2600      	movs	r6, #0
 80065e4:	42a6      	cmp	r6, r4
 80065e6:	d109      	bne.n	80065fc <__libc_init_array+0x24>
 80065e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006618 <__libc_init_array+0x40>)
 80065ea:	4c0c      	ldr	r4, [pc, #48]	@ (800661c <__libc_init_array+0x44>)
 80065ec:	f000 f872 	bl	80066d4 <_init>
 80065f0:	1b64      	subs	r4, r4, r5
 80065f2:	10a4      	asrs	r4, r4, #2
 80065f4:	2600      	movs	r6, #0
 80065f6:	42a6      	cmp	r6, r4
 80065f8:	d105      	bne.n	8006606 <__libc_init_array+0x2e>
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006600:	4798      	blx	r3
 8006602:	3601      	adds	r6, #1
 8006604:	e7ee      	b.n	80065e4 <__libc_init_array+0xc>
 8006606:	f855 3b04 	ldr.w	r3, [r5], #4
 800660a:	4798      	blx	r3
 800660c:	3601      	adds	r6, #1
 800660e:	e7f2      	b.n	80065f6 <__libc_init_array+0x1e>
 8006610:	08006ae4 	.word	0x08006ae4
 8006614:	08006ae4 	.word	0x08006ae4
 8006618:	08006ae4 	.word	0x08006ae4
 800661c:	08006aec 	.word	0x08006aec

08006620 <__retarget_lock_acquire_recursive>:
 8006620:	4770      	bx	lr

08006622 <__retarget_lock_release_recursive>:
 8006622:	4770      	bx	lr

08006624 <memcpy>:
 8006624:	440a      	add	r2, r1
 8006626:	4291      	cmp	r1, r2
 8006628:	f100 33ff 	add.w	r3, r0, #4294967295
 800662c:	d100      	bne.n	8006630 <memcpy+0xc>
 800662e:	4770      	bx	lr
 8006630:	b510      	push	{r4, lr}
 8006632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800663a:	4291      	cmp	r1, r2
 800663c:	d1f9      	bne.n	8006632 <memcpy+0xe>
 800663e:	bd10      	pop	{r4, pc}

08006640 <_free_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4605      	mov	r5, r0
 8006644:	2900      	cmp	r1, #0
 8006646:	d041      	beq.n	80066cc <_free_r+0x8c>
 8006648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664c:	1f0c      	subs	r4, r1, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfb8      	it	lt
 8006652:	18e4      	addlt	r4, r4, r3
 8006654:	f7ff ff28 	bl	80064a8 <__malloc_lock>
 8006658:	4a1d      	ldr	r2, [pc, #116]	@ (80066d0 <_free_r+0x90>)
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	b933      	cbnz	r3, 800666c <_free_r+0x2c>
 800665e:	6063      	str	r3, [r4, #4]
 8006660:	6014      	str	r4, [r2, #0]
 8006662:	4628      	mov	r0, r5
 8006664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006668:	f7ff bf24 	b.w	80064b4 <__malloc_unlock>
 800666c:	42a3      	cmp	r3, r4
 800666e:	d908      	bls.n	8006682 <_free_r+0x42>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	1821      	adds	r1, r4, r0
 8006674:	428b      	cmp	r3, r1
 8006676:	bf01      	itttt	eq
 8006678:	6819      	ldreq	r1, [r3, #0]
 800667a:	685b      	ldreq	r3, [r3, #4]
 800667c:	1809      	addeq	r1, r1, r0
 800667e:	6021      	streq	r1, [r4, #0]
 8006680:	e7ed      	b.n	800665e <_free_r+0x1e>
 8006682:	461a      	mov	r2, r3
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	b10b      	cbz	r3, 800668c <_free_r+0x4c>
 8006688:	42a3      	cmp	r3, r4
 800668a:	d9fa      	bls.n	8006682 <_free_r+0x42>
 800668c:	6811      	ldr	r1, [r2, #0]
 800668e:	1850      	adds	r0, r2, r1
 8006690:	42a0      	cmp	r0, r4
 8006692:	d10b      	bne.n	80066ac <_free_r+0x6c>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	4401      	add	r1, r0
 8006698:	1850      	adds	r0, r2, r1
 800669a:	4283      	cmp	r3, r0
 800669c:	6011      	str	r1, [r2, #0]
 800669e:	d1e0      	bne.n	8006662 <_free_r+0x22>
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	6053      	str	r3, [r2, #4]
 80066a6:	4408      	add	r0, r1
 80066a8:	6010      	str	r0, [r2, #0]
 80066aa:	e7da      	b.n	8006662 <_free_r+0x22>
 80066ac:	d902      	bls.n	80066b4 <_free_r+0x74>
 80066ae:	230c      	movs	r3, #12
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	e7d6      	b.n	8006662 <_free_r+0x22>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	1821      	adds	r1, r4, r0
 80066b8:	428b      	cmp	r3, r1
 80066ba:	bf04      	itt	eq
 80066bc:	6819      	ldreq	r1, [r3, #0]
 80066be:	685b      	ldreq	r3, [r3, #4]
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	bf04      	itt	eq
 80066c4:	1809      	addeq	r1, r1, r0
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	6054      	str	r4, [r2, #4]
 80066ca:	e7ca      	b.n	8006662 <_free_r+0x22>
 80066cc:	bd38      	pop	{r3, r4, r5, pc}
 80066ce:	bf00      	nop
 80066d0:	20000220 	.word	0x20000220

080066d4 <_init>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr

080066e0 <_fini>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr
